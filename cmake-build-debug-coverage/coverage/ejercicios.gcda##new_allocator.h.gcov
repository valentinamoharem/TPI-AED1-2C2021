        -:    0:Source:c:/mingw/lib/gcc/mingw32/6.3.0/include/c++/ext/new_allocator.h
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\CMakeFiles\tpi.dir\ejercicios.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\CMakeFiles\tpi.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard. 
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:        struct rebind
        -:   71:        { typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EEC2Ev called 3 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIiEC2Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt4pairIifEEC2Ev called 2 returned 100% blocks executed 100%
        5:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    $$$$$:   79-block  0
        3:   79-block  1
    $$$$$:   79-block  2
        2:   79-block  3
        -:   80:
function _ZN9__gnu_cxx13new_allocatorISt4pairIifEEC2ERKS3_ called 2 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEEC2ERKS4_ called 0 returned 0% blocks executed 0%
        2:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
        2:   81-block  0
    $$$$$:   81-block  1
    $$$$$:   81-block  2
        -:   82:
        -:   83:      template<typename _Tp1>
        -:   84:        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   85:
function _ZN9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EED2Ev called 4 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorIiED2Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt4pairIifEED2Ev called 4 returned 100% blocks executed 100%
        8:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        4:   86-block  0
    $$$$$:   86-block  1
    $$$$$:   86-block  2
        4:   86-block  3
        -:   87:
        -:   88:      pointer
        -:   89:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   90:      { return std::__addressof(__x); }
        -:   91:
        -:   92:      const_pointer
        -:   93:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   97:      // about what the return value is when __n == 0.
        -:   98:      pointer
function _ZN9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EE8allocateEjPKv called 5 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEE8allocateEjPKv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt4pairIifEE8allocateEjPKv called 2 returned 100% blocks executed 83%
        7:   99:      allocate(size_type __n, const void* = 0)
        5:   99-block  0
    $$$$$:   99-block  1
    $$$$$:   99-block  2
        2:   99-block  3
        -:  100:      { 
        7:  101:	if (__n > this->max_size())
        5:  101-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    $$$$$:  101-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  101-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        2:  101-block  3
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
    #####:  102:	  std::__throw_bad_alloc();
    $$$$$:  102-block  0
call    0 never executed
    $$$$$:  102-block  1
call    1 never executed
    $$$$$:  102-block  2
call    2 never executed
    $$$$$:  102-block  3
call    3 never executed
        -:  103:
        7:  104:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        5:  104-block  0
call    0 returned 5
    $$$$$:  104-block  1
call    1 never executed
    $$$$$:  104-block  2
call    2 never executed
        2:  104-block  3
call    3 returned 2
        -:  105:      }
        -:  106:
        -:  107:      // __p is not permitted to be a null pointer.
        -:  108:      void
function _ZN9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EE10deallocateEPS5_j called 5 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt4pairIifEE10deallocateEPS2_j called 2 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEE10deallocateEPS3_j called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij called 0 returned 0% blocks executed 0%
        7:  109:      deallocate(pointer __p, size_type)
        5:  109-block  0
        2:  109-block  1
    $$$$$:  109-block  2
    $$$$$:  109-block  3
        7:  110:      { ::operator delete(__p); }
        5:  110-block  0
call    0 returned 5
        2:  110-block  1
call    1 returned 2
    $$$$$:  110-block  2
call    2 never executed
    $$$$$:  110-block  3
call    3 never executed
        -:  111:
        -:  112:      size_type
function _ZNK9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EE8max_sizeEv called 13 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx13new_allocatorISt4pairIifEE8max_sizeEv called 2 returned 100% blocks executed 100%
       15:  113:      max_size() const _GLIBCXX_USE_NOEXCEPT
       13:  113-block  0
    $$$$$:  113-block  1
    $$$$$:  113-block  2
        2:  113-block  3
       15:  114:      { return size_t(-1) / sizeof(_Tp); }
       13:  114-block  0
    $$$$$:  114-block  1
    $$$$$:  114-block  2
        2:  114-block  3
        -:  115:
        -:  116:#if __cplusplus >= 201103L
        -:  117:      template<typename _Up, typename... _Args>
        -:  118:        void
function _ZN9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EE9constructIS5_JS5_EEEvPT_DpOT0_ called 8 returned 100% blocks executed 86%
function _ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEE9constructIS3_JRKS3_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
        8:  119:        construct(_Up* __p, _Args&&... __args)
        8:  119-block  0
    $$$$$:  119-block  1
    $$$$$:  119-block  2
        8:  120:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        8:  120-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0
        8:  120-block  1
call    4 returned 8
    $$$$$:  120-block  2
    $$$$$:  120-block  3
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  120-block  4
    $$$$$:  120-block  5
    $$$$$:  120-block  6
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  120-block  7
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  120-block  8
    $$$$$:  120-block  9
    $$$$$:  120-block 10
    %%%%%:  120-block 11
call   16 never executed
        -:  121:
        -:  122:      template<typename _Up>
        -:  123:        void 
function _ZN9__gnu_cxx13new_allocatorISt4pairISt6vectorIiSaIiEES4_EE7destroyIS5_EEvPT_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt6vectorIiSaIiEEE7destroyIS3_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  124:        destroy(_Up* __p) { __p->~_Up(); }
    $$$$$:  124-block  0
    $$$$$:  124-block  1
call    0 never executed
    $$$$$:  124-block  2
    $$$$$:  124-block  3
    $$$$$:  124-block  4
call    1 never executed
        -:  125:#else
        -:  126:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  127:      // 402. wrong new expression in [some_] allocator::construct
        -:  128:      void 
        -:  129:      construct(pointer __p, const _Tp& __val) 
        -:  130:      { ::new((void *)__p) _Tp(__val); }
        -:  131:
        -:  132:      void 
        -:  133:      destroy(pointer __p) { __p->~_Tp(); }
        -:  134:#endif
        -:  135:    };
        -:  136:
        -:  137:  template<typename _Tp>
        -:  138:    inline bool
        -:  139:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  140:    { return true; }
        -:  141:  
        -:  142:  template<typename _Tp>
        -:  143:    inline bool
        -:  144:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  145:    { return false; }
        -:  146:
        -:  147:_GLIBCXX_END_NAMESPACE_VERSION
        -:  148:} // namespace
        -:  149:
        -:  150:#endif
