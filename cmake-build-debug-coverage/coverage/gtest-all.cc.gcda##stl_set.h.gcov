        -:    0:Source:c:/mingw/lib/gcc/mingw32/6.3.0/include/c++/bits/stl_set.h
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Set implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1994
        -:   28: * Hewlett-Packard Company
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1996,1997
        -:   40: * Silicon Graphics Computer Systems, Inc.
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Silicon Graphics makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: */
        -:   50:
        -:   51:/** @file bits/stl_set.h
        -:   52: *  This is an internal header file, included by other library headers.
        -:   53: *  Do not attempt to use it directly. @headername{set}
        -:   54: */
        -:   55:
        -:   56:#ifndef _STL_SET_H
        -:   57:#define _STL_SET_H 1
        -:   58:
        -:   59:#include <bits/concept_check.h>
        -:   60:#if __cplusplus >= 201103L
        -:   61:#include <initializer_list>
        -:   62:#endif
        -:   63:
        -:   64:namespace std _GLIBCXX_VISIBILITY(default)
        -:   65:{
        -:   66:_GLIBCXX_BEGIN_NAMESPACE_CONTAINER
        -:   67:
        -:   68:  /**
        -:   69:   *  @brief A standard container made up of unique keys, which can be
        -:   70:   *  retrieved in logarithmic time.
        -:   71:   *
        -:   72:   *  @ingroup associative_containers
        -:   73:   *
        -:   74:   *  @tparam _Key  Type of key objects.
        -:   75:   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
        -:   76:   *  @tparam _Alloc  Allocator type, defaults to allocator<_Key>.
        -:   77:   *
        -:   78:   *  Meets the requirements of a <a href="tables.html#65">container</a>, a
        -:   79:   *  <a href="tables.html#66">reversible container</a>, and an
        -:   80:   *  <a href="tables.html#69">associative container</a> (using unique keys).
        -:   81:   *
        -:   82:   *  Sets support bidirectional iterators.
        -:   83:   *
        -:   84:   *  The private tree data is declared exactly the same way for set and
        -:   85:   *  multiset; the distinction is made entirely in how the tree functions are
        -:   86:   *  called (*_unique versus *_equal, same as the standard).
        -:   87:  */
        -:   88:  template<typename _Key, typename _Compare = std::less<_Key>,
        -:   89:	   typename _Alloc = std::allocator<_Key> >
function _ZNSt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS5_ESaIS5_EED1Ev called 0 returned 0% blocks executed 0%
    #####:   90:    class set
    $$$$$:   90-block  0
    $$$$$:   90-block  1
call    0 never executed
        -:   91:    {
        -:   92:      // concept requirements
        -:   93:      typedef typename _Alloc::value_type                   _Alloc_value_type;
        -:   94:      __glibcxx_class_requires(_Key, _SGIAssignableConcept)
        -:   95:      __glibcxx_class_requires4(_Compare, bool, _Key, _Key,
        -:   96:				_BinaryFunctionConcept)
        -:   97:      __glibcxx_class_requires2(_Key, _Alloc_value_type, _SameTypeConcept)
        -:   98:
        -:   99:    public:
        -:  100:      // typedefs:
        -:  101:      //@{
        -:  102:      /// Public typedefs.
        -:  103:      typedef _Key     key_type;
        -:  104:      typedef _Key     value_type;
        -:  105:      typedef _Compare key_compare;
        -:  106:      typedef _Compare value_compare;
        -:  107:      typedef _Alloc   allocator_type;
        -:  108:      //@}
        -:  109:
        -:  110:    private:
        -:  111:      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        -:  112:	rebind<_Key>::other _Key_alloc_type;
        -:  113:
        -:  114:      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
        -:  115:		       key_compare, _Key_alloc_type> _Rep_type;
        -:  116:      _Rep_type _M_t;  // Red-black tree representing set.
        -:  117:
        -:  118:      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;
        -:  119:
        -:  120:    public:
        -:  121:      //@{
        -:  122:      ///  Iterator-related typedefs.
        -:  123:      typedef typename _Alloc_traits::pointer		    pointer;
        -:  124:      typedef typename _Alloc_traits::const_pointer	    const_pointer;
        -:  125:      typedef typename _Alloc_traits::reference		    reference;
        -:  126:      typedef typename _Alloc_traits::const_reference	    const_reference;
        -:  127:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  128:      // DR 103. set::iterator is required to be modifiable,
        -:  129:      // but this allows modification of keys.
        -:  130:      typedef typename _Rep_type::const_iterator            iterator;
        -:  131:      typedef typename _Rep_type::const_iterator            const_iterator;
        -:  132:      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;
        -:  133:      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
        -:  134:      typedef typename _Rep_type::size_type                 size_type;
        -:  135:      typedef typename _Rep_type::difference_type           difference_type;
        -:  136:      //@}
        -:  137:
        -:  138:      // allocation/deallocation
        -:  139:      /**
        -:  140:       *  @brief  Default constructor creates no elements.
        -:  141:       */
function _ZNSt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS5_ESaIS5_EEC1Ev called 0 returned 0% blocks executed 0%
    #####:  142:      set()
    $$$$$:  142-block  0
        -:  143:      _GLIBCXX_NOEXCEPT_IF(
        -:  144:	  is_nothrow_default_constructible<allocator_type>::value
        -:  145:	  && is_nothrow_default_constructible<key_compare>::value)
    #####:  146:      : _M_t() { }
    $$$$$:  146-block  0
call    0 never executed
        -:  147:
        -:  148:      /**
        -:  149:       *  @brief  Creates a %set with no elements.
        -:  150:       *  @param  __comp  Comparator to use.
        -:  151:       *  @param  __a  An allocator object.
        -:  152:       */
        -:  153:      explicit
        -:  154:      set(const _Compare& __comp,
        -:  155:	  const allocator_type& __a = allocator_type())
        -:  156:      : _M_t(__comp, _Key_alloc_type(__a)) { }
        -:  157:
        -:  158:      /**
        -:  159:       *  @brief  Builds a %set from a range.
        -:  160:       *  @param  __first  An input iterator.
        -:  161:       *  @param  __last  An input iterator.
        -:  162:       *
        -:  163:       *  Create a %set consisting of copies of the elements from
        -:  164:       *  [__first,__last).  This is linear in N if the range is
        -:  165:       *  already sorted, and NlogN otherwise (where N is
        -:  166:       *  distance(__first,__last)).
        -:  167:       */
        -:  168:      template<typename _InputIterator>
        -:  169:	set(_InputIterator __first, _InputIterator __last)
        -:  170:	: _M_t()
        -:  171:	{ _M_t._M_insert_unique(__first, __last); }
        -:  172:
        -:  173:      /**
        -:  174:       *  @brief  Builds a %set from a range.
        -:  175:       *  @param  __first  An input iterator.
        -:  176:       *  @param  __last  An input iterator.
        -:  177:       *  @param  __comp  A comparison functor.
        -:  178:       *  @param  __a  An allocator object.
        -:  179:       *
        -:  180:       *  Create a %set consisting of copies of the elements from
        -:  181:       *  [__first,__last).  This is linear in N if the range is
        -:  182:       *  already sorted, and NlogN otherwise (where N is
        -:  183:       *  distance(__first,__last)).
        -:  184:       */
        -:  185:      template<typename _InputIterator>
        -:  186:	set(_InputIterator __first, _InputIterator __last,
        -:  187:	    const _Compare& __comp,
        -:  188:	    const allocator_type& __a = allocator_type())
        -:  189:	: _M_t(__comp, _Key_alloc_type(__a))
        -:  190:        { _M_t._M_insert_unique(__first, __last); }
        -:  191:
        -:  192:      /**
        -:  193:       *  @brief  %Set copy constructor.
        -:  194:       *  @param  __x  A %set of identical element and allocator types.
        -:  195:       *
        -:  196:       *  The newly-created %set uses a copy of the allocation object used
        -:  197:       *  by @a __x.
        -:  198:       */
        -:  199:      set(const set& __x)
        -:  200:      : _M_t(__x._M_t) { }
        -:  201:
        -:  202:#if __cplusplus >= 201103L
        -:  203:     /**
        -:  204:       *  @brief %Set move constructor
        -:  205:       *  @param __x  A %set of identical element and allocator types.
        -:  206:       *
        -:  207:       *  The newly-created %set contains the exact contents of @a x.
        -:  208:       *  The contents of @a x are a valid, but unspecified %set.
        -:  209:       */
        -:  210:      set(set&& __x)
        -:  211:      noexcept(is_nothrow_copy_constructible<_Compare>::value)
        -:  212:      : _M_t(std::move(__x._M_t)) { }
        -:  213:
        -:  214:      /**
        -:  215:       *  @brief  Builds a %set from an initializer_list.
        -:  216:       *  @param  __l  An initializer_list.
        -:  217:       *  @param  __comp  A comparison functor.
        -:  218:       *  @param  __a  An allocator object.
        -:  219:       *
        -:  220:       *  Create a %set consisting of copies of the elements in the list.
        -:  221:       *  This is linear in N if the list is already sorted, and NlogN
        -:  222:       *  otherwise (where N is @a __l.size()).
        -:  223:       */
        -:  224:      set(initializer_list<value_type> __l,
        -:  225:	  const _Compare& __comp = _Compare(),
        -:  226:	  const allocator_type& __a = allocator_type())
        -:  227:      : _M_t(__comp, _Key_alloc_type(__a))
        -:  228:      { _M_t._M_insert_unique(__l.begin(), __l.end()); }
        -:  229:
        -:  230:      /// Allocator-extended default constructor.
        -:  231:      explicit
        -:  232:      set(const allocator_type& __a)
        -:  233:      : _M_t(_Compare(), _Key_alloc_type(__a)) { }
        -:  234:
        -:  235:      /// Allocator-extended copy constructor.
        -:  236:      set(const set& __x, const allocator_type& __a)
        -:  237:      : _M_t(__x._M_t, _Key_alloc_type(__a)) { }
        -:  238:
        -:  239:      /// Allocator-extended move constructor.
        -:  240:      set(set&& __x, const allocator_type& __a)
        -:  241:      noexcept(is_nothrow_copy_constructible<_Compare>::value
        -:  242:	       && _Alloc_traits::_S_always_equal())
        -:  243:      : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }
        -:  244:
        -:  245:      /// Allocator-extended initialier-list constructor.
        -:  246:      set(initializer_list<value_type> __l, const allocator_type& __a)
        -:  247:      : _M_t(_Compare(), _Key_alloc_type(__a))
        -:  248:      { _M_t._M_insert_unique(__l.begin(), __l.end()); }
        -:  249:
        -:  250:      /// Allocator-extended range constructor.
        -:  251:      template<typename _InputIterator>
        -:  252:        set(_InputIterator __first, _InputIterator __last,
        -:  253:	    const allocator_type& __a)
        -:  254:	: _M_t(_Compare(), _Key_alloc_type(__a))
        -:  255:        { _M_t._M_insert_unique(__first, __last); }
        -:  256:#endif
        -:  257:
        -:  258:      /**
        -:  259:       *  @brief  %Set assignment operator.
        -:  260:       *  @param  __x  A %set of identical element and allocator types.
        -:  261:       *
        -:  262:       *  All the elements of @a __x are copied, but unlike the copy
        -:  263:       *  constructor, the allocator object is not copied.
        -:  264:       */
        -:  265:      set&
        -:  266:      operator=(const set& __x)
        -:  267:      {
        -:  268:	_M_t = __x._M_t;
        -:  269:	return *this;
        -:  270:      }
        -:  271:
        -:  272:#if __cplusplus >= 201103L
        -:  273:      /// Move assignment operator.
        -:  274:      set&
        -:  275:      operator=(set&&) = default;
        -:  276:
        -:  277:      /**
        -:  278:       *  @brief  %Set list assignment operator.
        -:  279:       *  @param  __l  An initializer_list.
        -:  280:       *
        -:  281:       *  This function fills a %set with copies of the elements in the
        -:  282:       *  initializer list @a __l.
        -:  283:       *
        -:  284:       *  Note that the assignment completely changes the %set and
        -:  285:       *  that the resulting %set's size is the same as the number
        -:  286:       *  of elements assigned.  Old data may be lost.
        -:  287:       */
        -:  288:      set&
        -:  289:      operator=(initializer_list<value_type> __l)
        -:  290:      {
        -:  291:	_M_t._M_assign_unique(__l.begin(), __l.end());
        -:  292:	return *this;
        -:  293:      }
        -:  294:#endif
        -:  295:
        -:  296:      // accessors:
        -:  297:
        -:  298:      ///  Returns the comparison object with which the %set was constructed.
        -:  299:      key_compare
        -:  300:      key_comp() const
        -:  301:      { return _M_t.key_comp(); }
        -:  302:      ///  Returns the comparison object with which the %set was constructed.
        -:  303:      value_compare
        -:  304:      value_comp() const
        -:  305:      { return _M_t.key_comp(); }
        -:  306:      ///  Returns the allocator object with which the %set was constructed.
        -:  307:      allocator_type
        -:  308:      get_allocator() const _GLIBCXX_NOEXCEPT
        -:  309:      { return allocator_type(_M_t.get_allocator()); }
        -:  310:
        -:  311:      /**
        -:  312:       *  Returns a read-only (constant) iterator that points to the first
        -:  313:       *  element in the %set.  Iteration is done in ascending order according
        -:  314:       *  to the keys.
        -:  315:       */
        -:  316:      iterator
        -:  317:      begin() const _GLIBCXX_NOEXCEPT
        -:  318:      { return _M_t.begin(); }
        -:  319:
        -:  320:      /**
        -:  321:       *  Returns a read-only (constant) iterator that points one past the last
        -:  322:       *  element in the %set.  Iteration is done in ascending order according
        -:  323:       *  to the keys.
        -:  324:       */
        -:  325:      iterator
        -:  326:      end() const _GLIBCXX_NOEXCEPT
        -:  327:      { return _M_t.end(); }
        -:  328:
        -:  329:      /**
        -:  330:       *  Returns a read-only (constant) iterator that points to the last
        -:  331:       *  element in the %set.  Iteration is done in descending order according
        -:  332:       *  to the keys.
        -:  333:       */
        -:  334:      reverse_iterator
        -:  335:      rbegin() const _GLIBCXX_NOEXCEPT
        -:  336:      { return _M_t.rbegin(); }
        -:  337:
        -:  338:      /**
        -:  339:       *  Returns a read-only (constant) reverse iterator that points to the
        -:  340:       *  last pair in the %set.  Iteration is done in descending order
        -:  341:       *  according to the keys.
        -:  342:       */
        -:  343:      reverse_iterator
        -:  344:      rend() const _GLIBCXX_NOEXCEPT
        -:  345:      { return _M_t.rend(); }
        -:  346:
        -:  347:#if __cplusplus >= 201103L
        -:  348:      /**
        -:  349:       *  Returns a read-only (constant) iterator that points to the first
        -:  350:       *  element in the %set.  Iteration is done in ascending order according
        -:  351:       *  to the keys.
        -:  352:       */
        -:  353:      iterator
        -:  354:      cbegin() const noexcept
        -:  355:      { return _M_t.begin(); }
        -:  356:
        -:  357:      /**
        -:  358:       *  Returns a read-only (constant) iterator that points one past the last
        -:  359:       *  element in the %set.  Iteration is done in ascending order according
        -:  360:       *  to the keys.
        -:  361:       */
        -:  362:      iterator
        -:  363:      cend() const noexcept
        -:  364:      { return _M_t.end(); }
        -:  365:
        -:  366:      /**
        -:  367:       *  Returns a read-only (constant) iterator that points to the last
        -:  368:       *  element in the %set.  Iteration is done in descending order according
        -:  369:       *  to the keys.
        -:  370:       */
        -:  371:      reverse_iterator
        -:  372:      crbegin() const noexcept
        -:  373:      { return _M_t.rbegin(); }
        -:  374:
        -:  375:      /**
        -:  376:       *  Returns a read-only (constant) reverse iterator that points to the
        -:  377:       *  last pair in the %set.  Iteration is done in descending order
        -:  378:       *  according to the keys.
        -:  379:       */
        -:  380:      reverse_iterator
        -:  381:      crend() const noexcept
        -:  382:      { return _M_t.rend(); }
        -:  383:#endif
        -:  384:
        -:  385:      ///  Returns true if the %set is empty.
        -:  386:      bool
        -:  387:      empty() const _GLIBCXX_NOEXCEPT
        -:  388:      { return _M_t.empty(); }
        -:  389:
        -:  390:      ///  Returns the size of the %set.
        -:  391:      size_type
        -:  392:      size() const _GLIBCXX_NOEXCEPT
        -:  393:      { return _M_t.size(); }
        -:  394:
        -:  395:      ///  Returns the maximum size of the %set.
        -:  396:      size_type
        -:  397:      max_size() const _GLIBCXX_NOEXCEPT
        -:  398:      { return _M_t.max_size(); }
        -:  399:
        -:  400:      /**
        -:  401:       *  @brief  Swaps data with another %set.
        -:  402:       *  @param  __x  A %set of the same element and allocator types.
        -:  403:       *
        -:  404:       *  This exchanges the elements between two sets in constant
        -:  405:       *  time.  (It is only swapping a pointer, an integer, and an
        -:  406:       *  instance of the @c Compare type (which itself is often
        -:  407:       *  stateless and empty), so it should be quite fast.)  Note
        -:  408:       *  that the global std::swap() function is specialized such
        -:  409:       *  that std::swap(s1,s2) will feed to this function.
        -:  410:       */
        -:  411:      void
        -:  412:      swap(set& __x)
        -:  413:      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
        -:  414:      { _M_t.swap(__x._M_t); }
        -:  415:
        -:  416:      // insert/erase
        -:  417:#if __cplusplus >= 201103L
        -:  418:      /**
        -:  419:       *  @brief Attempts to build and insert an element into the %set.
        -:  420:       *  @param __args  Arguments used to generate an element.
        -:  421:       *  @return  A pair, of which the first element is an iterator that points
        -:  422:       *           to the possibly inserted element, and the second is a bool
        -:  423:       *           that is true if the element was actually inserted.
        -:  424:       *
        -:  425:       *  This function attempts to build and insert an element into the %set.
        -:  426:       *  A %set relies on unique keys and thus an element is only inserted if
        -:  427:       *  it is not already present in the %set.
        -:  428:       *
        -:  429:       *  Insertion requires logarithmic time.
        -:  430:       */
        -:  431:      template<typename... _Args>
        -:  432:	std::pair<iterator, bool>
        -:  433:	emplace(_Args&&... __args)
        -:  434:	{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
        -:  435:
        -:  436:      /**
        -:  437:       *  @brief Attempts to insert an element into the %set.
        -:  438:       *  @param  __pos  An iterator that serves as a hint as to where the
        -:  439:       *                element should be inserted.
        -:  440:       *  @param  __args  Arguments used to generate the element to be
        -:  441:       *                 inserted.
        -:  442:       *  @return An iterator that points to the element with key equivalent to
        -:  443:       *          the one generated from @a __args (may or may not be the
        -:  444:       *          element itself).
        -:  445:       *
        -:  446:       *  This function is not concerned about whether the insertion took place,
        -:  447:       *  and thus does not return a boolean like the single-argument emplace()
        -:  448:       *  does.  Note that the first parameter is only a hint and can
        -:  449:       *  potentially improve the performance of the insertion process.  A bad
        -:  450:       *  hint would cause no gains in efficiency.
        -:  451:       *
        -:  452:       *  For more on @a hinting, see:
        -:  453:       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
        -:  454:       *
        -:  455:       *  Insertion requires logarithmic time (if the hint is not taken).
        -:  456:       */
        -:  457:      template<typename... _Args>
        -:  458:	iterator
        -:  459:	emplace_hint(const_iterator __pos, _Args&&... __args)
        -:  460:	{
        -:  461:	  return _M_t._M_emplace_hint_unique(__pos,
        -:  462:					     std::forward<_Args>(__args)...);
        -:  463:	}
        -:  464:#endif
        -:  465:
        -:  466:      /**
        -:  467:       *  @brief Attempts to insert an element into the %set.
        -:  468:       *  @param  __x  Element to be inserted.
        -:  469:       *  @return  A pair, of which the first element is an iterator that points
        -:  470:       *           to the possibly inserted element, and the second is a bool
        -:  471:       *           that is true if the element was actually inserted.
        -:  472:       *
        -:  473:       *  This function attempts to insert an element into the %set.  A %set
        -:  474:       *  relies on unique keys and thus an element is only inserted if it is
        -:  475:       *  not already present in the %set.
        -:  476:       *
        -:  477:       *  Insertion requires logarithmic time.
        -:  478:       */
        -:  479:      std::pair<iterator, bool>
function _ZNSt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS5_ESaIS5_EE6insertERKS5_ called 0 returned 0% blocks executed 0%
    #####:  480:      insert(const value_type& __x)
    $$$$$:  480-block  0
        -:  481:      {
        -:  482:	std::pair<typename _Rep_type::iterator, bool> __p =
    #####:  483:	  _M_t._M_insert_unique(__x);
    $$$$$:  483-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  484:	return std::pair<iterator, bool>(__p.first, __p.second);
    $$$$$:  484-block  0
call    0 never executed
    $$$$$:  484-block  1
        -:  485:      }
        -:  486:
        -:  487:#if __cplusplus >= 201103L
        -:  488:      std::pair<iterator, bool>
        -:  489:      insert(value_type&& __x)
        -:  490:      {
        -:  491:	std::pair<typename _Rep_type::iterator, bool> __p =
        -:  492:	  _M_t._M_insert_unique(std::move(__x));
        -:  493:	return std::pair<iterator, bool>(__p.first, __p.second);
        -:  494:      }
        -:  495:#endif
        -:  496:
        -:  497:      /**
        -:  498:       *  @brief Attempts to insert an element into the %set.
        -:  499:       *  @param  __position  An iterator that serves as a hint as to where the
        -:  500:       *                    element should be inserted.
        -:  501:       *  @param  __x  Element to be inserted.
        -:  502:       *  @return An iterator that points to the element with key of
        -:  503:       *           @a __x (may or may not be the element passed in).
        -:  504:       *
        -:  505:       *  This function is not concerned about whether the insertion took place,
        -:  506:       *  and thus does not return a boolean like the single-argument insert()
        -:  507:       *  does.  Note that the first parameter is only a hint and can
        -:  508:       *  potentially improve the performance of the insertion process.  A bad
        -:  509:       *  hint would cause no gains in efficiency.
        -:  510:       *
        -:  511:       *  For more on @a hinting, see:
        -:  512:       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
        -:  513:       *
        -:  514:       *  Insertion requires logarithmic time (if the hint is not taken).
        -:  515:       */
        -:  516:      iterator
        -:  517:      insert(const_iterator __position, const value_type& __x)
        -:  518:      { return _M_t._M_insert_unique_(__position, __x); }
        -:  519:
        -:  520:#if __cplusplus >= 201103L
        -:  521:      iterator
        -:  522:      insert(const_iterator __position, value_type&& __x)
        -:  523:      { return _M_t._M_insert_unique_(__position, std::move(__x)); }
        -:  524:#endif
        -:  525:
        -:  526:      /**
        -:  527:       *  @brief A template function that attempts to insert a range
        -:  528:       *  of elements.
        -:  529:       *  @param  __first  Iterator pointing to the start of the range to be
        -:  530:       *                   inserted.
        -:  531:       *  @param  __last  Iterator pointing to the end of the range.
        -:  532:       *
        -:  533:       *  Complexity similar to that of the range constructor.
        -:  534:       */
        -:  535:      template<typename _InputIterator>
        -:  536:	void
        -:  537:	insert(_InputIterator __first, _InputIterator __last)
        -:  538:	{ _M_t._M_insert_unique(__first, __last); }
        -:  539:
        -:  540:#if __cplusplus >= 201103L
        -:  541:      /**
        -:  542:       *  @brief Attempts to insert a list of elements into the %set.
        -:  543:       *  @param  __l  A std::initializer_list<value_type> of elements
        -:  544:       *               to be inserted.
        -:  545:       *
        -:  546:       *  Complexity similar to that of the range constructor.
        -:  547:       */
        -:  548:      void
        -:  549:      insert(initializer_list<value_type> __l)
        -:  550:      { this->insert(__l.begin(), __l.end()); }
        -:  551:#endif
        -:  552:
        -:  553:#if __cplusplus >= 201103L
        -:  554:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  555:      // DR 130. Associative erase should return an iterator.
        -:  556:      /**
        -:  557:       *  @brief Erases an element from a %set.
        -:  558:       *  @param  __position  An iterator pointing to the element to be erased.
        -:  559:       *  @return An iterator pointing to the element immediately following
        -:  560:       *          @a __position prior to the element being erased. If no such
        -:  561:       *          element exists, end() is returned.
        -:  562:       *
        -:  563:       *  This function erases an element, pointed to by the given iterator,
        -:  564:       *  from a %set.  Note that this function only erases the element, and
        -:  565:       *  that if the element is itself a pointer, the pointed-to memory is not
        -:  566:       *  touched in any way.  Managing the pointer is the user's
        -:  567:       *  responsibility.
        -:  568:       */
        -:  569:      _GLIBCXX_ABI_TAG_CXX11
        -:  570:      iterator
        -:  571:      erase(const_iterator __position)
        -:  572:      { return _M_t.erase(__position); }
        -:  573:#else
        -:  574:      /**
        -:  575:       *  @brief Erases an element from a %set.
        -:  576:       *  @param  position  An iterator pointing to the element to be erased.
        -:  577:       *
        -:  578:       *  This function erases an element, pointed to by the given iterator,
        -:  579:       *  from a %set.  Note that this function only erases the element, and
        -:  580:       *  that if the element is itself a pointer, the pointed-to memory is not
        -:  581:       *  touched in any way.  Managing the pointer is the user's
        -:  582:       *  responsibility.
        -:  583:       */
        -:  584:      void
        -:  585:      erase(iterator __position)
        -:  586:      { _M_t.erase(__position); }
        -:  587:#endif
        -:  588:
        -:  589:      /**
        -:  590:       *  @brief Erases elements according to the provided key.
        -:  591:       *  @param  __x  Key of element to be erased.
        -:  592:       *  @return  The number of elements erased.
        -:  593:       *
        -:  594:       *  This function erases all the elements located by the given key from
        -:  595:       *  a %set.
        -:  596:       *  Note that this function only erases the element, and that if
        -:  597:       *  the element is itself a pointer, the pointed-to memory is not touched
        -:  598:       *  in any way.  Managing the pointer is the user's responsibility.
        -:  599:       */
        -:  600:      size_type
        -:  601:      erase(const key_type& __x)
        -:  602:      { return _M_t.erase(__x); }
        -:  603:
        -:  604:#if __cplusplus >= 201103L
        -:  605:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  606:      // DR 130. Associative erase should return an iterator.
        -:  607:      /**
        -:  608:       *  @brief Erases a [__first,__last) range of elements from a %set.
        -:  609:       *  @param  __first  Iterator pointing to the start of the range to be
        -:  610:       *                 erased.
        -:  611:
        -:  612:       *  @param __last Iterator pointing to the end of the range to
        -:  613:       *  be erased.
        -:  614:       *  @return The iterator @a __last.
        -:  615:       *
        -:  616:       *  This function erases a sequence of elements from a %set.
        -:  617:       *  Note that this function only erases the element, and that if
        -:  618:       *  the element is itself a pointer, the pointed-to memory is not touched
        -:  619:       *  in any way.  Managing the pointer is the user's responsibility.
        -:  620:       */
        -:  621:      _GLIBCXX_ABI_TAG_CXX11
        -:  622:      iterator
        -:  623:      erase(const_iterator __first, const_iterator __last)
        -:  624:      { return _M_t.erase(__first, __last); }
        -:  625:#else
        -:  626:      /**
        -:  627:       *  @brief Erases a [first,last) range of elements from a %set.
        -:  628:       *  @param  __first  Iterator pointing to the start of the range to be
        -:  629:       *                 erased.
        -:  630:       *  @param __last Iterator pointing to the end of the range to
        -:  631:       *  be erased.
        -:  632:       *
        -:  633:       *  This function erases a sequence of elements from a %set.
        -:  634:       *  Note that this function only erases the element, and that if
        -:  635:       *  the element is itself a pointer, the pointed-to memory is not touched
        -:  636:       *  in any way.  Managing the pointer is the user's responsibility.
        -:  637:       */
        -:  638:      void
        -:  639:      erase(iterator __first, iterator __last)
        -:  640:      { _M_t.erase(__first, __last); }
        -:  641:#endif
        -:  642:
        -:  643:      /**
        -:  644:       *  Erases all elements in a %set.  Note that this function only erases
        -:  645:       *  the elements, and that if the elements themselves are pointers, the
        -:  646:       *  pointed-to memory is not touched in any way.  Managing the pointer is
        -:  647:       *  the user's responsibility.
        -:  648:       */
        -:  649:      void
        -:  650:      clear() _GLIBCXX_NOEXCEPT
        -:  651:      { _M_t.clear(); }
        -:  652:
        -:  653:      // set operations:
        -:  654:
        -:  655:      //@{
        -:  656:      /**
        -:  657:       *  @brief  Finds the number of elements.
        -:  658:       *  @param  __x  Element to located.
        -:  659:       *  @return  Number of elements with specified key.
        -:  660:       *
        -:  661:       *  This function only makes sense for multisets; for set the result will
        -:  662:       *  either be 0 (not present) or 1 (present).
        -:  663:       */
        -:  664:      size_type
function _ZNKSt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS5_ESaIS5_EE5countERKS5_ called 0 returned 0% blocks executed 0%
    #####:  665:      count(const key_type& __x) const
    $$$$$:  665-block  0
    #####:  666:      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
    $$$$$:  666-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  666-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  666-block  2
    $$$$$:  666-block  3
    $$$$$:  666-block  4
    $$$$$:  666-block  5
        -:  667:
        -:  668:#if __cplusplus > 201103L
        -:  669:      template<typename _Kt>
        -:  670:	auto
        -:  671:	count(const _Kt& __x) const
        -:  672:	-> decltype(_M_t._M_count_tr(__x))
        -:  673:	{ return _M_t._M_find_tr(__x) == _M_t.end() ? 0 : 1; }
        -:  674:#endif
        -:  675:      //@}
        -:  676:
        -:  677:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  678:      // 214.  set::find() missing const overload
        -:  679:      //@{
        -:  680:      /**
        -:  681:       *  @brief Tries to locate an element in a %set.
        -:  682:       *  @param  __x  Element to be located.
        -:  683:       *  @return  Iterator pointing to sought-after element, or end() if not
        -:  684:       *           found.
        -:  685:       *
        -:  686:       *  This function takes a key and tries to locate the element with which
        -:  687:       *  the key matches.  If successful the function returns an iterator
        -:  688:       *  pointing to the sought after element.  If unsuccessful it returns the
        -:  689:       *  past-the-end ( @c end() ) iterator.
        -:  690:       */
        -:  691:      iterator
        -:  692:      find(const key_type& __x)
        -:  693:      { return _M_t.find(__x); }
        -:  694:
        -:  695:      const_iterator
        -:  696:      find(const key_type& __x) const
        -:  697:      { return _M_t.find(__x); }
        -:  698:
        -:  699:#if __cplusplus > 201103L
        -:  700:      template<typename _Kt>
        -:  701:	auto
        -:  702:	find(const _Kt& __x)
        -:  703:	-> decltype(iterator{_M_t._M_find_tr(__x)})
        -:  704:	{ return iterator{_M_t._M_find_tr(__x)}; }
        -:  705:
        -:  706:      template<typename _Kt>
        -:  707:	auto
        -:  708:	find(const _Kt& __x) const
        -:  709:	-> decltype(const_iterator{_M_t._M_find_tr(__x)})
        -:  710:	{ return const_iterator{_M_t._M_find_tr(__x)}; }
        -:  711:#endif
        -:  712:      //@}
        -:  713:
        -:  714:      //@{
        -:  715:      /**
        -:  716:       *  @brief Finds the beginning of a subsequence matching given key.
        -:  717:       *  @param  __x  Key to be located.
        -:  718:       *  @return  Iterator pointing to first element equal to or greater
        -:  719:       *           than key, or end().
        -:  720:       *
        -:  721:       *  This function returns the first element of a subsequence of elements
        -:  722:       *  that matches the given key.  If unsuccessful it returns an iterator
        -:  723:       *  pointing to the first element that has a greater value than given key
        -:  724:       *  or end() if no such element exists.
        -:  725:       */
        -:  726:      iterator
        -:  727:      lower_bound(const key_type& __x)
        -:  728:      { return _M_t.lower_bound(__x); }
        -:  729:
        -:  730:      const_iterator
        -:  731:      lower_bound(const key_type& __x) const
        -:  732:      { return _M_t.lower_bound(__x); }
        -:  733:
        -:  734:#if __cplusplus > 201103L
        -:  735:      template<typename _Kt>
        -:  736:	auto
        -:  737:	lower_bound(const _Kt& __x)
        -:  738:	-> decltype(_M_t._M_lower_bound_tr(__x))
        -:  739:	{ return _M_t._M_lower_bound_tr(__x); }
        -:  740:
        -:  741:      template<typename _Kt>
        -:  742:	auto
        -:  743:	lower_bound(const _Kt& __x) const
        -:  744:	-> decltype(_M_t._M_lower_bound_tr(__x))
        -:  745:	{ return _M_t._M_lower_bound_tr(__x); }
        -:  746:#endif
        -:  747:      //@}
        -:  748:
        -:  749:      //@{
        -:  750:      /**
        -:  751:       *  @brief Finds the end of a subsequence matching given key.
        -:  752:       *  @param  __x  Key to be located.
        -:  753:       *  @return Iterator pointing to the first element
        -:  754:       *          greater than key, or end().
        -:  755:       */
        -:  756:      iterator
        -:  757:      upper_bound(const key_type& __x)
        -:  758:      { return _M_t.upper_bound(__x); }
        -:  759:
        -:  760:      const_iterator
        -:  761:      upper_bound(const key_type& __x) const
        -:  762:      { return _M_t.upper_bound(__x); }
        -:  763:
        -:  764:#if __cplusplus > 201103L
        -:  765:      template<typename _Kt>
        -:  766:	auto
        -:  767:	upper_bound(const _Kt& __x)
        -:  768:	-> decltype(_M_t._M_upper_bound_tr(__x))
        -:  769:	{ return _M_t._M_upper_bound_tr(__x); }
        -:  770:
        -:  771:      template<typename _Kt>
        -:  772:	auto
        -:  773:	upper_bound(const _Kt& __x) const
        -:  774:	-> decltype(_M_t._M_upper_bound_tr(__x))
        -:  775:	{ return _M_t._M_upper_bound_tr(__x); }
        -:  776:#endif
        -:  777:      //@}
        -:  778:
        -:  779:      //@{
        -:  780:      /**
        -:  781:       *  @brief Finds a subsequence matching given key.
        -:  782:       *  @param  __x  Key to be located.
        -:  783:       *  @return  Pair of iterators that possibly points to the subsequence
        -:  784:       *           matching given key.
        -:  785:       *
        -:  786:       *  This function is equivalent to
        -:  787:       *  @code
        -:  788:       *    std::make_pair(c.lower_bound(val),
        -:  789:       *                   c.upper_bound(val))
        -:  790:       *  @endcode
        -:  791:       *  (but is faster than making the calls separately).
        -:  792:       *
        -:  793:       *  This function probably only makes sense for multisets.
        -:  794:       */
        -:  795:      std::pair<iterator, iterator>
        -:  796:      equal_range(const key_type& __x)
        -:  797:      { return _M_t.equal_range(__x); }
        -:  798:
        -:  799:      std::pair<const_iterator, const_iterator>
        -:  800:      equal_range(const key_type& __x) const
        -:  801:      { return _M_t.equal_range(__x); }
        -:  802:
        -:  803:#if __cplusplus > 201103L
        -:  804:      template<typename _Kt>
        -:  805:	auto
        -:  806:	equal_range(const _Kt& __x)
        -:  807:	-> decltype(_M_t._M_equal_range_tr(__x))
        -:  808:	{ return _M_t._M_equal_range_tr(__x); }
        -:  809:
        -:  810:      template<typename _Kt>
        -:  811:	auto
        -:  812:	equal_range(const _Kt& __x) const
        -:  813:	-> decltype(_M_t._M_equal_range_tr(__x))
        -:  814:	{ return _M_t._M_equal_range_tr(__x); }
        -:  815:#endif
        -:  816:      //@}
        -:  817:
        -:  818:      template<typename _K1, typename _C1, typename _A1>
        -:  819:	friend bool
        -:  820:	operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);
        -:  821:
        -:  822:      template<typename _K1, typename _C1, typename _A1>
        -:  823:	friend bool
        -:  824:	operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);
        -:  825:    };
        -:  826:
        -:  827:
        -:  828:  /**
        -:  829:   *  @brief  Set equality comparison.
        -:  830:   *  @param  __x  A %set.
        -:  831:   *  @param  __y  A %set of the same type as @a x.
        -:  832:   *  @return  True iff the size and elements of the sets are equal.
        -:  833:   *
        -:  834:   *  This is an equivalence relation.  It is linear in the size of the sets.
        -:  835:   *  Sets are considered equivalent if their sizes are equal, and if
        -:  836:   *  corresponding elements compare equal.
        -:  837:  */
        -:  838:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  839:    inline bool
        -:  840:    operator==(const set<_Key, _Compare, _Alloc>& __x,
        -:  841:	       const set<_Key, _Compare, _Alloc>& __y)
        -:  842:    { return __x._M_t == __y._M_t; }
        -:  843:
        -:  844:  /**
        -:  845:   *  @brief  Set ordering relation.
        -:  846:   *  @param  __x  A %set.
        -:  847:   *  @param  __y  A %set of the same type as @a x.
        -:  848:   *  @return  True iff @a __x is lexicographically less than @a __y.
        -:  849:   *
        -:  850:   *  This is a total ordering relation.  It is linear in the size of the
        -:  851:   *  sets.  The elements must be comparable with @c <.
        -:  852:   *
        -:  853:   *  See std::lexicographical_compare() for how the determination is made.
        -:  854:  */
        -:  855:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  856:    inline bool
        -:  857:    operator<(const set<_Key, _Compare, _Alloc>& __x,
        -:  858:	      const set<_Key, _Compare, _Alloc>& __y)
        -:  859:    { return __x._M_t < __y._M_t; }
        -:  860:
        -:  861:  ///  Returns !(x == y).
        -:  862:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  863:    inline bool
        -:  864:    operator!=(const set<_Key, _Compare, _Alloc>& __x,
        -:  865:	       const set<_Key, _Compare, _Alloc>& __y)
        -:  866:    { return !(__x == __y); }
        -:  867:
        -:  868:  ///  Returns y < x.
        -:  869:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  870:    inline bool
        -:  871:    operator>(const set<_Key, _Compare, _Alloc>& __x,
        -:  872:	      const set<_Key, _Compare, _Alloc>& __y)
        -:  873:    { return __y < __x; }
        -:  874:
        -:  875:  ///  Returns !(y < x)
        -:  876:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  877:    inline bool
        -:  878:    operator<=(const set<_Key, _Compare, _Alloc>& __x,
        -:  879:	       const set<_Key, _Compare, _Alloc>& __y)
        -:  880:    { return !(__y < __x); }
        -:  881:
        -:  882:  ///  Returns !(x < y)
        -:  883:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  884:    inline bool
        -:  885:    operator>=(const set<_Key, _Compare, _Alloc>& __x,
        -:  886:	       const set<_Key, _Compare, _Alloc>& __y)
        -:  887:    { return !(__x < __y); }
        -:  888:
        -:  889:  /// See std::set::swap().
        -:  890:  template<typename _Key, typename _Compare, typename _Alloc>
        -:  891:    inline void
        -:  892:    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
        -:  893:    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))
        -:  894:    { __x.swap(__y); }
        -:  895:
        -:  896:_GLIBCXX_END_NAMESPACE_CONTAINER
        -:  897:} //namespace std
        -:  898:#endif /* _STL_SET_H */
