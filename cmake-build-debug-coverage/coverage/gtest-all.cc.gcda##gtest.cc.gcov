        -:    0:Source:C:/Users/valum/Documents/GitHub/TPI-AED1-2C2021/lib/googletest-master/googletest/src/gtest.cc
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Author: wan@google.com (Zhanyong Wan)
        -:   31://
        -:   32:// The Google C++ Testing Framework (Google Test)
        -:   33:
        -:   34:#include "gtest/gtest.h"
        -:   35:#include "gtest/internal/custom/gtest.h"
        -:   36:#include "gtest/gtest-spi.h"
        -:   37:
        -:   38:#include <ctype.h>
        -:   39:#include <math.h>
        -:   40:#include <stdarg.h>
        -:   41:#include <stdio.h>
        -:   42:#include <stdlib.h>
        -:   43:#include <time.h>
        -:   44:#include <wchar.h>
        -:   45:#include <wctype.h>
        -:   46:
        -:   47:#include <algorithm>
        -:   48:#include <iomanip>
        -:   49:#include <limits>
        -:   50:#include <list>
        -:   51:#include <map>
        -:   52:#include <ostream>  // NOLINT
        -:   53:#include <sstream>
        -:   54:#include <vector>
        -:   55:
        -:   56:#if GTEST_OS_LINUX
        -:   57:
        -:   58:// TODO(kenton@google.com): Use autoconf to detect availability of
        -:   59:// gettimeofday().
        -:   60:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:   61:
        -:   62:# include <fcntl.h>  // NOLINT
        -:   63:# include <limits.h>  // NOLINT
        -:   64:# include <sched.h>  // NOLINT
        -:   65:// Declares vsnprintf().  This header is not available on Windows.
        -:   66:# include <strings.h>  // NOLINT
        -:   67:# include <sys/mman.h>  // NOLINT
        -:   68:# include <sys/time.h>  // NOLINT
        -:   69:# include <unistd.h>  // NOLINT
        -:   70:# include <string>
        -:   71:
        -:   72:#elif GTEST_OS_SYMBIAN
        -:   73:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:   74:# include <sys/time.h>  // NOLINT
        -:   75:
        -:   76:#elif GTEST_OS_ZOS
        -:   77:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:   78:# include <sys/time.h>  // NOLINT
        -:   79:
        -:   80:// On z/OS we additionally need strings.h for strcasecmp.
        -:   81:# include <strings.h>  // NOLINT
        -:   82:
        -:   83:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   84:
        -:   85:# include <windows.h>  // NOLINT
        -:   86:# undef min
        -:   87:
        -:   88:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   89:
        -:   90:# include <io.h>  // NOLINT
        -:   91:# include <sys/timeb.h>  // NOLINT
        -:   92:# include <sys/types.h>  // NOLINT
        -:   93:# include <sys/stat.h>  // NOLINT
        -:   94:
        -:   95:# if GTEST_OS_WINDOWS_MINGW
        -:   96:// MinGW has gettimeofday() but not _ftime64().
        -:   97:// TODO(kenton@google.com): Use autoconf to detect availability of
        -:   98://   gettimeofday().
        -:   99:// TODO(kenton@google.com): There are other ways to get the time on
        -:  100://   Windows, like GetTickCount() or GetSystemTimeAsFileTime().  MinGW
        -:  101://   supports these.  consider using them instead.
        -:  102:#  define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  103:#  include <sys/time.h>  // NOLINT
        -:  104:# endif  // GTEST_OS_WINDOWS_MINGW
        -:  105:
        -:  106:// cpplint thinks that the header is already included, so we want to
        -:  107:// silence it.
        -:  108:# include <windows.h>  // NOLINT
        -:  109:# undef min
        -:  110:
        -:  111:#else
        -:  112:
        -:  113:// Assume other platforms have gettimeofday().
        -:  114:// TODO(kenton@google.com): Use autoconf to detect availability of
        -:  115://   gettimeofday().
        -:  116:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  117:
        -:  118:// cpplint thinks that the header is already included, so we want to
        -:  119:// silence it.
        -:  120:# include <sys/time.h>  // NOLINT
        -:  121:# include <unistd.h>  // NOLINT
        -:  122:
        -:  123:#endif  // GTEST_OS_LINUX
        -:  124:
        -:  125:#if GTEST_HAS_EXCEPTIONS
        -:  126:# include <stdexcept>
        -:  127:#endif
        -:  128:
        -:  129:#if GTEST_CAN_STREAM_RESULTS_
        -:  130:# include <arpa/inet.h>  // NOLINT
        -:  131:# include <netdb.h>  // NOLINT
        -:  132:# include <sys/socket.h>  // NOLINT
        -:  133:# include <sys/types.h>  // NOLINT
        -:  134:#endif
        -:  135:
        -:  136:#include "src/gtest-internal-inl.h"
        -:  137:
        -:  138:#if GTEST_OS_WINDOWS
        -:  139:# define vsnprintf _vsnprintf
        -:  140:#endif  // GTEST_OS_WINDOWS
        -:  141:
        -:  142:namespace testing {
        -:  143:
        -:  144:using internal::CountIf;
        -:  145:using internal::ForEach;
        -:  146:using internal::GetElementOr;
        -:  147:using internal::Shuffle;
        -:  148:
        -:  149:// Constants.
        -:  150:
        -:  151:// A test whose test case name or test name matches this filter is
        -:  152:// disabled and not run.
        -:  153:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  154:
        -:  155:// A test case whose name matches this filter is considered a death
        -:  156:// test case and will be run before test cases whose name doesn't
        -:  157:// match this filter.
        -:  158:static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest/*";
        -:  159:
        -:  160:// A test filter that matches everything.
        -:  161:static const char kUniversalFilter[] = "*";
        -:  162:
        -:  163:// The default output format.
        -:  164:static const char kDefaultOutputFormat[] = "xml";
        -:  165:// The default output file.
        -:  166:static const char kDefaultOutputFile[] = "test_detail";
        -:  167:
        -:  168:// The environment variable name for the test shard index.
        -:  169:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  170:// The environment variable name for the total number of test shards.
        -:  171:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  172:// The environment variable name for the test shard status file.
        -:  173:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  174:
        -:  175:namespace internal {
        -:  176:
        -:  177:// The text used in failure messages to indicate the start of the
        -:  178:// stack trace.
        -:  179:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  180:
        -:  181:// g_help_flag is true iff the --help flag or an equivalent form is
        -:  182:// specified on the command line.
        -:  183:bool g_help_flag = false;
        -:  184:
        -:  185:}  // namespace internal
        -:  186:
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 100%
        1:  187:static const char* GetDefaultFilter() {
        1:  187-block  0
        -:  188:#ifdef GTEST_TEST_FILTER_ENV_VAR_
        -:  189:  const char* const testbridge_test_only = getenv(GTEST_TEST_FILTER_ENV_VAR_);
        -:  190:  if (testbridge_test_only != NULL) {
        -:  191:    return testbridge_test_only;
        -:  192:  }
        -:  193:#endif  // GTEST_TEST_FILTER_ENV_VAR_
        1:  194:  return kUniversalFilter;
        1:  194-block  0
        -:  195:}
        -:  196:
        1:  197:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  198:    also_run_disabled_tests,
        -:  199:    internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  200:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  201:
        1:  202:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  203:    break_on_failure,
        -:  204:    internal::BoolFromGTestEnv("break_on_failure", false),
        -:  205:    "True iff a failed assertion should be a debugger break-point.");
        -:  206:
        1:  207:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  208:    catch_exceptions,
        -:  209:    internal::BoolFromGTestEnv("catch_exceptions", true),
        -:  210:    "True iff " GTEST_NAME_
        -:  211:    " should catch exceptions and treat them as test failures.");
        -:  212:
function __tcf_2 called 1 returned 100% blocks executed 100%
        3:  213:GTEST_DEFINE_string_(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  213-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  213-block  1
call    7 returned 1
call    8 returned 1
    %%%%%:  213-block  2
call    9 never executed
call   10 never executed
        1:  213-block  3
        1:  213-block  4
call   11 returned 1
        -:  214:    color,
        -:  215:    internal::StringFromGTestEnv("color", "auto"),
        -:  216:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  217:    "and auto.  'auto' means to use colors if the output is "
        -:  218:    "being sent to a terminal and the TERM environment variable "
        -:  219:    "is set to a terminal type that supports colors.");
        -:  220:
function __tcf_3 called 1 returned 100% blocks executed 100%
        3:  221:GTEST_DEFINE_string_(
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  221-block  0
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  221-block  1
call    8 returned 1
call    9 returned 1
    %%%%%:  221-block  2
call   10 never executed
call   11 never executed
        1:  221-block  3
        1:  221-block  4
call   12 returned 1
        -:  222:    filter,
        -:  223:    internal::StringFromGTestEnv("filter", GetDefaultFilter()),
        -:  224:    "A colon-separated list of glob (not regex) patterns "
        -:  225:    "for filtering the tests to run, optionally followed by a "
        -:  226:    "'-' and a : separated list of negative patterns (tests to "
        -:  227:    "exclude).  A test is run if it matches one of the positive "
        -:  228:    "patterns and does not match any of the negative patterns.");
        -:  229:
        -:  230:GTEST_DEFINE_bool_(list_tests, false,
        -:  231:                   "List all tests without running them.");
        -:  232:
        -:  233:// The net priority order after flag processing is thus:
        -:  234://   --gtest_output command line flag
        -:  235://   GTEST_OUTPUT environment variable
        -:  236://   XML_OUTPUT_FILE environment variable
        -:  237://   ''
function __tcf_4 called 1 returned 100% blocks executed 100%
        3:  238:GTEST_DEFINE_string_(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  238-block  0
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  238-block  1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  238-block  2
call   11 returned 1
call   12 returned 1
call   13 returned 1
    %%%%%:  238-block  3
call   14 never executed
    %%%%%:  238-block  4
call   15 never executed
call   16 never executed
        1:  238-block  5
        1:  238-block  6
call   17 returned 1
        -:  239:    output,
        -:  240:    internal::StringFromGTestEnv("output",
        -:  241:      internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  242:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  243:    "optionally followed by a colon and an output file name or directory. "
        -:  244:    "A directory is indicated by a trailing pathname separator. "
        -:  245:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  246:    "If a directory is specified, output files will be created "
        -:  247:    "within that directory, with file-names based on the test "
        -:  248:    "executable's name and, if necessary, made unique by adding "
        -:  249:    "digits.");
        -:  250:
        1:  251:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  252:    print_time,
        -:  253:    internal::BoolFromGTestEnv("print_time", true),
        -:  254:    "True iff " GTEST_NAME_
        -:  255:    " should display elapsed time in text output.");
        -:  256:
        1:  257:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  258:    print_utf8,
        -:  259:    internal::BoolFromGTestEnv("print_utf8", true),
        -:  260:    "True iff " GTEST_NAME_
        -:  261:    " prints UTF8 characters as text.");
        -:  262:
        1:  263:GTEST_DEFINE_int32_(
call    0 returned 1
        -:  264:    random_seed,
        -:  265:    internal::Int32FromGTestEnv("random_seed", 0),
        -:  266:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  267:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  268:
        1:  269:GTEST_DEFINE_int32_(
call    0 returned 1
        -:  270:    repeat,
        -:  271:    internal::Int32FromGTestEnv("repeat", 1),
        -:  272:    "How many times to repeat each test.  Specify a negative number "
        -:  273:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  274:
        -:  275:GTEST_DEFINE_bool_(
        -:  276:    show_internal_stack_frames, false,
        -:  277:    "True iff " GTEST_NAME_ " should include internal stack frames when "
        -:  278:    "printing test failure stack traces.");
        -:  279:
        1:  280:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  281:    shuffle,
        -:  282:    internal::BoolFromGTestEnv("shuffle", false),
        -:  283:    "True iff " GTEST_NAME_
        -:  284:    " should randomize tests' order on every run.");
        -:  285:
        1:  286:GTEST_DEFINE_int32_(
call    0 returned 1
        -:  287:    stack_trace_depth,
        -:  288:    internal::Int32FromGTestEnv("stack_trace_depth", kMaxStackTraceDepth),
        -:  289:    "The maximum number of stack frames to print when an "
        -:  290:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  291:
function __tcf_5 called 1 returned 100% blocks executed 100%
        3:  292:GTEST_DEFINE_string_(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  292-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  292-block  1
call    7 returned 1
call    8 returned 1
    %%%%%:  292-block  2
call    9 never executed
call   10 never executed
        1:  292-block  3
        1:  292-block  4
call   11 returned 1
        -:  293:    stream_result_to,
        -:  294:    internal::StringFromGTestEnv("stream_result_to", ""),
        -:  295:    "This flag specifies the host name and the port number on which to stream "
        -:  296:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  297:    "Linux.");
        -:  298:
        1:  299:GTEST_DEFINE_bool_(
call    0 returned 1
        -:  300:    throw_on_failure,
        -:  301:    internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  302:    "When this flag is specified, a failed assertion will throw an exception "
        -:  303:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  304:    "otherwise. For use with an external test framework.");
        -:  305:
        -:  306:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function __tcf_6 called 1 returned 100% blocks executed 100%
        3:  307:GTEST_DEFINE_string_(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  307-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  307-block  1
call    7 returned 1
call    8 returned 1
    %%%%%:  307-block  2
call    9 never executed
call   10 never executed
        1:  307-block  3
        1:  307-block  4
call   11 returned 1
        -:  308:    flagfile,
        -:  309:    internal::StringFromGTestEnv("flagfile", ""),
        -:  310:    "This flag specifies the flagfile to read command-line flags from.");
        -:  311:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  312:
        -:  313:namespace internal {
        -:  314:
        -:  315:// Generates a random number from [0, range), using a Linear
        -:  316:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  317:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  318:UInt32 Random::Generate(UInt32 range) {
    $$$$$:  318-block  0
        -:  319:  // These constants are the same as are used in glibc's rand(3).
        -:  320:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  321:  state_ = static_cast<UInt32>(1103515245ULL*state_ + 12345U) % kMaxRange;
        -:  322:
    #####:  323:  GTEST_CHECK_(range > 0)
    $$$$$:  323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  323-block  1
call    3 never executed
call    4 never executed
    $$$$$:  323-block  2
call    5 never executed
    %%%%%:  323-block  3
call    6 never executed
call    7 never executed
    #####:  324:      << "Cannot generate a number in the range [0, 0).";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  324-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  325:  GTEST_CHECK_(range <= kMaxRange)
    $$$$$:  325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  325-block  1
call    3 never executed
call    4 never executed
    $$$$$:  325-block  2
call    5 never executed
    %%%%%:  325-block  3
call    6 never executed
    #####:  326:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  326-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  326-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  327:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    $$$$$:  327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  327-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  327-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  327-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  328:
        -:  329:  // Converting via modulus introduces a bit of downward bias, but
        -:  330:  // it's simple, and a linear congruential generator isn't too good
        -:  331:  // to begin with.
    #####:  332:  return state_ % range;
    $$$$$:  332-block  0
    $$$$$:  332-block  1
        -:  333:}
        -:  334:
        -:  335:// GTestIsInitialized() returns true iff the user has initialized
        -:  336:// Google Test.  Useful for catching the user mistake of not initializing
        -:  337:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        4:  338:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  338-block  0
        2:  338-block  1
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  339:
        -:  340:// Iterates over a vector of TestCases, keeping a running sum of the
        -:  341:// results of calling a given int-returning method on each.
        -:  342:// Returns the sum.
function _ZN7testing8internalL19SumOverTestCaseListERKSt6vectorIPNS_8TestCaseESaIS3_EEMS2_KFivE called 7 returned 100% blocks executed 91%
        7:  343:static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,
        7:  343-block  0
        -:  344:                               int (TestCase::*method)() const) {
        7:  345:  int sum = 0;
       84:  346:  for (size_t i = 0; i < case_list.size(); i++) {
        7:  346-block  0
       84:  346-block  1
call    0 returned 84
branch  1 taken 77 (fallthrough)
branch  2 taken 7
       77:  347:    sum += (case_list[i]->*method)();
       77:  347-block  0
call    0 returned 77
branch  1 taken 0 (fallthrough)
branch  2 taken 77
    $$$$$:  347-block  1
       77:  347-block  2
       77:  347-block  3
call    3 returned 77
        -:  348:  }
        7:  349:  return sum;
        7:  349-block  0
        -:  350:}
        -:  351:
        -:  352:// Returns true iff the test case passed.
function _ZN7testing8internalL14TestCasePassedEPKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####:  353:static bool TestCasePassed(const TestCase* test_case) {
    $$$$$:  353-block  0
    #####:  354:  return test_case->should_run() && test_case->Passed();
    $$$$$:  354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  354-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  354-block  2
    $$$$$:  354-block  3
    $$$$$:  354-block  4
        -:  355:}
        -:  356:
        -:  357:// Returns true iff the test case failed.
function _ZN7testing8internalL14TestCaseFailedEPKNS_8TestCaseE called 22 returned 100% blocks executed 100%
       22:  358:static bool TestCaseFailed(const TestCase* test_case) {
       22:  358-block  0
       22:  359:  return test_case->should_run() && test_case->Failed();
       22:  359-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0
       22:  359-block  1
call    3 returned 22
branch  4 taken 2 (fallthrough)
branch  5 taken 20
        2:  359-block  2
       20:  359-block  3
       22:  359-block  4
        -:  360:}
        -:  361:
        -:  362:// Returns true iff test_case contains at least one test that should
        -:  363:// run.
function _ZN7testing8internalL17ShouldRunTestCaseEPKNS_8TestCaseE called 22 returned 100% blocks executed 100%
       22:  364:static bool ShouldRunTestCase(const TestCase* test_case) {
       22:  364-block  0
       22:  365:  return test_case->should_run();
       22:  365-block  0
call    0 returned 22
        -:  366:}
        -:  367:
        -:  368:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 1 returned 100% blocks executed 80%
        1:  369:AssertHelper::AssertHelper(TestPartResult::Type type,
        1:  369-block  0
        -:  370:                           const char* file,
        -:  371:                           int line,
        1:  372:                           const char* message)
        1:  373:    : data_(new AssertHelperData(type, file, line, message)) {
        1:  373-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    %%%%%:  373-block  1
call    4 never executed
        1:  374:}
        1:  374-block  0
        -:  375:
function _ZN7testing8internal12AssertHelperD2Ev called 1 returned 100% blocks executed 100%
        1:  376:AssertHelper::~AssertHelper() {
        1:  376-block  0
        1:  377:  delete data_;
        1:  377-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  377-block  1
call    2 returned 1
call    3 returned 1
        1:  378:}
        -:  379:
        -:  380:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 1 returned 100% blocks executed 77%
        1:  381:void AssertHelper::operator=(const Message& message) const {
        1:  381-block  0
        -:  382:  UnitTest::GetInstance()->
        1:  383:    AddTestPartResult(data_->type, data_->file, data_->line,
        1:  383-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:  384:                      AppendUserMessage(data_->message, message),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  384-block  0
call    3 returned 1
    %%%%%:  384-block  1
call    4 never executed
        -:  385:                      UnitTest::GetInstance()->impl()
        2:  386:                      ->CurrentOsStackTraceExceptTop(1)
        1:  386-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    %%%%%:  386-block  1
call    4 never executed
        -:  387:                      // Skips the stack frame for this function itself.
        1:  388:                      );  // NOLINT
        1:  388-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  389:}
        -:  390:
        -:  391:// Mutex for linked pointers.
function __tcf_7 called 1 returned 100% blocks executed 100%
        3:  392:GTEST_API_ GTEST_DEFINE_STATIC_MUTEX_(g_linked_ptr_mutex);
call    0 returned 1
call    1 returned 1
        1:  392-block  0
        1:  392-block  1
call    2 returned 1
        -:  393:
        -:  394:// A copy of all command line arguments.  Set by InitGoogleTest().
function __tcf_8 called 1 returned 100% blocks executed 100%
        3:  395:::std::vector<std::string> g_argvs;
call    0 returned 1
call    1 returned 1
        1:  395-block  0
        1:  395-block  1
call    2 returned 1
        -:  396:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  397:::std::vector<std::string> GetArgvs() {
        2:  397-block  0
        -:  398:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  399:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  400:  // ::string. This code converts it to the appropriate type.
        -:  401:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  402:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  403:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  404:  return g_argvs;
        2:  404-block  0
call    0 returned 2
        -:  405:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  406:}
        -:  407:
        -:  408:// Returns the current application's name, removing directory path if that
        -:  409:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  410:FilePath GetCurrentExecutableName() {
    $$$$$:  410-block  0
    #####:  411:  FilePath result;
    $$$$$:  411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  411-block  1
call    3 never executed
    %%%%%:  411-block  2
call    4 never executed
        -:  412:
        -:  413:#if GTEST_OS_WINDOWS
    #####:  414:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    $$$$$:  414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  414-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  414-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  414-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  414-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%:  414-block  5
call   16 never executed
    %%%%%:  414-block  6
call   17 never executed
    %%%%%:  414-block  7
call   18 never executed
        -:  415:#else
        -:  416:  result.Set(FilePath(GetArgvs()[0]));
        -:  417:#endif  // GTEST_OS_WINDOWS
        -:  418:
    #####:  419:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  419-block  0
    $$$$$:  419-block  1
        -:  420:}
        -:  421:
        -:  422:// Functions for processing the gtest_output flag.
        -:  423:
        -:  424:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 43%
        1:  425:std::string UnitTestOptions::GetOutputFormat() {
        1:  425-block  0
        1:  426:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
        1:  426-block  0
call    0 returned 1
        1:  427:  if (gtest_output_flag == NULL) return std::string("");
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  427-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  427-block  1
call    6 never executed
    %%%%%:  427-block  2
call    7 never executed
call    8 never executed
        -:  428:
        1:  429:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  430:  return (colon == NULL) ?
        -:  431:      std::string(gtest_output_flag) :
        1:  432:      std::string(gtest_output_flag, colon - gtest_output_flag);
        1:  432-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  432-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  432-block  2
    $$$$$:  432-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  432-block  4
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    $$$$$:  432-block  5
call   12 never executed
        1:  432-block  6
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  432-block  7
call   15 returned 1
        1:  432-block  8
        1:  432-block  9
    %%%%%:  432-block 10
branch 16 never executed
branch 17 never executed
    %%%%%:  432-block 11
call   18 never executed
    %%%%%:  432-block 12
    %%%%%:  432-block 13
branch 19 never executed
branch 20 never executed
    %%%%%:  432-block 14
call   21 never executed
        -:  433:}
        -:  434:
        -:  435:// Returns the name of the requested output file, or the default if none
        -:  436:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  437:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    $$$$$:  437-block  0
    #####:  438:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
    $$$$$:  438-block  0
call    0 never executed
    #####:  439:  if (gtest_output_flag == NULL)
branch  0 never executed
branch  1 never executed
    #####:  440:    return "";
    $$$$$:  440-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  440-block  1
call    4 never executed
    %%%%%:  440-block  2
call    5 never executed
        -:  441:
    #####:  442:  std::string format = GetOutputFormat();
    $$$$$:  442-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  442-block  1
call    3 never executed
    $$$$$:  442-block  2
    $$$$$:  442-block  3
    %%%%%:  442-block  4
call    4 never executed
    #####:  443:  if (format.empty())
    $$$$$:  443-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  444:    format = std::string(kDefaultOutputFormat);
    $$$$$:  444-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  444-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%:  444-block  2
call    7 never executed
        -:  445:
    #####:  446:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  447:  if (colon == NULL)
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    #####:  448:    return internal::FilePath::MakeFileName(
    $$$$$:  448-block  0
call    0 never executed
    $$$$$:  448-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  448-block  2
call    4 never executed
    %%%%%:  448-block  3
call    5 never executed
    #####:  449:        internal::FilePath(
    $$$$$:  449-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  449-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  449-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    %%%%%:  449-block  3
call   14 never executed
    %%%%%:  449-block  4
call   15 never executed
    %%%%%:  449-block  5
call   16 never executed
        -:  450:            UnitTest::GetInstance()->original_working_dir()),
    #####:  451:        internal::FilePath(kDefaultOutputFile), 0,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  451-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  451-block  1
call   10 never executed
    %%%%%:  451-block  2
call   11 never executed
    %%%%%:  451-block  3
call   12 never executed
    %%%%%:  451-block  4
call   13 never executed
    #####:  452:        format.c_str()).string();
    $$$$$:  452-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  452-block  1
        -:  453:
    #####:  454:  internal::FilePath output_name(colon + 1);
    $$$$$:  454-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  454-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  454-block  2
call    7 never executed
call    8 never executed
    $$$$$:  454-block  3
call    9 never executed
    %%%%%:  454-block  4
call   10 never executed
    %%%%%:  454-block  5
call   11 never executed
    #####:  455:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  456:    // TODO(wan@google.com): on Windows \some\path is not an absolute
        -:  457:    // path (as its meaning depends on the current drive), yet the
        -:  458:    // following logic for turning it into an absolute path is wrong.
        -:  459:    // Fix it.
    #####:  460:    output_name = internal::FilePath::ConcatPaths(
    $$$$$:  460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  460-block  1
call    3 never executed
    %%%%%:  460-block  2
call    4 never executed
    #####:  461:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    $$$$$:  461-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  461-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  461-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    %%%%%:  461-block  3
call   14 never executed
    %%%%%:  461-block  4
call   15 never executed
    %%%%%:  461-block  5
call   16 never executed
    #####:  462:        internal::FilePath(colon + 1));
    $$$$$:  462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  462-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  462-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  462-block  3
call   13 never executed
    %%%%%:  462-block  4
call   14 never executed
    %%%%%:  462-block  5
call   15 never executed
    %%%%%:  462-block  6
call   16 never executed
        -:  463:
    #####:  464:  if (!output_name.IsDirectory())
    $$$$$:  464-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  465:    return output_name.string();
    $$$$$:  465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  465-block  1
        -:  466:
        -:  467:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  468:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  468-block  0
call    3 never executed
    #####:  469:      GetOutputFormat().c_str()));
    $$$$$:  469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  469-block  1
call    3 never executed
    $$$$$:  469-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  469-block  3
call    7 never executed
call    8 never executed
    $$$$$:  469-block  4
call    9 never executed
    %%%%%:  469-block  5
call   10 never executed
    #####:  470:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  470-block  0
        -:  471:}
        -:  472:
        -:  473:// Returns true iff the wildcard pattern matches the string.  The
        -:  474:// first ':' or '\0' character in pattern marks the end of it.
        -:  475://
        -:  476:// This recursive algorithm isn't very efficient, but is clear and
        -:  477:// works well enough for matching test names, which are short.
function _ZN7testing8internal15UnitTestOptions20PatternMatchesStringEPKcS3_ called 6245 returned 100% blocks executed 70%
     6245:  478:bool UnitTestOptions::PatternMatchesString(const char *pattern,
     6245:  478-block  0
        -:  479:                                           const char *str) {
     6245:  480:  switch (*pattern) {
     6245:  480-block  0
branch  0 taken 72
branch  1 taken 0
branch  2 taken 3882
branch  3 taken 2291
        -:  481:    case '\0':
        -:  482:    case ':':  // Either ':' or '\0' marks the end of the pattern.
       72:  483:      return *str == '\0';
       72:  483-block  0
        -:  484:    case '?':  // Matches any single character.
    #####:  485:      return *str != '\0' && PatternMatchesString(pattern + 1, str + 1);
    $$$$$:  485-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  485-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  485-block  2
    $$$$$:  485-block  3
    $$$$$:  485-block  4
        -:  486:    case '*':  // Matches any string (possibly empty) of characters.
     6131:  487:      return (*str != '\0' && PatternMatchesString(pattern, str + 1)) ||
     3882:  487-block  0
branch  0 taken 3752 (fallthrough)
branch  1 taken 130
     3752:  487-block  1
call    2 returned 3752
branch  3 taken 2119 (fallthrough)
branch  4 taken 1633
branch  5 taken 36 (fallthrough)
branch  6 taken 2213
     1669:  487-block  2
     2213:  487-block  3
     6131:  488:          PatternMatchesString(pattern + 1, str);
     2249:  488-block  0
call    0 returned 2249
     3882:  488-block  1
        -:  489:    default:  // Non-special character.  Matches itself.
     2297:  490:      return *pattern == *str &&
     2291:  490-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 2285
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    $$$$$:  490-block  1
     2291:  490-block  2
     2297:  491:          PatternMatchesString(pattern + 1, str + 1);
        6:  491-block  0
call    0 returned 6
     2291:  491-block  1
        -:  492:  }
        -:  493:}
        -:  494:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 155 returned 100% blocks executed 100%
      155:  495:bool UnitTestOptions::MatchesFilter(
      155:  495-block  0
        -:  496:    const std::string& name, const char* filter) {
      155:  497:  const char *cur_pattern = filter;
      155:  497-block  0
        -:  498:  for (;;) {
      238:  499:    if (PatternMatchesString(cur_pattern, name.c_str())) {
      238:  499-block  0
call    0 returned 238
call    1 returned 238
branch  2 taken 36 (fallthrough)
branch  3 taken 202
       83:  499-block  1
       36:  500:      return true;
       36:  500-block  0
        -:  501:    }
        -:  502:
        -:  503:    // Finds the next pattern in the filter.
      202:  504:    cur_pattern = strchr(cur_pattern, ':');
        -:  505:
        -:  506:    // Returns if no more pattern can be found.
      202:  507:    if (cur_pattern == NULL) {
      202:  507-block  0
branch  0 taken 119 (fallthrough)
branch  1 taken 83
      119:  508:      return false;
      119:  508-block  0
        -:  509:    }
        -:  510:
        -:  511:    // Skips the pattern separater (the ':' character).
       83:  512:    cur_pattern++;
        -:  513:  }
        -:  514:}
        -:  515:
        -:  516:// Returns true iff the user-specified filter matches the test case
        -:  517:// name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 36 returned 100% blocks executed 48%
       36:  518:bool UnitTestOptions::FilterMatchesTest(const std::string &test_case_name,
       36:  518-block  0
        -:  519:                                        const std::string &test_name) {
       72:  520:  const std::string& full_name = test_case_name + "." + test_name.c_str();
       36:  520-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36:  520-block  1
call    4 returned 36
branch  5 taken 36 (fallthrough)
branch  6 taken 0 (throw)
       36:  520-block  2
call    7 returned 36
call    8 returned 36
    %%%%%:  520-block  3
call    9 never executed
    %%%%%:  520-block  4
call   10 never executed
        -:  521:
        -:  522:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  523:  // positive filter and negative filter portions
       36:  524:  const char* const p = GTEST_FLAG(filter).c_str();
call    0 returned 36
       36:  525:  const char* const dash = strchr(p, '-');
       72:  526:  std::string positive;
call    0 returned 36
call    1 returned 36
    %%%%%:  526-block  0
call    2 never executed
       72:  527:  std::string negative;
call    0 returned 36
       36:  527-block  0
call    1 returned 36
    %%%%%:  527-block  1
call    2 never executed
       36:  528:  if (dash == NULL) {
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36:  529:    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter
       36:  529-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36:  530:    negative = "";
       36:  530-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  530-block  1
        -:  531:  } else {
    #####:  532:    positive = std::string(p, dash);   // Everything up to the dash
    $$$$$:  532-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  532-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%:  532-block  2
call    7 never executed
    #####:  533:    negative = std::string(dash + 1);  // Everything after the dash
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  533-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    %%%%%:  533-block  1
call    7 never executed
    #####:  534:    if (positive.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  535:      // Treat '-test1' as the same as '*-test1'
    #####:  536:      positive = kUniversalFilter;
    $$$$$:  536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  536-block  1
        -:  537:    }
        -:  538:  }
        -:  539:
        -:  540:  // A filter is a colon-separated list of patterns.  It matches a
        -:  541:  // test if any pattern in it matches the test.
       72:  542:  return (MatchesFilter(full_name, positive.c_str()) &&
       36:  542-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36:  542-block  1
branch  4 taken 36 (fallthrough)
branch  5 taken 0
       36:  542-block  2
branch  6 taken 36 (fallthrough)
branch  7 taken 0
       36:  542-block  3
    $$$$$:  542-block  4
       72:  543:          !MatchesFilter(full_name, negative.c_str()));
       36:  543-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36:  543-block  1
        -:  544:}
        -:  545:
        -:  546:#if GTEST_HAS_SEH
        -:  547:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  548:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  549:// This function is useful as an __except condition.
        -:  550:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  551:  // Google Test should handle a SEH exception if:
        -:  552:  //   1. the user wants it to, AND
        -:  553:  //   2. this is not a breakpoint exception, AND
        -:  554:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  555:  //      apparently).
        -:  556:  //
        -:  557:  // SEH exception code for C++ exceptions.
        -:  558:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  559:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  560:
        -:  561:  bool should_handle = true;
        -:  562:
        -:  563:  if (!GTEST_FLAG(catch_exceptions))
        -:  564:    should_handle = false;
        -:  565:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  566:    should_handle = false;
        -:  567:  else if (exception_code == kCxxExceptionCode)
        -:  568:    should_handle = false;
        -:  569:
        -:  570:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  571:}
        -:  572:#endif  // GTEST_HAS_SEH
        -:  573:
        -:  574:}  // namespace internal
        -:  575:
        -:  576:// The c'tor sets this object as the test part result reporter used by
        -:  577:// Google Test.  The 'result' parameter specifies where to report the
        -:  578:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  579:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    $$$$$:  579-block  0
    #####:  580:    TestPartResultArray* result)
        -:  581:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####:  582:      result_(result) {
    $$$$$:  582-block  0
call    0 never executed
    %%%%%:  582-block  1
call    1 never executed
    #####:  583:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  584:}
    $$$$$:  584-block  0
        -:  585:
        -:  586:// The c'tor sets this object as the test part result reporter used by
        -:  587:// Google Test.  The 'result' parameter specifies where to report the
        -:  588:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  589:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    $$$$$:  589-block  0
    #####:  590:    InterceptMode intercept_mode, TestPartResultArray* result)
        -:  591:    : intercept_mode_(intercept_mode),
    #####:  592:      result_(result) {
    $$$$$:  592-block  0
call    0 never executed
    %%%%%:  592-block  1
call    1 never executed
    #####:  593:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  594:}
    $$$$$:  594-block  0
        -:  595:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  596:void ScopedFakeTestPartResultReporter::Init() {
    $$$$$:  596-block  0
    #####:  597:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    $$$$$:  597-block  0
call    0 never executed
    #####:  598:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  599:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    $$$$$:  599-block  0
call    0 never executed
    #####:  600:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  601:  } else {
    #####:  602:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    $$$$$:  602-block  0
call    0 never executed
    #####:  603:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  604:  }
    #####:  605:}
        -:  606:
        -:  607:// The d'tor restores the test part result reporter used by Google Test
        -:  608:// before.
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  609:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    $$$$$:  609-block  0
    $$$$$:  609-block  1
    $$$$$:  609-block  2
call    0 never executed
    #####:  610:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    $$$$$:  610-block  0
call    0 never executed
    #####:  611:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  612:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    $$$$$:  612-block  0
call    0 never executed
        -:  613:  } else {
    #####:  614:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    $$$$$:  614-block  0
call    0 never executed
        -:  615:  }
    #####:  616:}
    $$$$$:  616-block  0
call    0 never executed
call    1 never executed
        -:  617:
        -:  618:// Increments the test part result count and remembers the result.
        -:  619:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  620:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
    $$$$$:  620-block  0
        -:  621:    const TestPartResult& result) {
    #####:  622:  result_->Append(result);
    $$$$$:  622-block  0
call    0 never executed
    #####:  623:}
        -:  624:
        -:  625:namespace internal {
        -:  626:
        -:  627:// Returns the type ID of ::testing::Test.  We should always call this
        -:  628:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  629:// testing::Test.  This is to work around a suspected linker bug when
        -:  630:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  631:// GetTypeId< ::testing::Test>() to return different values depending
        -:  632:// on whether the call is from the Google Test framework itself or
        -:  633:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  634:// return the same value, as it always calls GetTypeId<>() from the
        -:  635:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 37 returned 100% blocks executed 100%
       37:  636:TypeId GetTestTypeId() {
       37:  636-block  0
       37:  637:  return GetTypeId<Test>();
       37:  637-block  0
call    0 returned 37
        -:  638:}
        -:  639:
        -:  640:// The value of GetTestTypeId() as seen from within the Google Test
        -:  641:// library.  This is solely for testing GetTestTypeId().
        1:  642:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
call    0 returned 1
        -:  643:
        -:  644:// This predicate-formatter checks that 'results' contains a test part
        -:  645:// failure of the given type and that the failure message contains the
        -:  646:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  647:static AssertionResult HasOneFailure(const char* /* results_expr */,
    $$$$$:  647-block  0
        -:  648:                                     const char* /* type_expr */,
        -:  649:                                     const char* /* substr_expr */,
        -:  650:                                     const TestPartResultArray& results,
        -:  651:                                     TestPartResult::Type type,
        -:  652:                                     const std::string& substr) {
        -:  653:  const std::string expected(type == TestPartResult::kFatalFailure ?
        -:  654:                        "1 fatal failure" :
    #####:  655:                        "1 non-fatal failure");
    $$$$$:  655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  655-block  1
    $$$$$:  655-block  2
    $$$$$:  655-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  655-block  4
call    6 never executed
call    7 never executed
    $$$$$:  655-block  5
    %%%%%:  655-block  6
call    8 never executed
    %%%%%:  655-block  7
call    9 never executed
    #####:  656:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  656-block  0
call    3 never executed
    %%%%%:  656-block  1
call    4 never executed
    #####:  657:  if (results.size() != 1) {
    $$$$$:  657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  658:    msg << "Expected: " << expected << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  658-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  658-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  659:        << "  Actual: " << results.size() << " failures";
    $$$$$:  659-block  0
call    0 never executed
    $$$$$:  659-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  659-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  659-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  659-block  4
    #####:  660:    for (int i = 0; i < results.size(); i++) {
    $$$$$:  660-block  0
    $$$$$:  660-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  660-block  2
    #####:  661:      msg << "\n" << results.GetTestPartResult(i);
    $$$$$:  661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  661-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  661-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  662:    }
    #####:  663:    return AssertionFailure() << msg;
    $$$$$:  663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  663-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  663-block  3
    $$$$$:  663-block  4
call    9 never executed
    %%%%%:  663-block  5
call   10 never executed
        -:  664:  }
        -:  665:
    #####:  666:  const TestPartResult& r = results.GetTestPartResult(0);
    $$$$$:  666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  667:  if (r.type() != type) {
    $$$$$:  667-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  668:    return AssertionFailure() << "Expected: " << expected << "\n"
    $$$$$:  668-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  668-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  668-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  668-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  668-block  4
call   12 never executed
    %%%%%:  668-block  5
call   13 never executed
    #####:  669:                              << "  Actual:\n"
    $$$$$:  669-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  670:                              << r;
    $$$$$:  670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  670-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  670-block  2
        -:  671:  }
        -:  672:
    #####:  673:  if (strstr(r.message(), substr.c_str()) == NULL) {
    $$$$$:  673-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  674:    return AssertionFailure() << "Expected: " << expected << " containing \""
    $$$$$:  674-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  674-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  674-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  674-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  674-block  4
call   12 never executed
    %%%%%:  674-block  5
call   13 never executed
    #####:  675:                              << substr << "\"\n"
    $$$$$:  675-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  675-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  676:                              << "  Actual:\n"
    $$$$$:  676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  677:                              << r;
    $$$$$:  677-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  677-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  677-block  2
        -:  678:  }
        -:  679:
    #####:  680:  return AssertionSuccess();
    $$$$$:  680-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  680-block  1
        -:  681:}
        -:  682:
        -:  683:// The constructor of SingleFailureChecker remembers where to look up
        -:  684:// test part results, what type of failure we expect, and what
        -:  685:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  686:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
    $$$$$:  686-block  0
        -:  687:                                           TestPartResult::Type type,
    #####:  688:                                           const std::string& substr)
    #####:  689:    : results_(results), type_(type), substr_(substr) {}
    $$$$$:  689-block  0
call    0 never executed
        -:  690:
        -:  691:// The destructor of SingleFailureChecker verifies that the given
        -:  692:// TestPartResultArray contains exactly one failure that has the given
        -:  693:// type and contains the given substring.  If that's not the case, a
        -:  694:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  695:SingleFailureChecker::~SingleFailureChecker() {
    $$$$$:  695-block  0
call    0 never executed
    #####:  696:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    $$$$$:  696-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  696-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  696-block  2
call   10 never executed
    #####:  697:}
        -:  698:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  699:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  699-block  0
        1:  700:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  700-block  0
call    0 returned 1
        -:  701:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        1:  702:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        1:  702-block  0
        -:  703:    const TestPartResult& result) {
        1:  704:  unit_test_->current_test_result()->AddTestPartResult(result);
        1:  704-block  0
call    0 returned 1
call    1 returned 1
        1:  705:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:  706:}
        -:  707:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  708:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  708-block  0
        1:  709:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  709-block  0
call    0 returned 1
        -:  710:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        1:  711:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        1:  711-block  0
        -:  712:    const TestPartResult& result) {
        1:  713:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
        1:  713-block  0
call    0 returned 1
call    1 returned 1
        1:  714:}
        -:  715:
        -:  716:// Returns the global test part result reporter.
        -:  717:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 1 returned 100% blocks executed 100%
        1:  718:UnitTestImpl::GetGlobalTestPartResultReporter() {
        1:  718-block  0
        1:  719:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
        1:  719-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  719-block  1
call    3 returned 1
        1:  720:  return global_test_part_result_repoter_;
        1:  720-block  0
        -:  721:}
        -:  722:
        -:  723:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  724:void UnitTestImpl::SetGlobalTestPartResultReporter(
    $$$$$:  724-block  0
        -:  725:    TestPartResultReporterInterface* reporter) {
    #####:  726:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    $$$$$:  726-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  726-block  1
call    3 never executed
    #####:  727:  global_test_part_result_repoter_ = reporter;
    #####:  728:}
        -:  729:
        -:  730:// Returns the test part result reporter for the current thread.
        -:  731:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 1 returned 100% blocks executed 100%
        1:  732:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
        1:  732-block  0
        1:  733:  return per_thread_test_part_result_reporter_.get();
        1:  733-block  0
call    0 returned 1
        -:  734:}
        -:  735:
        -:  736:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  737:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
    $$$$$:  737-block  0
        -:  738:    TestPartResultReporterInterface* reporter) {
    #####:  739:  per_thread_test_part_result_reporter_.set(reporter);
    $$$$$:  739-block  0
call    0 never executed
    #####:  740:}
        -:  741:
        -:  742:// Gets the number of successful test cases.
function _ZNK7testing8internal12UnitTestImpl26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####:  743:int UnitTestImpl::successful_test_case_count() const {
    $$$$$:  743-block  0
    #####:  744:  return CountIf(test_cases_, TestCasePassed);
    $$$$$:  744-block  0
call    0 never executed
        -:  745:}
        -:  746:
        -:  747:// Gets the number of failed test cases.
function _ZNK7testing8internal12UnitTestImpl22failed_test_case_countEv called 2 returned 100% blocks executed 100%
        2:  748:int UnitTestImpl::failed_test_case_count() const {
        2:  748-block  0
        2:  749:  return CountIf(test_cases_, TestCaseFailed);
        2:  749-block  0
call    0 returned 2
        -:  750:}
        -:  751:
        -:  752:// Gets the number of all test cases.
function _ZNK7testing8internal12UnitTestImpl21total_test_case_countEv called 24 returned 100% blocks executed 100%
       24:  753:int UnitTestImpl::total_test_case_count() const {
       24:  753-block  0
       24:  754:  return static_cast<int>(test_cases_.size());
       24:  754-block  0
call    0 returned 24
        -:  755:}
        -:  756:
        -:  757:// Gets the number of all test cases that contain at least one test
        -:  758:// that should run.
function _ZNK7testing8internal12UnitTestImpl22test_case_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  759:int UnitTestImpl::test_case_to_run_count() const {
        2:  759-block  0
        2:  760:  return CountIf(test_cases_, ShouldRunTestCase);
        2:  760-block  0
call    0 returned 2
        -:  761:}
        -:  762:
        -:  763:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1:  764:int UnitTestImpl::successful_test_count() const {
        1:  764-block  0
        1:  765:  return SumOverTestCaseList(test_cases_, &TestCase::successful_test_count);
        1:  765-block  0
call    0 returned 1
        -:  766:}
        -:  767:
        -:  768:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 3 returned 100% blocks executed 100%
        3:  769:int UnitTestImpl::failed_test_count() const {
        3:  769-block  0
        3:  770:  return SumOverTestCaseList(test_cases_, &TestCase::failed_test_count);
        3:  770-block  0
call    0 returned 3
        -:  771:}
        -:  772:
        -:  773:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1:  774:int UnitTestImpl::reportable_disabled_test_count() const {
        1:  774-block  0
        1:  775:  return SumOverTestCaseList(test_cases_,
        1:  776:                             &TestCase::reportable_disabled_test_count);
        1:  776-block  0
call    0 returned 1
        -:  777:}
        -:  778:
        -:  779:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####:  780:int UnitTestImpl::disabled_test_count() const {
    $$$$$:  780-block  0
    #####:  781:  return SumOverTestCaseList(test_cases_, &TestCase::disabled_test_count);
    $$$$$:  781-block  0
call    0 never executed
        -:  782:}
        -:  783:
        -:  784:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####:  785:int UnitTestImpl::reportable_test_count() const {
    $$$$$:  785-block  0
    #####:  786:  return SumOverTestCaseList(test_cases_, &TestCase::reportable_test_count);
    $$$$$:  786-block  0
call    0 never executed
        -:  787:}
        -:  788:
        -:  789:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####:  790:int UnitTestImpl::total_test_count() const {
    $$$$$:  790-block  0
    #####:  791:  return SumOverTestCaseList(test_cases_, &TestCase::total_test_count);
    $$$$$:  791-block  0
call    0 never executed
        -:  792:}
        -:  793:
        -:  794:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  795:int UnitTestImpl::test_to_run_count() const {
        2:  795-block  0
        2:  796:  return SumOverTestCaseList(test_cases_, &TestCase::test_to_run_count);
        2:  796-block  0
call    0 returned 2
        -:  797:}
        -:  798:
        -:  799:// Returns the current OS stack trace as an std::string.
        -:  800://
        -:  801:// The maximum number of stack frames to be included is specified by
        -:  802:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -:  803:// specifies the number of top frames to be skipped, which doesn't
        -:  804:// count against the number of frames to be included.
        -:  805://
        -:  806:// For example, if Foo() calls Bar(), which in turn calls
        -:  807:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -:  808:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 1 returned 100% blocks executed 100%
        1:  809:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
        1:  809-block  0
        1:  810:  return os_stack_trace_getter()->CurrentStackTrace(
        1:  810-block  0
call    0 returned 1
        -:  811:      static_cast<int>(GTEST_FLAG(stack_trace_depth)),
        -:  812:      skip_count + 1
        -:  813:      // Skips the user-specified number of frames plus this function
        -:  814:      // itself.
        1:  815:      );  // NOLINT
call    0 returned 1
        -:  816:}
        -:  817:
        -:  818:// Returns the current time in milliseconds.
function _ZN7testing8internal15GetTimeInMillisEv called 97 returned 100% blocks executed 100%
       97:  819:TimeInMillis GetTimeInMillis() {
       97:  819-block  0
        -:  820:#if GTEST_OS_WINDOWS_MOBILE || defined(__BORLANDC__)
        -:  821:  // Difference between 1970-01-01 and 1601-01-01 in milliseconds.
        -:  822:  // http://analogous.blogspot.com/2005/04/epoch.html
        -:  823:  const TimeInMillis kJavaEpochToWinFileTimeDelta =
        -:  824:    static_cast<TimeInMillis>(116444736UL) * 100000UL;
        -:  825:  const DWORD kTenthMicrosInMilliSecond = 10000;
        -:  826:
        -:  827:  SYSTEMTIME now_systime;
        -:  828:  FILETIME now_filetime;
        -:  829:  ULARGE_INTEGER now_int64;
        -:  830:  // TODO(kenton@google.com): Shouldn't this just use
        -:  831:  //   GetSystemTimeAsFileTime()?
        -:  832:  GetSystemTime(&now_systime);
        -:  833:  if (SystemTimeToFileTime(&now_systime, &now_filetime)) {
        -:  834:    now_int64.LowPart = now_filetime.dwLowDateTime;
        -:  835:    now_int64.HighPart = now_filetime.dwHighDateTime;
        -:  836:    now_int64.QuadPart = (now_int64.QuadPart / kTenthMicrosInMilliSecond) -
        -:  837:      kJavaEpochToWinFileTimeDelta;
        -:  838:    return now_int64.QuadPart;
        -:  839:  }
        -:  840:  return 0;
        -:  841:#elif GTEST_OS_WINDOWS && !GTEST_HAS_GETTIMEOFDAY_
        -:  842:  __timeb64 now;
        -:  843:
        -:  844:  // MSVC 8 deprecates _ftime64(), so we want to suppress warning 4996
        -:  845:  // (deprecated function) there.
        -:  846:  // TODO(kenton@google.com): Use GetTickCount()?  Or use
        -:  847:  //   SystemTimeToFileTime()
        -:  848:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)
        -:  849:  _ftime64(&now);
        -:  850:  GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  851:
        -:  852:  return static_cast<TimeInMillis>(now.time) * 1000 + now.millitm;
        -:  853:#elif GTEST_HAS_GETTIMEOFDAY_
        -:  854:  struct timeval now;
       97:  855:  gettimeofday(&now, NULL);
       97:  855-block  0
call    0 returned 97
       97:  856:  return static_cast<TimeInMillis>(now.tv_sec) * 1000 + now.tv_usec / 1000;
        -:  857:#else
        -:  858:# error "Don't know how to get the current time on your system."
        -:  859:#endif
        -:  860:}
        -:  861:
        -:  862:// Utilities
        -:  863:
        -:  864:// class String.
        -:  865:
        -:  866:#if GTEST_OS_WINDOWS_MOBILE
        -:  867:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -:  868:// memory using new. The caller is responsible for deleting the return
        -:  869:// value using delete[]. Returns the wide string, or NULL if the
        -:  870:// input is NULL.
        -:  871:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -:  872:  if (!ansi) return NULL;
        -:  873:  const int length = strlen(ansi);
        -:  874:  const int unicode_length =
        -:  875:      MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -:  876:                          NULL, 0);
        -:  877:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -:  878:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -:  879:                      unicode, unicode_length);
        -:  880:  unicode[unicode_length] = 0;
        -:  881:  return unicode;
        -:  882:}
        -:  883:
        -:  884:// Creates an ANSI string from the given wide string, allocating
        -:  885:// memory using new. The caller is responsible for deleting the return
        -:  886:// value using delete[]. Returns the ANSI string, or NULL if the
        -:  887:// input is NULL.
        -:  888:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -:  889:  if (!utf16_str) return NULL;
        -:  890:  const int ansi_length =
        -:  891:      WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
        -:  892:                          NULL, 0, NULL, NULL);
        -:  893:  char* ansi = new char[ansi_length + 1];
        -:  894:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
        -:  895:                      ansi, ansi_length, NULL, NULL);
        -:  896:  ansi[ansi_length] = 0;
        -:  897:  return ansi;
        -:  898:}
        -:  899:
        -:  900:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  901:
        -:  902:// Compares two C strings.  Returns true iff they have the same content.
        -:  903://
        -:  904:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -:  905:// C string is considered different to any non-NULL C string,
        -:  906:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2:  907:bool String::CStringEquals(const char * lhs, const char * rhs) {
        2:  907-block  0
        2:  908:  if ( lhs == NULL ) return rhs == NULL;
        2:  908-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    $$$$$:  908-block  1
        -:  909:
        2:  910:  if ( rhs == NULL ) return false;
        2:  910-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    $$$$$:  910-block  1
        -:  911:
        2:  912:  return strcmp(lhs, rhs) == 0;
        2:  912-block  0
        -:  913:}
        -:  914:
        -:  915:#if GTEST_HAS_STD_WSTRING || GTEST_HAS_GLOBAL_WSTRING
        -:  916:
        -:  917:// Converts an array of wide chars to a narrow string using the UTF-8
        -:  918:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwjPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  919:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
    $$$$$:  919-block  0
        -:  920:                                     Message* msg) {
    #####:  921:  for (size_t i = 0; i != length; ) {  // NOLINT
    $$$$$:  921-block  0
    $$$$$:  921-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  921-block  2
    #####:  922:    if (wstr[i] != L'\0') {
    $$$$$:  922-block  0
branch  0 never executed
branch  1 never executed
    #####:  923:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    $$$$$:  923-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  923-block  1
call    4 never executed
    %%%%%:  923-block  2
call    5 never executed
call    6 never executed
    #####:  924:      while (i != length && wstr[i] != L'\0')
    $$$$$:  924-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  924-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  924-block  2
    #####:  925:        i++;
        -:  926:    } else {
    #####:  927:      *msg << '\0';
    $$$$$:  927-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:      i++;
    $$$$$:  928-block  0
        -:  929:    }
        -:  930:  }
    #####:  931:}
    $$$$$:  931-block  0
        -:  932:
        -:  933:#endif  // GTEST_HAS_STD_WSTRING || GTEST_HAS_GLOBAL_WSTRING
        -:  934:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 0 returned 0% blocks executed 0%
    #####:  935:void SplitString(const ::std::string& str, char delimiter,
    $$$$$:  935-block  0
        -:  936:                 ::std::vector< ::std::string>* dest) {
    #####:  937:  ::std::vector< ::std::string> parsed;
    $$$$$:  937-block  0
call    0 never executed
call    1 never executed
    %%%%%:  937-block  1
call    2 never executed
    #####:  938:  ::std::string::size_type pos = 0;
    #####:  939:  while (::testing::internal::AlwaysTrue()) {
    $$$$$:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  939-block  1
branch  3 never executed
branch  4 never executed
    #####:  940:    const ::std::string::size_type colon = str.find(delimiter, pos);
    $$$$$:  940-block  0
call    0 never executed
    #####:  941:    if (colon == ::std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  942:      parsed.push_back(str.substr(pos));
    $$$$$:  942-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  942-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  942-block  2
call    6 never executed
    %%%%%:  942-block  3
call    7 never executed
    #####:  943:      break;
        -:  944:    } else {
    #####:  945:      parsed.push_back(str.substr(pos, colon - pos));
    $$$$$:  945-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  945-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  945-block  2
call    6 never executed
    %%%%%:  945-block  3
call    7 never executed
    #####:  946:      pos = colon + 1;
        -:  947:    }
        -:  948:  }
    #####:  949:  dest->swap(parsed);
    $$$$$:  949-block  0
call    0 never executed
    #####:  950:}
        -:  951:
        -:  952:}  // namespace internal
        -:  953:
        -:  954:// Constructs an empty Message.
        -:  955:// We allocate the stringstream separately because otherwise each use of
        -:  956:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -:  957:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -:  958:// the stack space.
function _ZN7testing7MessageC2Ev called 118 returned 100% blocks executed 75%
      236:  959:Message::Message() : ss_(new ::std::stringstream) {
      118:  959-block  0
call    0 returned 118
call    1 returned 118
branch  2 taken 118 (fallthrough)
branch  3 taken 0 (throw)
      118:  959-block  1
call    4 returned 118
    %%%%%:  959-block  2
call    5 never executed
call    6 never executed
    %%%%%:  959-block  3
call    7 never executed
        -:  960:  // By default, we want there to be enough precision when printing
        -:  961:  // a double to a Message.
      118:  962:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 118
call    1 returned 118
call    2 returned 118
branch  3 taken 118 (fallthrough)
branch  4 taken 0 (throw)
      118:  963:}
      118:  963-block  0
        -:  964:
        -:  965:// These two overloads allow streaming a wide C string to a Message
        -:  966:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####:  967:Message& Message::operator <<(const wchar_t* wide_c_str) {
    $$$$$:  967-block  0
    #####:  968:  return *this << internal::String::ShowWideCString(wide_c_str);
    $$$$$:  968-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  968-block  1
call    4 never executed
    $$$$$:  968-block  2
    %%%%%:  968-block  3
call    5 never executed
        -:  969:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####:  970:Message& Message::operator <<(wchar_t* wide_c_str) {
    $$$$$:  970-block  0
    #####:  971:  return *this << internal::String::ShowWideCString(wide_c_str);
    $$$$$:  971-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  971-block  1
call    4 never executed
    $$$$$:  971-block  2
    %%%%%:  971-block  3
call    5 never executed
        -:  972:}
        -:  973:
        -:  974:#if GTEST_HAS_STD_WSTRING
        -:  975:// Converts the given wide string to a narrow string using the UTF-8
        -:  976:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####:  977:Message& Message::operator <<(const ::std::wstring& wstr) {
    $$$$$:  977-block  0
    #####:  978:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    $$$$$:  978-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  979:  return *this;
        -:  980:}
        -:  981:#endif  // GTEST_HAS_STD_WSTRING
        -:  982:
        -:  983:#if GTEST_HAS_GLOBAL_WSTRING
        -:  984:// Converts the given wide string to a narrow string using the UTF-8
        -:  985:// encoding, and streams the result to this Message object.
        -:  986:Message& Message::operator <<(const ::wstring& wstr) {
        -:  987:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
        -:  988:  return *this;
        -:  989:}
        -:  990:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  991:
        -:  992:// Gets the text streamed to this object so far as an std::string.
        -:  993:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 118 returned 100% blocks executed 100%
      118:  994:std::string Message::GetString() const {
      118:  994-block  0
      118:  995:  return internal::StringStreamToString(ss_.get());
      118:  995-block  0
call    0 returned 118
call    1 returned 118
        -:  996:}
        -:  997:
        -:  998:// AssertionResult constructors.
        -:  999:// Used in EXPECT_TRUE/FALSE(assertion_result).
function _ZN7testing15AssertionResultC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 1000:AssertionResult::AssertionResult(const AssertionResult& other)
    $$$$$: 1000-block  0
    #####: 1001:    : success_(other.success_),
    #####: 1002:      message_(other.message_.get() != NULL ?
    $$$$$: 1002-block  0
call    0 never executed
    #####: 1003:               new ::std::string(*other.message_) :
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1003-block  0
call    4 never executed
    #####: 1004:               static_cast< ::std::string*>(NULL)) {
branch  0 never executed
branch  1 never executed
    $$$$$: 1004-block  0
call    2 never executed
    $$$$$: 1004-block  1
    $$$$$: 1004-block  2
    $$$$$: 1004-block  3
call    3 never executed
    #####: 1005:}
        -: 1006:
        -: 1007:// Swaps two AssertionResults.
function _ZN7testing15AssertionResult4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 1008:void AssertionResult::swap(AssertionResult& other) {
    $$$$$: 1008-block  0
        -: 1009:  using std::swap;
    #####: 1010:  swap(success_, other.success_);
    $$$$$: 1010-block  0
call    0 never executed
    #####: 1011:  swap(message_, other.message_);
call    0 never executed
    #####: 1012:}
        -: 1013:
        -: 1014:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
function _ZNK7testing15AssertionResultntEv called 0 returned 0% blocks executed 0%
    #####: 1015:AssertionResult AssertionResult::operator!() const {
    $$$$$: 1015-block  0
    #####: 1016:  AssertionResult negation(!success_);
    $$$$$: 1016-block  0
call    0 never executed
    #####: 1017:  if (message_.get() != NULL)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:    negation << *message_;
    $$$$$: 1018-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1018-block  1
    #####: 1019:  return negation;
    $$$$$: 1019-block  0
    $$$$$: 1019-block  1
    %%%%%: 1019-block  2
call    0 never executed
        -: 1020:}
        -: 1021:
        -: 1022:// Makes a successful assertion result.
function _ZN7testing16AssertionSuccessEv called 28 returned 100% blocks executed 100%
       28: 1023:AssertionResult AssertionSuccess() {
       28: 1023-block  0
       28: 1024:  return AssertionResult(true);
       28: 1024-block  0
call    0 returned 28
        -: 1025:}
        -: 1026:
        -: 1027:// Makes a failed assertion result.
function _ZN7testing16AssertionFailureEv called 0 returned 0% blocks executed 0%
    #####: 1028:AssertionResult AssertionFailure() {
    $$$$$: 1028-block  0
    #####: 1029:  return AssertionResult(false);
    $$$$$: 1029-block  0
call    0 never executed
        -: 1030:}
        -: 1031:
        -: 1032:// Makes a failed assertion result with the given failure message.
        -: 1033:// Deprecated; use AssertionFailure() << message.
function _ZN7testing16AssertionFailureERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1034:AssertionResult AssertionFailure(const Message& message) {
    $$$$$: 1034-block  0
    #####: 1035:  return AssertionFailure() << message;
    $$$$$: 1035-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1035-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1035-block  2
    $$$$$: 1035-block  3
call    7 never executed
    $$$$$: 1035-block  4
    %%%%%: 1035-block  5
call    8 never executed
        -: 1036:}
        -: 1037:
        -: 1038:namespace internal {
        -: 1039:
        -: 1040:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIjSaIjEES6_ called 0 returned 0% blocks executed 0%
    #####: 1041:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
    $$$$$: 1041-block  0
        -: 1042:                                            const std::vector<size_t>& right) {
        -: 1043:  std::vector<std::vector<double> > costs(
    #####: 1044:      left.size() + 1, std::vector<double>(right.size() + 1));
    $$$$$: 1044-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1044-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1044-block  2
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    %%%%%: 1044-block  3
call   14 never executed
    %%%%%: 1044-block  4
call   15 never executed
    %%%%%: 1044-block  5
call   16 never executed
    %%%%%: 1044-block  6
call   17 never executed
        -: 1045:  std::vector<std::vector<EditType> > best_move(
    #####: 1046:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1046-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1046-block  1
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1046-block  2
call   13 never executed
    %%%%%: 1046-block  3
call   14 never executed
    %%%%%: 1046-block  4
call   15 never executed
    %%%%%: 1046-block  5
    %%%%%: 1046-block  6
call   16 never executed
    %%%%%: 1046-block  7
call   17 never executed
        -: 1047:
        -: 1048:  // Populate for empty right.
    #####: 1049:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    $$$$$: 1049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:    costs[l_i][0] = static_cast<double>(l_i);
    $$$$$: 1050-block  0
call    0 never executed
call    1 never executed
    #####: 1051:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1052:  }
        -: 1053:  // Populate for empty left.
    #####: 1054:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    $$$$$: 1054-block  0
    $$$$$: 1054-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1055:    costs[0][r_i] = static_cast<double>(r_i);
    $$$$$: 1055-block  0
call    0 never executed
call    1 never executed
    #####: 1056:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1057:  }
        -: 1058:
    #####: 1059:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    $$$$$: 1059-block  0
    $$$$$: 1059-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1059-block  2
    #####: 1060:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    $$$$$: 1060-block  0
    $$$$$: 1060-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1060-block  2
    #####: 1061:      if (left[l_i] == right[r_i]) {
    $$$$$: 1061-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1062:        // Found a match. Consume it.
    #####: 1063:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    $$$$$: 1063-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1064:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1065:        continue;
        -: 1066:      }
        -: 1067:
    #####: 1068:      const double add = costs[l_i + 1][r_i];
    $$$$$: 1068-block  0
call    0 never executed
call    1 never executed
    #####: 1069:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1070:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1071:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    $$$$$: 1071-block  0
branch  2 never executed
branch  3 never executed
    #####: 1072:        costs[l_i + 1][r_i + 1] = add + 1;
    $$$$$: 1072-block  0
call    0 never executed
call    1 never executed
    #####: 1073:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1074:      } else if (remove < add && remove < replace) {
    $$$$$: 1074-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1074-block  1
branch  2 never executed
branch  3 never executed
    #####: 1075:        costs[l_i + 1][r_i + 1] = remove + 1;
    $$$$$: 1075-block  0
call    0 never executed
call    1 never executed
    #####: 1076:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1077:      } else {
        -: 1078:        // We make replace a little more expensive than add/remove to lower
        -: 1079:        // their priority.
    #####: 1080:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    $$$$$: 1080-block  0
call    0 never executed
call    1 never executed
    #####: 1081:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1082:      }
        -: 1083:    }
        -: 1084:  }
        -: 1085:
        -: 1086:  // Reconstruct the best path. We do it in reverse order.
    #####: 1087:  std::vector<EditType> best_path;
    $$$$$: 1087-block  0
call    0 never executed
    #####: 1088:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    $$$$$: 1088-block  0
branch  2 never executed
branch  3 never executed
    $$$$$: 1088-block  1
branch  4 never executed
branch  5 never executed
    $$$$$: 1088-block  2
    #####: 1089:    EditType move = best_move[l_i][r_i];
    $$$$$: 1089-block  0
call    0 never executed
call    1 never executed
    #####: 1090:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1091:    l_i -= move != kAdd;
    #####: 1092:    r_i -= move != kRemove;
        -: 1093:  }
    #####: 1094:  std::reverse(best_path.begin(), best_path.end());
    $$$$$: 1094-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1095:  return best_path;
    $$$$$: 1095-block  0
    $$$$$: 1095-block  1
    %%%%%: 1095-block  2
call    0 never executed
        -: 1096:}
        -: 1097:
        -: 1098:namespace {
        -: 1099:
        -: 1100:// Helper class to convert string into ids with deduplication.
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStringsD2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStringsC2Ev called 0 returned 0% blocks executed 0%
    #####: 1101:class InternalStrings {
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
call    0 never executed
    $$$$$: 1101-block  2
    $$$$$: 1101-block  3
call    1 never executed
        -: 1102: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1103:  size_t GetId(const std::string& str) {
    $$$$$: 1103-block  0
    #####: 1104:    IdMap::iterator it = ids_.find(str);
    $$$$$: 1104-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1105:    if (it != ids_.end()) return it->second;
    $$$$$: 1105-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1105-block  1
call    4 never executed
    #####: 1106:    size_t id = ids_.size();
    $$$$$: 1106-block  0
call    0 never executed
    #####: 1107:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1107-block  0
    $$$$$: 1107-block  1
    $$$$$: 1107-block  2
        -: 1108:  }
        -: 1109:
        -: 1110: private:
        -: 1111:  typedef std::map<std::string, size_t> IdMap;
        -: 1112:  IdMap ids_;
        -: 1113:};
        -: 1114:
        -: 1115:}  // namespace
        -: 1116:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1117:std::vector<EditType> CalculateOptimalEdits(
    $$$$$: 1117-block  0
        -: 1118:    const std::vector<std::string>& left,
        -: 1119:    const std::vector<std::string>& right) {
    #####: 1120:  std::vector<size_t> left_ids, right_ids;
    $$$$$: 1120-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1120-block  1
call    2 never executed
call    3 never executed
    %%%%%: 1120-block  2
call    4 never executed
    %%%%%: 1120-block  3
call    5 never executed
        -: 1121:  {
    #####: 1122:    InternalStrings intern_table;
call    0 never executed
    $$$$$: 1122-block  0
call    1 never executed
    %%%%%: 1122-block  1
call    2 never executed
    %%%%%: 1122-block  2
    #####: 1123:    for (size_t i = 0; i < left.size(); ++i) {
    $$$$$: 1123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1123-block  1
    #####: 1124:      left_ids.push_back(intern_table.GetId(left[i]));
    $$$$$: 1124-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1124-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1124-block  2
        -: 1125:    }
    #####: 1126:    for (size_t i = 0; i < right.size(); ++i) {
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1126-block  2
    #####: 1127:      right_ids.push_back(intern_table.GetId(right[i]));
    $$$$$: 1127-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1127-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1127-block  2
        -: 1128:    }
        -: 1129:  }
    #####: 1130:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1130-block  0
    $$$$$: 1130-block  1
        -: 1131:}
        -: 1132:
        -: 1133:namespace {
        -: 1134:
        -: 1135:// Helper class that holds the state for one hunk and prints it out to the
        -: 1136:// stream.
        -: 1137:// It reorders adds/removes when possible to group all removes before all
        -: 1138:// adds. It also adds the hunk header before printint into the stream.
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkD2Ev called 0 returned 0% blocks executed 0%
    #####: 1139:class Hunk {
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1140: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Ejj called 0 returned 0% blocks executed 0%
    #####: 1141:  Hunk(size_t left_start, size_t right_start)
    $$$$$: 1141-block  0
    #####: 1142:      : left_start_(left_start),
        -: 1143:        right_start_(right_start),
        -: 1144:        adds_(),
        -: 1145:        removes_(),
    #####: 1146:        common_() {}
    $$$$$: 1146-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1147:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1148:  void PushLine(char edit, const char* line) {
    $$$$$: 1148-block  0
    #####: 1149:    switch (edit) {
    $$$$$: 1149-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1150:      case ' ':
    #####: 1151:        ++common_;
    #####: 1152:        FlushEdits();
    $$$$$: 1152-block  0
call    0 never executed
    #####: 1153:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1153-block  0
    %%%%%: 1153-block  1
call    4 never executed
    #####: 1154:        break;
    $$$$$: 1154-block  0
        -: 1155:      case '-':
    #####: 1156:        ++removes_;
    #####: 1157:        hunk_removes_.push_back(std::make_pair('-', line));
    $$$$$: 1157-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1157-block  1
    %%%%%: 1157-block  2
call    4 never executed
    #####: 1158:        break;
    $$$$$: 1158-block  0
        -: 1159:      case '+':
    #####: 1160:        ++adds_;
    #####: 1161:        hunk_adds_.push_back(std::make_pair('+', line));
    $$$$$: 1161-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1161-block  1
    #####: 1162:        break;
    $$$$$: 1162-block  0
        -: 1163:    }
    #####: 1164:  }
    $$$$$: 1164-block  0
        -: 1165:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1166:  void PrintTo(std::ostream* os) {
    $$$$$: 1166-block  0
    #####: 1167:    PrintHeader(os);
    $$$$$: 1167-block  0
call    0 never executed
    #####: 1168:    FlushEdits();
call    0 never executed
    #####: 1169:    for (std::list<std::pair<char, const char*> >::const_iterator it =
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1169-block  0
call    3 never executed
    #####: 1170:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1171:         it != hunk_.end(); ++it) {
    $$$$$: 1171-block  0
call    0 never executed
call    1 never executed
    #####: 1172:      *os << it->first << it->second << "\n";
    $$$$$: 1172-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1172-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1172-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1173:    }
    #####: 1174:  }
    $$$$$: 1174-block  0
        -: 1175:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1176:  bool has_edits() const { return adds_ || removes_; }
    $$$$$: 1176-block  0
    $$$$$: 1176-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1176-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 1176-block  3
    $$$$$: 1176-block  4
    $$$$$: 1176-block  5
        -: 1177:
        -: 1178: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1179:  void FlushEdits() {
    $$$$$: 1179-block  0
    #####: 1180:    hunk_.splice(hunk_.end(), hunk_removes_);
    $$$$$: 1180-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1181:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1182:  }
        -: 1183:
        -: 1184:  // Print a unified diff header for one hunk.
        -: 1185:  // The format is
        -: 1186:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1187:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1188:  void PrintHeader(std::ostream* ss) const {
    $$$$$: 1188-block  0
    #####: 1189:    *ss << "@@ ";
    $$$$$: 1189-block  0
call    0 never executed
    #####: 1190:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1191:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    $$$$$: 1191-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1192:    }
    #####: 1193:    if (removes_ && adds_) {
    $$$$$: 1193-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1193-block  1
branch  2 never executed
branch  3 never executed
    #####: 1194:      *ss << " ";
    $$$$$: 1194-block  0
call    0 never executed
        -: 1195:    }
    #####: 1196:    if (adds_) {
    $$$$$: 1196-block  0
branch  0 never executed
branch  1 never executed
    #####: 1197:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    $$$$$: 1197-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1198:    }
    #####: 1199:    *ss << " @@\n";
    $$$$$: 1199-block  0
call    0 never executed
    #####: 1200:  }
        -: 1201:
        -: 1202:  size_t left_start_, right_start_;
        -: 1203:  size_t adds_, removes_, common_;
        -: 1204:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1205:};
        -: 1206:
        -: 1207:}  // namespace
        -: 1208:
        -: 1209:// Create a list of diff hunks in Unified diff format.
        -: 1210:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1211:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1212:// addition.
        -: 1213:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1214:// If two hunks are close enough that their contexts overlap, then they are
        -: 1215:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_j called 0 returned 0% blocks executed 0%
    #####: 1216:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
    $$$$$: 1216-block  0
        -: 1217:                              const std::vector<std::string>& right,
        -: 1218:                              size_t context) {
    #####: 1219:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    $$$$$: 1219-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 1219-block  1
call    4 never executed
        -: 1220:
    #####: 1221:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1222:  std::stringstream ss;
    $$$$$: 1222-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1222-block  1
call    4 never executed
    %%%%%: 1222-block  2
call    5 never executed
    #####: 1223:  while (edit_i < edits.size()) {
    $$$$$: 1223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
        -: 1224:    // Find first edit.
    #####: 1225:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    $$$$$: 1225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1225-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1225-block  2
    $$$$$: 1225-block  3
    $$$$$: 1225-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 1225-block  5
    #####: 1226:      ++l_i;
    #####: 1227:      ++r_i;
    #####: 1228:      ++edit_i;
        -: 1229:    }
        -: 1230:
        -: 1231:    // Find the first line to include in the hunk.
    #####: 1232:    const size_t prefix_context = std::min(l_i, context);
    $$$$$: 1232-block  0
call    0 never executed
    #####: 1233:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 1233-block  0
    %%%%%: 1233-block  1
call    1 never executed
    %%%%%: 1233-block  2
    #####: 1234:    for (size_t i = prefix_context; i > 0; --i) {
    $$$$$: 1234-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1234-block  1
    #####: 1235:      hunk.PushLine(' ', left[l_i - i].c_str());
    $$$$$: 1235-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1236:    }
        -: 1237:
        -: 1238:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1239:    // is over.
    #####: 1240:    size_t n_suffix = 0;
    $$$$$: 1240-block  0
    #####: 1241:    for (; edit_i < edits.size(); ++edit_i) {
    $$$$$: 1241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1241-block  1
    #####: 1242:      if (n_suffix >= context) {
    $$$$$: 1242-block  0
branch  0 never executed
branch  1 never executed
        -: 1243:        // Continue only if the next hunk is very close.
    #####: 1244:        std::vector<EditType>::const_iterator it = edits.begin() + edit_i;
    $$$$$: 1244-block  0
call    0 never executed
call    1 never executed
    #####: 1245:        while (it != edits.end() && *it == kMatch) ++it;
    $$$$$: 1245-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1245-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1245-block  2
    $$$$$: 1245-block  3
    $$$$$: 1245-block  4
branch  7 never executed
branch  8 never executed
    $$$$$: 1245-block  5
    $$$$$: 1245-block  6
branch  9 never executed
branch 10 never executed
    $$$$$: 1245-block  7
call   11 never executed
    #####: 1246:        if (it == edits.end() || (it - edits.begin()) - edit_i >= context) {
    $$$$$: 1246-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1246-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1246-block  2
    $$$$$: 1246-block  3
    $$$$$: 1246-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1246-block  5
    $$$$$: 1246-block  6
branch 10 never executed
branch 11 never executed
    $$$$$: 1246-block  7
    $$$$$: 1246-block  8
branch 12 never executed
branch 13 never executed
        -: 1247:          // There is no next edit or it is too far away.
    #####: 1248:          break;
    $$$$$: 1248-block  0
    $$$$$: 1248-block  1
        -: 1249:        }
        -: 1250:      }
        -: 1251:
    #####: 1252:      EditType edit = edits[edit_i];
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:      // Reset count when a non match is found.
    #####: 1254:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    $$$$$: 1254-block  0
    $$$$$: 1254-block  1
        -: 1255:
    #####: 1256:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1256-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1256-block  2
branch  4 never executed
branch  5 never executed
    #####: 1257:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    $$$$$: 1257-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1257-block  1
    $$$$$: 1257-block  2
    $$$$$: 1257-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1258:      }
    #####: 1259:      if (edit == kAdd || edit == kReplace) {
    $$$$$: 1259-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1259-block  1
branch  2 never executed
branch  3 never executed
    #####: 1260:        hunk.PushLine('+', right[r_i].c_str());
    $$$$$: 1260-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1261:      }
        -: 1262:
        -: 1263:      // Advance indices, depending on edit type.
    #####: 1264:      l_i += edit != kAdd;
    #####: 1265:      r_i += edit != kRemove;
        -: 1266:    }
        -: 1267:
    #####: 1268:    if (!hunk.has_edits()) {
    $$$$$: 1268-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1269:      // We are done. We don't want this hunk.
    #####: 1270:      break;
    $$$$$: 1270-block  0
        -: 1271:    }
        -: 1272:
    #####: 1273:    hunk.PrintTo(&ss);
    $$$$$: 1273-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1273-block  1
    $$$$$: 1273-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1274:  }
    #####: 1275:  return ss.str();
    $$$$$: 1275-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1275-block  1
    $$$$$: 1275-block  2
        -: 1276:}
        -: 1277:
        -: 1278:}  // namespace edit_distance
        -: 1279:
        -: 1280:namespace {
        -: 1281:
        -: 1282:// The string representation of the values received in EqFailure() are already
        -: 1283:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1284:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1285:std::vector<std::string> SplitEscapedString(const std::string& str) {
    $$$$$: 1285-block  0
    #####: 1286:  std::vector<std::string> lines;
    $$$$$: 1286-block  0
call    0 never executed
    #####: 1287:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1288:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    $$$$$: 1288-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1288-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1288-block  2
    $$$$$: 1288-block  3
    $$$$$: 1288-block  4
branch  8 never executed
branch  9 never executed
    #####: 1289:    ++start;
    #####: 1290:    --end;
    $$$$$: 1290-block  0
        -: 1291:  }
    #####: 1292:  bool escaped = false;
    #####: 1293:  for (size_t i = start; i + 1 < end; ++i) {
    $$$$$: 1293-block  0
    $$$$$: 1293-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1293-block  2
    #####: 1294:    if (escaped) {
    $$$$$: 1294-block  0
branch  0 never executed
branch  1 never executed
    #####: 1295:      escaped = false;
    #####: 1296:      if (str[i] == 'n') {
    $$$$$: 1296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1297:        lines.push_back(str.substr(start, i - start - 1));
    $$$$$: 1297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1297-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1297-block  2
call    6 never executed
    %%%%%: 1297-block  3
call    7 never executed
    #####: 1298:        start = i + 1;
        -: 1299:      }
        -: 1300:    } else {
    #####: 1301:      escaped = str[i] == '\\';
    $$$$$: 1301-block  0
call    0 never executed
        -: 1302:    }
        -: 1303:  }
    #####: 1304:  lines.push_back(str.substr(start, end - start));
    $$$$$: 1304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1304-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1304-block  2
call    6 never executed
    %%%%%: 1304-block  3
call    7 never executed
    %%%%%: 1304-block  4
call    8 never executed
    #####: 1305:  return lines;
    $$$$$: 1305-block  0
        -: 1306:}
        -: 1307:
        -: 1308:}  // namespace
        -: 1309:
        -: 1310:// Constructs and returns the message for an equality assertion
        -: 1311:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1312://
        -: 1313:// The first four parameters are the expressions used in the assertion
        -: 1314:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1315:// where foo is 5 and bar is 6, we have:
        -: 1316://
        -: 1317://   lhs_expression: "foo"
        -: 1318://   rhs_expression: "bar"
        -: 1319://   lhs_value:      "5"
        -: 1320://   rhs_value:      "6"
        -: 1321://
        -: 1322:// The ignoring_case parameter is true iff the assertion is a
        -: 1323:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1324:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1325:AssertionResult EqFailure(const char* lhs_expression,
    $$$$$: 1325-block  0
        -: 1326:                          const char* rhs_expression,
        -: 1327:                          const std::string& lhs_value,
        -: 1328:                          const std::string& rhs_value,
        -: 1329:                          bool ignoring_case) {
    #####: 1330:  Message msg;
    $$$$$: 1330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 1330-block  1
call    4 never executed
    #####: 1331:  msg << "Expected equality of these values:";
    $$$$$: 1331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1332:  msg << "\n  " << lhs_expression;
    $$$$$: 1332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1332-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1333:  if (lhs_value != lhs_expression) {
    $$$$$: 1333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1333-block  1
branch  3 never executed
branch  4 never executed
    #####: 1334:    msg << "\n    Which is: " << lhs_value;
    $$$$$: 1334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1334-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1334-block  2
        -: 1335:  }
    #####: 1336:  msg << "\n  " << rhs_expression;
    $$$$$: 1336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1336-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1337:  if (rhs_value != rhs_expression) {
    $$$$$: 1337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1337-block  1
branch  3 never executed
branch  4 never executed
    #####: 1338:    msg << "\n    Which is: " << rhs_value;
    $$$$$: 1338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1338-block  2
        -: 1339:  }
        -: 1340:
    #####: 1341:  if (ignoring_case) {
    $$$$$: 1341-block  0
branch  0 never executed
branch  1 never executed
    #####: 1342:    msg << "\nIgnoring case";
    $$$$$: 1342-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1342-block  1
        -: 1343:  }
        -: 1344:
    #####: 1345:  if (!lhs_value.empty() && !rhs_value.empty()) {
    $$$$$: 1345-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1345-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1345-block  2
    $$$$$: 1345-block  3
    $$$$$: 1345-block  4
branch  6 never executed
branch  7 never executed
        -: 1346:    const std::vector<std::string> lhs_lines =
    #####: 1347:        SplitEscapedString(lhs_value);
    $$$$$: 1347-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 1347-block  1
call    4 never executed
    %%%%%: 1347-block  2
        -: 1348:    const std::vector<std::string> rhs_lines =
    #####: 1349:        SplitEscapedString(rhs_value);
    $$$$$: 1349-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1349-block  1
call    3 never executed
    %%%%%: 1349-block  2
call    4 never executed
    #####: 1350:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    $$$$$: 1350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1350-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1350-block  2
    $$$$$: 1350-block  3
    $$$$$: 1350-block  4
branch  6 never executed
branch  7 never executed
    #####: 1351:      msg << "\nWith diff:\n"
    $$$$$: 1351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1352:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    $$$$$: 1352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1352-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1352-block  2
call    6 never executed
    %%%%%: 1352-block  3
call    7 never executed
        -: 1353:    }
        -: 1354:  }
        -: 1355:
    #####: 1356:  return AssertionFailure() << msg;
    $$$$$: 1356-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1356-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1356-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1356-block  3
    $$$$$: 1356-block  4
call    9 never executed
    $$$$$: 1356-block  5
    %%%%%: 1356-block  6
call   10 never executed
        -: 1357:}
        -: 1358:
        -: 1359:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 1 returned 100% blocks executed 71%
        1: 1360:std::string GetBoolAssertionFailureMessage(
        1: 1360-block  0
        -: 1361:    const AssertionResult& assertion_result,
        -: 1362:    const char* expression_text,
        -: 1363:    const char* actual_predicate_value,
        -: 1364:    const char* expected_predicate_value) {
        1: 1365:  const char* actual_message = assertion_result.message();
        1: 1365-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 1366:  Message msg;
        1: 1366-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1366-block  1
call    3 returned 1
    %%%%%: 1366-block  2
call    4 never executed
        1: 1367:  msg << "Value of: " << expression_text
        1: 1367-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1367-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1368:      << "\n  Actual: " << actual_predicate_value;
        1: 1368-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1368-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 1369:  if (actual_message[0] != '\0')
        1: 1369-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1370:    msg << " (" << actual_message << ")";
    $$$$$: 1370-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1370-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1370-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1370-block  3
        1: 1371:  msg << "\nExpected: " << expected_predicate_value;
        1: 1371-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1371-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 1372:  return msg.GetString();
        1: 1372-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1372-block  1
        1: 1372-block  2
        -: 1373:}
        -: 1374:
        -: 1375:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1376:AssertionResult DoubleNearPredFormat(const char* expr1,
    $$$$$: 1376-block  0
        -: 1377:                                     const char* expr2,
        -: 1378:                                     const char* abs_error_expr,
        -: 1379:                                     double val1,
        -: 1380:                                     double val2,
        -: 1381:                                     double abs_error) {
    #####: 1382:  const double diff = fabs(val1 - val2);
    #####: 1383:  if (diff <= abs_error) return AssertionSuccess();
    $$$$$: 1383-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1383-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1383-block  2
        -: 1384:
        -: 1385:  // TODO(wan): do not print the value of an expression if it's
        -: 1386:  // already a literal.
    #####: 1387:  return AssertionFailure()
    $$$$$: 1387-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1387-block  1
call    3 never executed
    $$$$$: 1387-block  2
    $$$$$: 1387-block  3
    %%%%%: 1387-block  4
call    4 never executed
    #####: 1388:      << "The difference between " << expr1 << " and " << expr2
    $$$$$: 1388-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1388-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1388-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1388-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1389:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    $$$$$: 1389-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1389-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1389-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1389-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1389-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1390:      << expr1 << " evaluates to " << val1 << ",\n"
    $$$$$: 1390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1390-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1390-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1390-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1391:      << expr2 << " evaluates to " << val2 << ", and\n"
    $$$$$: 1391-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1391-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1391-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1391-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1392:      << abs_error_expr << " evaluates to " << abs_error << ".";
    $$$$$: 1392-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1392-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1392-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1392-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1392-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1392-block  5
        -: 1393:}
        -: 1394:
        -: 1395:
        -: 1396:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1397:template <typename RawType>
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1398:AssertionResult FloatingPointLE(const char* expr1,
    $$$$$: 1398-block  0
    $$$$$: 1398-block  1
        -: 1399:                                const char* expr2,
        -: 1400:                                RawType val1,
        -: 1401:                                RawType val2) {
        -: 1402:  // Returns success if val1 is less than val2,
    #####: 1403:  if (val1 < val2) {
    $$$$$: 1403-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1403-block  1
branch  2 never executed
branch  3 never executed
    #####: 1404:    return AssertionSuccess();
    $$$$$: 1404-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1404-block  1
    $$$$$: 1404-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1404-block  3
        -: 1405:  }
        -: 1406:
        -: 1407:  // or if val1 is almost equal to val2.
    #####: 1408:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    $$$$$: 1408-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1408-block  1
call    2 never executed
call    3 never executed
    #####: 1409:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1409-block  0
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1409-block  1
branch  8 never executed
branch  9 never executed
    #####: 1410:    return AssertionSuccess();
    $$$$$: 1410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1410-block  1
    $$$$$: 1410-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1410-block  3
        -: 1411:  }
        -: 1412:
        -: 1413:  // Note that the above two checks will both fail if either val1 or
        -: 1414:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1415:  // any predicate involving a NaN must return false.
        -: 1416:
    #####: 1417:  ::std::stringstream val1_ss;
    $$$$$: 1417-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1417-block  1
    $$$$$: 1417-block  2
    %%%%%: 1417-block  3
call    5 never executed
    $$$$$: 1417-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    $$$$$: 1417-block  5
    $$$$$: 1417-block  6
    %%%%%: 1417-block  7
call   11 never executed
    #####: 1418:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    $$$$$: 1418-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1418-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1418-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 1418-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
        -: 1419:          << val1;
        -: 1420:
    #####: 1421:  ::std::stringstream val2_ss;
    $$$$$: 1421-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    %%%%%: 1421-block  1
call    5 never executed
    $$$$$: 1421-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 1421-block  3
call   11 never executed
    #####: 1422:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    $$$$$: 1422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1422-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1422-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 1422-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
        -: 1423:          << val2;
        -: 1424:
        -: 1425:  return AssertionFailure()
    #####: 1426:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    $$$$$: 1426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1426-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1426-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1426-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1426-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1426-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1426-block  6
call   18 never executed
    %%%%%: 1426-block  7
call   19 never executed
    $$$$$: 1426-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    $$$$$: 1426-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    $$$$$: 1426-block 10
call   26 never executed
branch 27 never executed
branch 28 never executed
    $$$$$: 1426-block 11
call   29 never executed
branch 30 never executed
branch 31 never executed
    $$$$$: 1426-block 12
call   32 never executed
branch 33 never executed
branch 34 never executed
    $$$$$: 1426-block 13
call   35 never executed
branch 36 never executed
branch 37 never executed
    $$$$$: 1426-block 14
call   38 never executed
    %%%%%: 1426-block 15
call   39 never executed
    #####: 1427:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    $$$$$: 1427-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1427-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1427-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1427-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    %%%%%: 1427-block  4
call   13 never executed
    $$$$$: 1427-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 1427-block  6
call   17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$: 1427-block  7
call   20 never executed
branch 21 never executed
branch 22 never executed
    $$$$$: 1427-block  8
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    %%%%%: 1427-block  9
call   27 never executed
    #####: 1428:      << StringStreamToString(&val2_ss);
    $$$$$: 1428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1428-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1428-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1428-block  3
call    9 never executed
    %%%%%: 1428-block  4
call   10 never executed
    $$$$$: 1428-block  5
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 1428-block  6
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 1428-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$: 1428-block  8
call   20 never executed
    %%%%%: 1428-block  9
call   21 never executed
        -: 1429:}
        -: 1430:
        -: 1431:}  // namespace internal
        -: 1432:
        -: 1433:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1434:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1435:AssertionResult FloatLE(const char* expr1, const char* expr2,
    $$$$$: 1435-block  0
        -: 1436:                        float val1, float val2) {
    #####: 1437:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    $$$$$: 1437-block  0
call    0 never executed
        -: 1438:}
        -: 1439:
        -: 1440:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1441:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1442:AssertionResult DoubleLE(const char* expr1, const char* expr2,
    $$$$$: 1442-block  0
        -: 1443:                         double val1, double val2) {
    #####: 1444:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    $$$$$: 1444-block  0
call    0 never executed
        -: 1445:}
        -: 1446:
        -: 1447:namespace internal {
        -: 1448:
        -: 1449:// The helper function for {ASSERT|EXPECT}_EQ with int or enum
        -: 1450:// arguments.
function _ZN7testing8internal11CmpHelperEQEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1451:AssertionResult CmpHelperEQ(const char* lhs_expression,
    $$$$$: 1451-block  0
        -: 1452:                            const char* rhs_expression,
        -: 1453:                            BiggestInt lhs,
        -: 1454:                            BiggestInt rhs) {
    #####: 1455:  if (lhs == rhs) {
    $$$$$: 1455-block  0
branch  0 never executed
branch  1 never executed
    #####: 1456:    return AssertionSuccess();
    $$$$$: 1456-block  0
call    0 never executed
        -: 1457:  }
        -: 1458:
        -: 1459:  return EqFailure(lhs_expression,
        -: 1460:                   rhs_expression,
    #####: 1461:                   FormatForComparisonFailureMessage(lhs, rhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1461-block  0
call    3 never executed
    %%%%%: 1461-block  1
call    4 never executed
    #####: 1462:                   FormatForComparisonFailureMessage(rhs, lhs),
    $$$$$: 1462-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1462-block  1
    %%%%%: 1462-block  2
call    2 never executed
    #####: 1463:                   false);
    $$$$$: 1463-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1463-block  1
        -: 1464:}
        -: 1465:
        -: 1466:// A macro for implementing the helper functions needed to implement
        -: 1467:// ASSERT_?? and EXPECT_?? with integer or enum arguments.  It is here
        -: 1468:// just to avoid copy-and-paste of similar code.
        -: 1469:#define GTEST_IMPL_CMP_HELPER_(op_name, op)\
        -: 1470:AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
        -: 1471:                                   BiggestInt val1, BiggestInt val2) {\
        -: 1472:  if (val1 op val2) {\
        -: 1473:    return AssertionSuccess();\
        -: 1474:  } else {\
        -: 1475:    return AssertionFailure() \
        -: 1476:        << "Expected: (" << expr1 << ") " #op " (" << expr2\
        -: 1477:        << "), actual: " << FormatForComparisonFailureMessage(val1, val2)\
        -: 1478:        << " vs " << FormatForComparisonFailureMessage(val2, val1);\
        -: 1479:  }\
        -: 1480:}
        -: 1481:
        -: 1482:// Implements the helper function for {ASSERT|EXPECT}_NE with int or
        -: 1483:// enum arguments.
function _ZN7testing8internal11CmpHelperNEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1484:GTEST_IMPL_CMP_HELPER_(NE, !=)
    $$$$$: 1484-block  0
    $$$$$: 1484-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1484-block  2
call    2 never executed
    $$$$$: 1484-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1484-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1484-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 1484-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 1484-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$: 1484-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$: 1484-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$: 1484-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    $$$$$: 1484-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$: 1484-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$: 1484-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$: 1484-block 14
    $$$$$: 1484-block 15
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1484-block 16
    %%%%%: 1484-block 17
call   40 never executed
    %%%%%: 1484-block 18
call   41 never executed
    %%%%%: 1484-block 19
call   42 never executed
        -: 1485:// Implements the helper function for {ASSERT|EXPECT}_LE with int or
        -: 1486:// enum arguments.
function _ZN7testing8internal11CmpHelperLEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1487:GTEST_IMPL_CMP_HELPER_(LE, <=)
    $$$$$: 1487-block  0
    $$$$$: 1487-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1487-block  2
call    2 never executed
    $$$$$: 1487-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1487-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1487-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 1487-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 1487-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$: 1487-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$: 1487-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$: 1487-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    $$$$$: 1487-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$: 1487-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$: 1487-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$: 1487-block 14
    $$$$$: 1487-block 15
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1487-block 16
    %%%%%: 1487-block 17
call   40 never executed
    %%%%%: 1487-block 18
call   41 never executed
    %%%%%: 1487-block 19
call   42 never executed
        -: 1488:// Implements the helper function for {ASSERT|EXPECT}_LT with int or
        -: 1489:// enum arguments.
function _ZN7testing8internal11CmpHelperLTEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1490:GTEST_IMPL_CMP_HELPER_(LT, < )
    $$$$$: 1490-block  0
    $$$$$: 1490-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1490-block  2
call    2 never executed
    $$$$$: 1490-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1490-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1490-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 1490-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 1490-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$: 1490-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$: 1490-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$: 1490-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    $$$$$: 1490-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$: 1490-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$: 1490-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$: 1490-block 14
    $$$$$: 1490-block 15
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1490-block 16
    %%%%%: 1490-block 17
call   40 never executed
    %%%%%: 1490-block 18
call   41 never executed
    %%%%%: 1490-block 19
call   42 never executed
        -: 1491:// Implements the helper function for {ASSERT|EXPECT}_GE with int or
        -: 1492:// enum arguments.
function _ZN7testing8internal11CmpHelperGEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1493:GTEST_IMPL_CMP_HELPER_(GE, >=)
    $$$$$: 1493-block  0
    $$$$$: 1493-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1493-block  2
call    2 never executed
    $$$$$: 1493-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1493-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1493-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 1493-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 1493-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$: 1493-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$: 1493-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$: 1493-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    $$$$$: 1493-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$: 1493-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$: 1493-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$: 1493-block 14
    $$$$$: 1493-block 15
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1493-block 16
    %%%%%: 1493-block 17
call   40 never executed
    %%%%%: 1493-block 18
call   41 never executed
    %%%%%: 1493-block 19
call   42 never executed
        -: 1494:// Implements the helper function for {ASSERT|EXPECT}_GT with int or
        -: 1495:// enum arguments.
function _ZN7testing8internal11CmpHelperGTEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1496:GTEST_IMPL_CMP_HELPER_(GT, > )
    $$$$$: 1496-block  0
    $$$$$: 1496-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1496-block  2
call    2 never executed
    $$$$$: 1496-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1496-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1496-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 1496-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 1496-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$: 1496-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$: 1496-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$: 1496-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    $$$$$: 1496-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$: 1496-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$: 1496-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$: 1496-block 14
    $$$$$: 1496-block 15
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1496-block 16
    %%%%%: 1496-block 17
call   40 never executed
    %%%%%: 1496-block 18
call   41 never executed
    %%%%%: 1496-block 19
call   42 never executed
        -: 1497:
        -: 1498:#undef GTEST_IMPL_CMP_HELPER_
        -: 1499:
        -: 1500:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1501:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
    $$$$$: 1501-block  0
        -: 1502:                               const char* rhs_expression,
        -: 1503:                               const char* lhs,
        -: 1504:                               const char* rhs) {
    #####: 1505:  if (String::CStringEquals(lhs, rhs)) {
    $$$$$: 1505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1506:    return AssertionSuccess();
    $$$$$: 1506-block  0
call    0 never executed
        -: 1507:  }
        -: 1508:
        -: 1509:  return EqFailure(lhs_expression,
        -: 1510:                   rhs_expression,
    #####: 1511:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1511-block  0
call    3 never executed
    %%%%%: 1511-block  1
call    4 never executed
    #####: 1512:                   PrintToString(rhs),
    $$$$$: 1512-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1512-block  1
    %%%%%: 1512-block  2
call    2 never executed
    #####: 1513:                   false);
    $$$$$: 1513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1513-block  1
        -: 1514:}
        -: 1515:
        -: 1516:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1517:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
    $$$$$: 1517-block  0
        -: 1518:                                   const char* rhs_expression,
        -: 1519:                                   const char* lhs,
        -: 1520:                                   const char* rhs) {
    #####: 1521:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    $$$$$: 1521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1522:    return AssertionSuccess();
    $$$$$: 1522-block  0
call    0 never executed
        -: 1523:  }
        -: 1524:
        -: 1525:  return EqFailure(lhs_expression,
        -: 1526:                   rhs_expression,
    #####: 1527:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1527-block  0
call    3 never executed
    %%%%%: 1527-block  1
call    4 never executed
    #####: 1528:                   PrintToString(rhs),
    $$$$$: 1528-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1528-block  1
    %%%%%: 1528-block  2
call    2 never executed
    #####: 1529:                   true);
    $$$$$: 1529-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1529-block  1
        -: 1530:}
        -: 1531:
        -: 1532:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1533:AssertionResult CmpHelperSTRNE(const char* s1_expression,
    $$$$$: 1533-block  0
        -: 1534:                               const char* s2_expression,
        -: 1535:                               const char* s1,
        -: 1536:                               const char* s2) {
    #####: 1537:  if (!String::CStringEquals(s1, s2)) {
    $$$$$: 1537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1538:    return AssertionSuccess();
    $$$$$: 1538-block  0
call    0 never executed
        -: 1539:  } else {
    #####: 1540:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    $$$$$: 1540-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1540-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1540-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1540-block  3
call   10 never executed
    $$$$$: 1540-block  4
    %%%%%: 1540-block  5
call   11 never executed
    #####: 1541:                              << s2_expression << "), actual: \""
    $$$$$: 1541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1541-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1542:                              << s1 << "\" vs \"" << s2 << "\"";
    $$$$$: 1542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1542-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1542-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1542-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1542-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1542-block  5
        -: 1543:  }
        -: 1544:}
        -: 1545:
        -: 1546:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1547:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
    $$$$$: 1547-block  0
        -: 1548:                                   const char* s2_expression,
        -: 1549:                                   const char* s1,
        -: 1550:                                   const char* s2) {
    #####: 1551:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    $$$$$: 1551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1552:    return AssertionSuccess();
    $$$$$: 1552-block  0
call    0 never executed
        -: 1553:  } else {
    #####: 1554:    return AssertionFailure()
    $$$$$: 1554-block  0
call    0 never executed
    $$$$$: 1554-block  1
call    1 never executed
    $$$$$: 1554-block  2
    %%%%%: 1554-block  3
call    2 never executed
    #####: 1555:        << "Expected: (" << s1_expression << ") != ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1555-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1555-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1556:        << s2_expression << ") (ignoring case), actual: \""
    $$$$$: 1556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1556-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1557:        << s1 << "\" vs \"" << s2 << "\"";
    $$$$$: 1557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1557-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1557-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1557-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1557-block  5
        -: 1558:  }
        -: 1559:}
        -: 1560:
        -: 1561:}  // namespace internal
        -: 1562:
        -: 1563:namespace {
        -: 1564:
        -: 1565:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1566:
        -: 1567:// This group of overloaded functions return true iff needle is a
        -: 1568:// substring of haystack.  NULL is considered a substring of itself
        -: 1569:// only.
        -: 1570:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1571:bool IsSubstringPred(const char* needle, const char* haystack) {
    $$$$$: 1571-block  0
    #####: 1572:  if (needle == NULL || haystack == NULL)
    $$$$$: 1572-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1572-block  1
branch  2 never executed
branch  3 never executed
    #####: 1573:    return needle == haystack;
    $$$$$: 1573-block  0
        -: 1574:
    #####: 1575:  return strstr(haystack, needle) != NULL;
    $$$$$: 1575-block  0
        -: 1576:}
        -: 1577:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1578:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    $$$$$: 1578-block  0
    #####: 1579:  if (needle == NULL || haystack == NULL)
    $$$$$: 1579-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1579-block  1
branch  2 never executed
branch  3 never executed
    #####: 1580:    return needle == haystack;
    $$$$$: 1580-block  0
        -: 1581:
    #####: 1582:  return wcsstr(haystack, needle) != NULL;
    $$$$$: 1582-block  0
call    0 never executed
        -: 1583:}
        -: 1584:
        -: 1585:// StringType here can be either ::std::string or ::std::wstring.
        -: 1586:template <typename StringType>
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1587:bool IsSubstringPred(const StringType& needle,
    $$$$$: 1587-block  0
    $$$$$: 1587-block  1
        -: 1588:                     const StringType& haystack) {
    #####: 1589:  return haystack.find(needle) != StringType::npos;
    $$$$$: 1589-block  0
call    0 never executed
    $$$$$: 1589-block  1
call    1 never executed
        -: 1590:}
        -: 1591:
        -: 1592:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1593:// depending on the value of the expected_to_be_substring parameter.
        -: 1594:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1595:// or ::std::wstring.
        -: 1596:template <typename StringType>
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1597:AssertionResult IsSubstringImpl(
    $$$$$: 1597-block  0
    $$$$$: 1597-block  1
    $$$$$: 1597-block  2
    $$$$$: 1597-block  3
        -: 1598:    bool expected_to_be_substring,
        -: 1599:    const char* needle_expr, const char* haystack_expr,
        -: 1600:    const StringType& needle, const StringType& haystack) {
    #####: 1601:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    $$$$$: 1601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1601-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1601-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1602:    return AssertionSuccess();
    $$$$$: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1602-block  1
    $$$$$: 1602-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1602-block  3
    $$$$$: 1602-block  4
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1602-block  5
    $$$$$: 1602-block  6
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1602-block  7
        -: 1603:
    #####: 1604:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1605:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1606:  return AssertionFailure()
    #####: 1607:      << "Value of: " << needle_expr << "\n"
    $$$$$: 1607-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1607-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1607-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1607-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1607-block  4
call   12 never executed
    %%%%%: 1607-block  5
call   13 never executed
    $$$$$: 1607-block  6
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 1607-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$: 1607-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    $$$$$: 1607-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    $$$$$: 1607-block 10
call   26 never executed
    %%%%%: 1607-block 11
call   27 never executed
    $$$$$: 1607-block 12
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$: 1607-block 13
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$: 1607-block 14
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$: 1607-block 15
call   37 never executed
branch 38 never executed
branch 39 never executed
    $$$$$: 1607-block 16
call   40 never executed
    %%%%%: 1607-block 17
call   41 never executed
    $$$$$: 1607-block 18
call   42 never executed
branch 43 never executed
branch 44 never executed
    $$$$$: 1607-block 19
call   45 never executed
branch 46 never executed
branch 47 never executed
    $$$$$: 1607-block 20
call   48 never executed
branch 49 never executed
branch 50 never executed
    $$$$$: 1607-block 21
call   51 never executed
branch 52 never executed
branch 53 never executed
    $$$$$: 1607-block 22
call   54 never executed
    %%%%%: 1607-block 23
call   55 never executed
    #####: 1608:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    $$$$$: 1608-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1608-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1608-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1608-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1608-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1608-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1608-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 1608-block  7
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 1608-block  8
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$: 1608-block  9
call   27 never executed
branch 28 never executed
branch 29 never executed
    $$$$$: 1608-block 10
call   30 never executed
branch 31 never executed
branch 32 never executed
    $$$$$: 1608-block 11
call   33 never executed
branch 34 never executed
branch 35 never executed
    $$$$$: 1608-block 12
call   36 never executed
branch 37 never executed
branch 38 never executed
    $$$$$: 1608-block 13
call   39 never executed
branch 40 never executed
branch 41 never executed
    $$$$$: 1608-block 14
call   42 never executed
branch 43 never executed
branch 44 never executed
    $$$$$: 1608-block 15
call   45 never executed
branch 46 never executed
branch 47 never executed
    #####: 1609:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    $$$$$: 1609-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1609-block  1
    $$$$$: 1609-block  2
    $$$$$: 1609-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1609-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1609-block  5
    $$$$$: 1609-block  6
    %%%%%: 1609-block  7
    $$$$$: 1609-block  8
branch  8 never executed
branch  9 never executed
    $$$$$: 1609-block  9
    $$$$$: 1609-block 10
    $$$$$: 1609-block 11
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 1609-block 12
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 1609-block 13
    $$$$$: 1609-block 14
    %%%%%: 1609-block 15
    $$$$$: 1609-block 16
branch 16 never executed
branch 17 never executed
    $$$$$: 1609-block 17
    $$$$$: 1609-block 18
    $$$$$: 1609-block 19
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 1609-block 20
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 1609-block 21
    $$$$$: 1609-block 22
    %%%%%: 1609-block 23
    $$$$$: 1609-block 24
branch 24 never executed
branch 25 never executed
    $$$$$: 1609-block 25
    $$$$$: 1609-block 26
    $$$$$: 1609-block 27
call   26 never executed
branch 27 never executed
branch 28 never executed
    $$$$$: 1609-block 28
call   29 never executed
branch 30 never executed
branch 31 never executed
    $$$$$: 1609-block 29
    $$$$$: 1609-block 30
    %%%%%: 1609-block 31
    #####: 1610:      << "a substring of " << haystack_expr << "\n"
    $$$$$: 1610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1610-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1610-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1610-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1610-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1610-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1610-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 1610-block  7
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 1610-block  8
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$: 1610-block  9
call   27 never executed
branch 28 never executed
branch 29 never executed
    $$$$$: 1610-block 10
call   30 never executed
branch 31 never executed
branch 32 never executed
    $$$$$: 1610-block 11
call   33 never executed
branch 34 never executed
branch 35 never executed
    #####: 1611:      << "Which is: " << begin_string_quote << haystack << "\"";
    $$$$$: 1611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1611-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1611-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1611-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1611-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1611-block  5
    $$$$$: 1611-block  6
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1611-block  7
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 1611-block  8
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 1611-block  9
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$: 1611-block 10
call   27 never executed
branch 28 never executed
branch 29 never executed
    $$$$$: 1611-block 11
    $$$$$: 1611-block 12
call   30 never executed
branch 31 never executed
branch 32 never executed
    $$$$$: 1611-block 13
call   33 never executed
branch 34 never executed
branch 35 never executed
    $$$$$: 1611-block 14
call   36 never executed
branch 37 never executed
branch 38 never executed
    $$$$$: 1611-block 15
call   39 never executed
branch 40 never executed
branch 41 never executed
    $$$$$: 1611-block 16
call   42 never executed
branch 43 never executed
branch 44 never executed
    $$$$$: 1611-block 17
    $$$$$: 1611-block 18
call   45 never executed
branch 46 never executed
branch 47 never executed
    $$$$$: 1611-block 19
call   48 never executed
branch 49 never executed
branch 50 never executed
    $$$$$: 1611-block 20
call   51 never executed
branch 52 never executed
branch 53 never executed
    $$$$$: 1611-block 21
call   54 never executed
branch 55 never executed
branch 56 never executed
    $$$$$: 1611-block 22
call   57 never executed
branch 58 never executed
branch 59 never executed
    $$$$$: 1611-block 23
        -: 1612:}
        -: 1613:
        -: 1614:}  // namespace
        -: 1615:
        -: 1616:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1617:// substring of haystack (NULL is considered a substring of itself
        -: 1618:// only), and return an appropriate error message when they fail.
        -: 1619:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1620:AssertionResult IsSubstring(
    $$$$$: 1620-block  0
        -: 1621:    const char* needle_expr, const char* haystack_expr,
        -: 1622:    const char* needle, const char* haystack) {
    #####: 1623:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1623-block  0
call    0 never executed
        -: 1624:}
        -: 1625:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1626:AssertionResult IsSubstring(
    $$$$$: 1626-block  0
        -: 1627:    const char* needle_expr, const char* haystack_expr,
        -: 1628:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1629:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1629-block  0
call    0 never executed
        -: 1630:}
        -: 1631:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1632:AssertionResult IsNotSubstring(
    $$$$$: 1632-block  0
        -: 1633:    const char* needle_expr, const char* haystack_expr,
        -: 1634:    const char* needle, const char* haystack) {
    #####: 1635:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1635-block  0
call    0 never executed
        -: 1636:}
        -: 1637:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1638:AssertionResult IsNotSubstring(
    $$$$$: 1638-block  0
        -: 1639:    const char* needle_expr, const char* haystack_expr,
        -: 1640:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1641:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1641-block  0
call    0 never executed
        -: 1642:}
        -: 1643:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1644:AssertionResult IsSubstring(
    $$$$$: 1644-block  0
        -: 1645:    const char* needle_expr, const char* haystack_expr,
        -: 1646:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1647:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1647-block  0
call    0 never executed
        -: 1648:}
        -: 1649:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1650:AssertionResult IsNotSubstring(
    $$$$$: 1650-block  0
        -: 1651:    const char* needle_expr, const char* haystack_expr,
        -: 1652:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1653:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1653-block  0
call    0 never executed
        -: 1654:}
        -: 1655:
        -: 1656:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1657:AssertionResult IsSubstring(
    $$$$$: 1657-block  0
        -: 1658:    const char* needle_expr, const char* haystack_expr,
        -: 1659:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1660:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1660-block  0
call    0 never executed
        -: 1661:}
        -: 1662:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1663:AssertionResult IsNotSubstring(
    $$$$$: 1663-block  0
        -: 1664:    const char* needle_expr, const char* haystack_expr,
        -: 1665:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1666:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    $$$$$: 1666-block  0
call    0 never executed
        -: 1667:}
        -: 1668:#endif  // GTEST_HAS_STD_WSTRING
        -: 1669:
        -: 1670:namespace internal {
        -: 1671:
        -: 1672:#if GTEST_OS_WINDOWS
        -: 1673:
        -: 1674:namespace {
        -: 1675:
        -: 1676:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1677:AssertionResult HRESULTFailureHelper(const char* expr,
    $$$$$: 1677-block  0
        -: 1678:                                     const char* expected,
        -: 1679:                                     long hr) {  // NOLINT
        -: 1680:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1681:
        -: 1682:  // Windows CE doesn't support FormatMessage.
        -: 1683:  const char error_text[] = "";
        -: 1684:
        -: 1685:# else
        -: 1686:
        -: 1687:  // Looks up the human-readable system message for the HRESULT code
        -: 1688:  // and since we're not passing any params to FormatMessage, we don't
        -: 1689:  // want inserts expanded.
        -: 1690:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
    #####: 1691:                       FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1692:  const DWORD kBufSize = 4096;
        -: 1693:  // Gets the system's human readable message string for this HRESULT.
    #####: 1694:  char error_text[kBufSize] = { '\0' };
    #####: 1695:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1696:                                          0,  // no source, we're asking system
        -: 1697:                                          hr,  // the error
        -: 1698:                                          0,  // no line width restrictions
        -: 1699:                                          error_text,  // output buffer
        -: 1700:                                          kBufSize,  // buf size
    #####: 1701:                                          NULL);  // no arguments for inserts
    $$$$$: 1701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1701-block  1
        -: 1702:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1703:  for (; message_length && IsSpace(error_text[message_length - 1]);
    $$$$$: 1703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1703-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1703-block  2
    $$$$$: 1703-block  3
    $$$$$: 1703-block  4
branch  5 never executed
branch  6 never executed
    $$$$$: 1703-block  5
        -: 1704:          --message_length) {
    #####: 1705:    error_text[message_length - 1] = '\0';
        -: 1706:  }
        -: 1707:
        -: 1708:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1709:
    #####: 1710:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    $$$$$: 1710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1710-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1710-block  2
call    6 never executed
call    7 never executed
    %%%%%: 1710-block  3
call    8 never executed
    #####: 1711:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1711-block  0
call    3 never executed
    %%%%%: 1711-block  1
call    4 never executed
    #####: 1712:      << "Expected: " << expr << " " << expected << ".\n"
    $$$$$: 1712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1712-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1712-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1712-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1712-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1713:      << "  Actual: " << error_hex << " " << error_text << "\n";
    $$$$$: 1713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1713-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1713-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1713-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1713-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 1713-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1713-block  6
    $$$$$: 1713-block  7
    %%%%%: 1713-block  8
call   18 never executed
        -: 1714:}
        -: 1715:
        -: 1716:}  // namespace
        -: 1717:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1718:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    $$$$$: 1718-block  0
    #####: 1719:  if (SUCCEEDED(hr)) {
    $$$$$: 1719-block  0
branch  0 never executed
branch  1 never executed
    #####: 1720:    return AssertionSuccess();
    $$$$$: 1720-block  0
call    0 never executed
        -: 1721:  }
    #####: 1722:  return HRESULTFailureHelper(expr, "succeeds", hr);
    $$$$$: 1722-block  0
call    0 never executed
        -: 1723:}
        -: 1724:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1725:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    $$$$$: 1725-block  0
    #####: 1726:  if (FAILED(hr)) {
    $$$$$: 1726-block  0
branch  0 never executed
branch  1 never executed
    #####: 1727:    return AssertionSuccess();
    $$$$$: 1727-block  0
call    0 never executed
        -: 1728:  }
    #####: 1729:  return HRESULTFailureHelper(expr, "fails", hr);
    $$$$$: 1729-block  0
call    0 never executed
        -: 1730:}
        -: 1731:
        -: 1732:#endif  // GTEST_OS_WINDOWS
        -: 1733:
        -: 1734:// Utility functions for encoding Unicode text (wide strings) in
        -: 1735:// UTF-8.
        -: 1736:
        -: 1737:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1738:// like this:
        -: 1739://
        -: 1740:// Code-point length   Encoding
        -: 1741://   0 -  7 bits       0xxxxxxx
        -: 1742://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1743://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1744://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1745:
        -: 1746:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1747:const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;
        -: 1748:
        -: 1749:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1750:const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;
        -: 1751:
        -: 1752:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1753:const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;
        -: 1754:
        -: 1755:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1756:const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;
        -: 1757:
        -: 1758:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1759:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1760:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1761:inline UInt32 ChopLowBits(UInt32* bits, int n) {
    $$$$$: 1761-block  0
    #####: 1762:  const UInt32 low_bits = *bits & ((static_cast<UInt32>(1) << n) - 1);
    #####: 1763:  *bits >>= n;
    #####: 1764:  return low_bits;
    $$$$$: 1764-block  0
        -: 1765:}
        -: 1766:
        -: 1767:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1768:// code_point parameter is of type UInt32 because wchar_t may not be
        -: 1769:// wide enough to contain a code point.
        -: 1770:// If the code_point is not a valid Unicode code point
        -: 1771:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1772:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1773:std::string CodePointToUtf8(UInt32 code_point) {
    $$$$$: 1773-block  0
    #####: 1774:  if (code_point > kMaxCodePoint4) {
    $$$$$: 1774-block  0
branch  0 never executed
branch  1 never executed
    #####: 1775:    return "(Invalid Unicode 0x" + String::FormatHexInt(code_point) + ")";
    $$$$$: 1775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1775-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1775-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1775-block  3
    $$$$$: 1775-block  4
call    9 never executed
call   10 never executed
    %%%%%: 1775-block  5
call   11 never executed
    %%%%%: 1775-block  6
call   12 never executed
        -: 1776:  }
        -: 1777:
        -: 1778:  char str[5];  // Big enough for the largest valid code point.
    #####: 1779:  if (code_point <= kMaxCodePoint1) {
    $$$$$: 1779-block  0
branch  0 never executed
branch  1 never executed
    #####: 1780:    str[1] = '\0';
    #####: 1781:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    $$$$$: 1781-block  0
    #####: 1782:  } else if (code_point <= kMaxCodePoint2) {
    $$$$$: 1782-block  0
branch  0 never executed
branch  1 never executed
    #####: 1783:    str[2] = '\0';
    #####: 1784:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    $$$$$: 1784-block  0
call    0 never executed
    #####: 1785:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1786:  } else if (code_point <= kMaxCodePoint3) {
    $$$$$: 1786-block  0
branch  0 never executed
branch  1 never executed
    #####: 1787:    str[3] = '\0';
    #####: 1788:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    $$$$$: 1788-block  0
call    0 never executed
    #####: 1789:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1790:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1791:  } else {  // code_point <= kMaxCodePoint4
    #####: 1792:    str[4] = '\0';
    #####: 1793:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    $$$$$: 1793-block  0
call    0 never executed
    #####: 1794:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1795:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1796:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1797:  }
    #####: 1798:  return str;
    $$$$$: 1798-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1798-block  1
call    4 never executed
    $$$$$: 1798-block  2
    $$$$$: 1798-block  3
    %%%%%: 1798-block  4
call    5 never executed
        -: 1799:}
        -: 1800:
        -: 1801:// The following two functions only make sense if the system
        -: 1802:// uses UTF-16 for wide string encoding. All supported systems
        -: 1803:// with 16 bit wchar_t (Windows, Cygwin, Symbian OS) do use UTF-16.
        -: 1804:
        -: 1805:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1806:// and thus should be combined into a single Unicode code point
        -: 1807:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1808:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
    $$$$$: 1808-block  0
        -: 1809:  return sizeof(wchar_t) == 2 &&
    #####: 1810:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    $$$$$: 1810-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1810-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1810-block  2
    $$$$$: 1810-block  3
    $$$$$: 1810-block  4
        -: 1811:}
        -: 1812:
        -: 1813:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1814:inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,
    $$$$$: 1814-block  0
        -: 1815:                                                    wchar_t second) {
    #####: 1816:  const UInt32 mask = (1 << 10) - 1;
        -: 1817:  return (sizeof(wchar_t) == 2) ?
    #####: 1818:      (((first & mask) << 10) | (second & mask)) + 0x10000 :
        -: 1819:      // This function should not be called when the condition is
        -: 1820:      // false, but we provide a sensible default in case it is.
    #####: 1821:      static_cast<UInt32>(first);
    $$$$$: 1821-block  0
        -: 1822:}
        -: 1823:
        -: 1824:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 1825:// The wide string is assumed to have the following encoding:
        -: 1826://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
        -: 1827://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 1828:// Parameter str points to a null-terminated wide string.
        -: 1829:// Parameter num_chars may additionally limit the number
        -: 1830:// of wchar_t characters processed. -1 is used when the entire string
        -: 1831:// should be processed.
        -: 1832:// If the string contains code points that are not valid Unicode code points
        -: 1833:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 1834:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 1835:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 1836:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 1837:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    $$$$$: 1837-block  0
    #####: 1838:  if (num_chars == -1)
    $$$$$: 1838-block  0
branch  0 never executed
branch  1 never executed
    #####: 1839:    num_chars = static_cast<int>(wcslen(str));
    $$$$$: 1839-block  0
call    0 never executed
        -: 1840:
    #####: 1841:  ::std::stringstream stream;
    $$$$$: 1841-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1841-block  1
call    4 never executed
    %%%%%: 1841-block  2
call    5 never executed
    #####: 1842:  for (int i = 0; i < num_chars; ++i) {
    $$$$$: 1842-block  0
    $$$$$: 1842-block  1
branch  0 never executed
branch  1 never executed
        -: 1843:    UInt32 unicode_code_point;
        -: 1844:
    #####: 1845:    if (str[i] == L'\0') {
    $$$$$: 1845-block  0
branch  0 never executed
branch  1 never executed
    #####: 1846:      break;
    $$$$$: 1846-block  0
    #####: 1847:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    $$$$$: 1847-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1847-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1847-block  2
    $$$$$: 1847-block  3
    $$$$$: 1847-block  4
branch  5 never executed
branch  6 never executed
    #####: 1848:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
    #####: 1849:                                                                 str[i + 1]);
    $$$$$: 1849-block  0
call    0 never executed
    #####: 1850:      i++;
        -: 1851:    } else {
    #####: 1852:      unicode_code_point = static_cast<UInt32>(str[i]);
    $$$$$: 1852-block  0
        -: 1853:    }
        -: 1854:
    #####: 1855:    stream << CodePointToUtf8(unicode_code_point);
    $$$$$: 1855-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1855-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1855-block  2
call    6 never executed
    %%%%%: 1855-block  3
call    7 never executed
        -: 1856:  }
    #####: 1857:  return StringStreamToString(&stream);
    $$$$$: 1857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1857-block  1
    $$$$$: 1857-block  2
        -: 1858:}
        -: 1859:
        -: 1860:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 1861:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 1862:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    $$$$$: 1862-block  0
    #####: 1863:  if (wide_c_str == NULL)  return "(null)";
    $$$$$: 1863-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1863-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1863-block  2
call    6 never executed
    %%%%%: 1863-block  3
call    7 never executed
        -: 1864:
    #####: 1865:  return internal::WideStringToUtf8(wide_c_str, -1);
    $$$$$: 1865-block  0
call    0 never executed
    $$$$$: 1865-block  1
        -: 1866:}
        -: 1867:
        -: 1868:// Compares two wide C strings.  Returns true iff they have the same
        -: 1869:// content.
        -: 1870://
        -: 1871:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 1872:// C string is considered different to any non-NULL C string,
        -: 1873:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1874:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    $$$$$: 1874-block  0
    #####: 1875:  if (lhs == NULL) return rhs == NULL;
    $$$$$: 1875-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1875-block  1
        -: 1876:
    #####: 1877:  if (rhs == NULL) return false;
    $$$$$: 1877-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1877-block  1
        -: 1878:
    #####: 1879:  return wcscmp(lhs, rhs) == 0;
    $$$$$: 1879-block  0
call    0 never executed
        -: 1880:}
        -: 1881:
        -: 1882:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 1883:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
    $$$$$: 1883-block  0
        -: 1884:                               const char* rhs_expression,
        -: 1885:                               const wchar_t* lhs,
        -: 1886:                               const wchar_t* rhs) {
    #####: 1887:  if (String::WideCStringEquals(lhs, rhs)) {
    $$$$$: 1887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1888:    return AssertionSuccess();
    $$$$$: 1888-block  0
call    0 never executed
        -: 1889:  }
        -: 1890:
        -: 1891:  return EqFailure(lhs_expression,
        -: 1892:                   rhs_expression,
    #####: 1893:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1893-block  0
call    3 never executed
    %%%%%: 1893-block  1
call    4 never executed
    #####: 1894:                   PrintToString(rhs),
    $$$$$: 1894-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1894-block  1
    %%%%%: 1894-block  2
call    2 never executed
    #####: 1895:                   false);
    $$$$$: 1895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1895-block  1
        -: 1896:}
        -: 1897:
        -: 1898:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 1899:AssertionResult CmpHelperSTRNE(const char* s1_expression,
    $$$$$: 1899-block  0
        -: 1900:                               const char* s2_expression,
        -: 1901:                               const wchar_t* s1,
        -: 1902:                               const wchar_t* s2) {
    #####: 1903:  if (!String::WideCStringEquals(s1, s2)) {
    $$$$$: 1903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1904:    return AssertionSuccess();
    $$$$$: 1904-block  0
call    0 never executed
        -: 1905:  }
        -: 1906:
    #####: 1907:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    $$$$$: 1907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1907-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1907-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 1907-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1907-block  4
call   12 never executed
    %%%%%: 1907-block  5
call   13 never executed
    #####: 1908:                            << s2_expression << "), actual: "
    $$$$$: 1908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1908-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1909:                            << PrintToString(s1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1909-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    %%%%%: 1909-block  1
call    7 never executed
    #####: 1910:                            << " vs " << PrintToString(s2);
    $$$$$: 1910-block  0
call    0 never executed
    $$$$$: 1910-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1910-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1910-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1910-block  4
call   10 never executed
    $$$$$: 1910-block  5
    %%%%%: 1910-block  6
call   11 never executed
        -: 1911:}
        -: 1912:
        -: 1913:// Compares two C strings, ignoring case.  Returns true iff they have
        -: 1914:// the same content.
        -: 1915://
        -: 1916:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 1917:// NULL C string is considered different to any non-NULL C string,
        -: 1918:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 1919:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
        4: 1919-block  0
        4: 1920:  if (lhs == NULL)
        4: 1920-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1921:    return rhs == NULL;
    $$$$$: 1921-block  0
        4: 1922:  if (rhs == NULL)
        4: 1922-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1923:    return false;
    $$$$$: 1923-block  0
        4: 1924:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 1924-block  0
call    0 returned 4
        -: 1925:}
        -: 1926:
        -: 1927:  // Compares two wide C strings, ignoring case.  Returns true iff they
        -: 1928:  // have the same content.
        -: 1929:  //
        -: 1930:  // Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 1931:  // A NULL C string is considered different to any non-NULL wide C string,
        -: 1932:  // including the empty string.
        -: 1933:  // NB: The implementations on different platforms slightly differ.
        -: 1934:  // On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 1935:  // environment variable. On GNU platform this method uses wcscasecmp
        -: 1936:  // which compares according to LC_CTYPE category of the current locale.
        -: 1937:  // On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 1938:  // current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1939:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
    $$$$$: 1939-block  0
        -: 1940:                                              const wchar_t* rhs) {
    #####: 1941:  if (lhs == NULL) return rhs == NULL;
    $$$$$: 1941-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1941-block  1
        -: 1942:
    #####: 1943:  if (rhs == NULL) return false;
    $$$$$: 1943-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1943-block  1
        -: 1944:
        -: 1945:#if GTEST_OS_WINDOWS
    #####: 1946:  return _wcsicmp(lhs, rhs) == 0;
    $$$$$: 1946-block  0
call    0 never executed
        -: 1947:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
        -: 1948:  return wcscasecmp(lhs, rhs) == 0;
        -: 1949:#else
        -: 1950:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 1951:  // Other unknown OSes may not define it either.
        -: 1952:  wint_t left, right;
        -: 1953:  do {
        -: 1954:    left = towlower(*lhs++);
        -: 1955:    right = towlower(*rhs++);
        -: 1956:  } while (left && left == right);
        -: 1957:  return left == right;
        -: 1958:#endif  // OS selector
        -: 1959:}
        -: 1960:
        -: 1961:// Returns true iff str ends with the given suffix, ignoring case.
        -: 1962:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1963:bool String::EndsWithCaseInsensitive(
    $$$$$: 1963-block  0
        -: 1964:    const std::string& str, const std::string& suffix) {
    #####: 1965:  const size_t str_len = str.length();
    $$$$$: 1965-block  0
call    0 never executed
    #####: 1966:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 1967:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1967-block  0
    $$$$$: 1967-block  1
    #####: 1968:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    $$$$$: 1968-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1969:                                      suffix.c_str());
    $$$$$: 1969-block  0
        -: 1970:}
        -: 1971:
        -: 1972:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1973:std::string String::FormatIntWidth2(int value) {
    $$$$$: 1973-block  0
    #####: 1974:  std::stringstream ss;
    $$$$$: 1974-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1974-block  1
call    4 never executed
    %%%%%: 1974-block  2
call    5 never executed
    #####: 1975:  ss << std::setfill('0') << std::setw(2) << value;
    $$$$$: 1975-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1975-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1975-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1976:  return ss.str();
    $$$$$: 1976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1976-block  1
    $$$$$: 1976-block  2
        -: 1977:}
        -: 1978:
        -: 1979:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1980:std::string String::FormatHexInt(int value) {
    $$$$$: 1980-block  0
    #####: 1981:  std::stringstream ss;
    $$$$$: 1981-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1981-block  1
call    4 never executed
    %%%%%: 1981-block  2
call    5 never executed
    #####: 1982:  ss << std::hex << std::uppercase << value;
    $$$$$: 1982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1982-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1982-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1983:  return ss.str();
    $$$$$: 1983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1983-block  1
    $$$$$: 1983-block  2
        -: 1984:}
        -: 1985:
        -: 1986:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 1987:std::string String::FormatByte(unsigned char value) {
    $$$$$: 1987-block  0
    #####: 1988:  std::stringstream ss;
    $$$$$: 1988-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1988-block  1
call    4 never executed
    %%%%%: 1988-block  2
call    5 never executed
    #####: 1989:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    $$$$$: 1989-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1989-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 1989-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 1989-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1990:     << static_cast<unsigned int>(value);
    $$$$$: 1990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1991:  return ss.str();
    $$$$$: 1991-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1991-block  1
    $$$$$: 1991-block  2
        -: 1992:}
        -: 1993:
        -: 1994:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 1995:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 118 returned 100% blocks executed 74%
      118: 1996:std::string StringStreamToString(::std::stringstream* ss) {
      118: 1996-block  0
      236: 1997:  const ::std::string& str = ss->str();
      118: 1997-block  0
call    0 returned 118
      118: 1997-block  1
call    1 returned 118
    %%%%%: 1997-block  2
call    2 never executed
      118: 1998:  const char* const start = str.c_str();
call    0 returned 118
      118: 1999:  const char* const end = start + str.length();
call    0 returned 118
        -: 2000:
      118: 2001:  std::string result;
call    0 returned 118
      118: 2002:  result.reserve(2 * (end - start));
call    0 returned 118
branch  1 taken 118 (fallthrough)
branch  2 taken 0 (throw)
     1221: 2003:  for (const char* ch = start; ch != end; ++ch) {
      118: 2003-block  0
     1221: 2003-block  1
branch  0 taken 1103 (fallthrough)
branch  1 taken 118
     1103: 2003-block  2
     1103: 2004:    if (*ch == '\0') {
     1103: 2004-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1103
    #####: 2005:      result += "\\0";  // Replaces NUL with "\\0";
    $$$$$: 2005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2005-block  1
        -: 2006:    } else {
     1103: 2007:      result += *ch;
     1103: 2007-block  0
call    0 returned 1103
branch  1 taken 1103 (fallthrough)
branch  2 taken 0 (throw)
        -: 2008:    }
        -: 2009:  }
        -: 2010:
      236: 2011:  return result;
      118: 2011-block  0
    %%%%%: 2011-block  1
call    0 never executed
        -: 2012:}
        -: 2013:
        -: 2014:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 1 returned 100% blocks executed 50%
        1: 2015:std::string AppendUserMessage(const std::string& gtest_msg,
        1: 2015-block  0
        -: 2016:                              const Message& user_msg) {
        -: 2017:  // Appends the user message if it's non-empty.
        2: 2018:  const std::string user_msg_string = user_msg.GetString();
        1: 2018-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2018-block  1
call    3 returned 1
        1: 2018-block  2
    %%%%%: 2018-block  3
call    4 never executed
        1: 2019:  if (user_msg_string.empty()) {
        1: 2019-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 2020:    return gtest_msg;
        1: 2020-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2020-block  1
        -: 2021:  }
        -: 2022:
    #####: 2023:  return gtest_msg + "\n" + user_msg_string;
    $$$$$: 2023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2023-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2023-block  2
    $$$$$: 2023-block  3
call    6 never executed
    %%%%%: 2023-block  4
call    7 never executed
        -: 2024:}
        -: 2025:
        -: 2026:}  // namespace internal
        -: 2027:
        -: 2028:// class TestResult
        -: 2029:
        -: 2030:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 48 returned 100% blocks executed 100%
       48: 2031:TestResult::TestResult()
       48: 2031-block  0
        -: 2032:    : death_test_count_(0),
       48: 2033:      elapsed_time_(0) {
       48: 2033-block  0
call    0 returned 48
call    1 returned 48
call    2 returned 48
       48: 2034:}
        -: 2035:
        -: 2036:// D'tor.
function _ZN7testing10TestResultD2Ev called 48 returned 100% blocks executed 100%
       96: 2037:TestResult::~TestResult() {
       48: 2037-block  0
       48: 2037-block  1
call    0 returned 48
call    1 returned 48
call    2 returned 48
       48: 2038:}
        -: 2039:
        -: 2040:// Returns the i-th test part result among all the results. i can
        -: 2041:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2042:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 10 returned 100% blocks executed 80%
       10: 2043:const TestPartResult& TestResult::GetTestPartResult(int i) const {
       10: 2043-block  0
       10: 2044:  if (i < 0 || i >= total_part_count())
       10: 2044-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 2044-block  1
call    2 returned 10
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    $$$$$: 2044-block  2
       10: 2044-block  3
       10: 2044-block  4
branch  5 taken 0 (fallthrough)
branch  6 taken 10
    #####: 2045:    internal::posix::Abort();
    $$$$$: 2045-block  0
call    0 never executed
       10: 2046:  return test_part_results_.at(i);
       10: 2046-block  0
call    0 returned 10
        -: 2047:}
        -: 2048:
        -: 2049:// Returns the i-th test property. i can range from 0 to
        -: 2050:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2051:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2052:const TestProperty& TestResult::GetTestProperty(int i) const {
    $$$$$: 2052-block  0
    #####: 2053:  if (i < 0 || i >= test_property_count())
    $$$$$: 2053-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2053-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2053-block  2
    $$$$$: 2053-block  3
    $$$$$: 2053-block  4
branch  5 never executed
branch  6 never executed
    #####: 2054:    internal::posix::Abort();
    $$$$$: 2054-block  0
call    0 never executed
    #####: 2055:  return test_properties_.at(i);
    $$$$$: 2055-block  0
call    0 never executed
        -: 2056:}
        -: 2057:
        -: 2058:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2059:void TestResult::ClearTestPartResults() {
    $$$$$: 2059-block  0
    #####: 2060:  test_part_results_.clear();
    $$$$$: 2060-block  0
call    0 never executed
    #####: 2061:}
        -: 2062:
        -: 2063:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        1: 2064:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
        1: 2064-block  0
        1: 2065:  test_part_results_.push_back(test_part_result);
        1: 2065-block  0
call    0 returned 1
        1: 2066:}
        -: 2067:
        -: 2068:// Adds a test property to the list. If a property with the same key as the
        -: 2069:// supplied property is already represented, the value of this test_property
        -: 2070:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2071:void TestResult::RecordProperty(const std::string& xml_element,
    $$$$$: 2071-block  0
        -: 2072:                                const TestProperty& test_property) {
    #####: 2073:  if (!ValidateTestProperty(xml_element, test_property)) {
    $$$$$: 2073-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2073-block  1
branch  3 never executed
branch  4 never executed
    #####: 2074:    return;
    $$$$$: 2074-block  0
    $$$$$: 2074-block  1
    $$$$$: 2074-block  2
        -: 2075:  }
    #####: 2076:  internal::MutexLock lock(&test_properites_mutex_);
    $$$$$: 2076-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2076-block  1
    $$$$$: 2076-block  2
    %%%%%: 2076-block  3
call    3 never executed
        -: 2077:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2078:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2079:                   internal::TestPropertyKeyIs(test_property.key()));
    $$$$$: 2079-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2079-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2079-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 2079-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%: 2079-block  4
call   16 never executed
    %%%%%: 2079-block  5
call   17 never executed
    %%%%%: 2079-block  6
call   18 never executed
    #####: 2080:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2081:    test_properties_.push_back(test_property);
    $$$$$: 2081-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2082:    return;
    $$$$$: 2082-block  0
        -: 2083:  }
    #####: 2084:  property_with_matching_key->SetValue(test_property.value());
    $$$$$: 2084-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2084-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 2084-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2084-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2084-block  4
call   14 never executed
    %%%%%: 2084-block  5
call   15 never executed
        -: 2085:}
        -: 2086:
        -: 2087:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2088:// output.
        -: 2089:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2090:  "disabled",
        -: 2091:  "errors",
        -: 2092:  "failures",
        -: 2093:  "name",
        -: 2094:  "random_seed",
        -: 2095:  "tests",
        -: 2096:  "time",
        -: 2097:  "timestamp"
        -: 2098:};
        -: 2099:
        -: 2100:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2101:// output.
        -: 2102:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2103:  "disabled",
        -: 2104:  "errors",
        -: 2105:  "failures",
        -: 2106:  "name",
        -: 2107:  "tests",
        -: 2108:  "time"
        -: 2109:};
        -: 2110:
        -: 2111:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2112:static const char* const kReservedTestCaseAttributes[] = {
        -: 2113:  "classname",
        -: 2114:  "name",
        -: 2115:  "status",
        -: 2116:  "time",
        -: 2117:  "type_param",
        -: 2118:  "value_param"
        -: 2119:};
        -: 2120:
        -: 2121:template <int kSize>
function _ZN7testing13ArrayAsVectorILi6EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
function _ZN7testing13ArrayAsVectorILi8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2122:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    $$$$$: 2122-block  0
    $$$$$: 2122-block  1
    #####: 2123:  return std::vector<std::string>(array, array + kSize);
    $$$$$: 2123-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2123-block  1
call    4 never executed
    $$$$$: 2123-block  2
    %%%%%: 2123-block  3
call    5 never executed
    $$$$$: 2123-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 2123-block  5
call   10 never executed
    $$$$$: 2123-block  6
    %%%%%: 2123-block  7
call   11 never executed
        -: 2124:}
        -: 2125:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2126:static std::vector<std::string> GetReservedAttributesForElement(
    $$$$$: 2126-block  0
        -: 2127:    const std::string& xml_element) {
    #####: 2128:  if (xml_element == "testsuites") {
    $$$$$: 2128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2129:    return ArrayAsVector(kReservedTestSuitesAttributes);
    $$$$$: 2129-block  0
call    0 never executed
    #####: 2130:  } else if (xml_element == "testsuite") {
    $$$$$: 2130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2131:    return ArrayAsVector(kReservedTestSuiteAttributes);
    $$$$$: 2131-block  0
call    0 never executed
    #####: 2132:  } else if (xml_element == "testcase") {
    $$$$$: 2132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2133:    return ArrayAsVector(kReservedTestCaseAttributes);
    $$$$$: 2133-block  0
call    0 never executed
        -: 2134:  } else {
    #####: 2135:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    $$$$$: 2135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2135-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2135-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 2135-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 2135-block  4
call   14 never executed
    %%%%%: 2135-block  5
call   15 never executed
        -: 2136:  }
        -: 2137:  // This code is unreachable but some compilers may not realizes that.
    #####: 2138:  return std::vector<std::string>();
    $$$$$: 2138-block  0
call    0 never executed
    $$$$$: 2138-block  1
        -: 2139:}
        -: 2140:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2141:static std::string FormatWordList(const std::vector<std::string>& words) {
    $$$$$: 2141-block  0
    #####: 2142:  Message word_list;
    $$$$$: 2142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2142-block  1
call    3 never executed
    %%%%%: 2142-block  2
call    4 never executed
    #####: 2143:  for (size_t i = 0; i < words.size(); ++i) {
    $$$$$: 2143-block  0
    $$$$$: 2143-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2143-block  2
    #####: 2144:    if (i > 0 && words.size() > 2) {
    $$$$$: 2144-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2144-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2144-block  2
    $$$$$: 2144-block  3
    $$$$$: 2144-block  4
branch  5 never executed
branch  6 never executed
    #####: 2145:      word_list << ", ";
    $$$$$: 2145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2145-block  1
        -: 2146:    }
    #####: 2147:    if (i == words.size() - 1) {
    $$$$$: 2147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2148:      word_list << "and ";
    $$$$$: 2148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2148-block  1
        -: 2149:    }
    #####: 2150:    word_list << "'" << words[i] << "'";
    $$$$$: 2150-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2150-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 2150-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2151:  }
    #####: 2152:  return word_list.GetString();
    $$$$$: 2152-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2152-block  1
    $$$$$: 2152-block  2
        -: 2153:}
        -: 2154:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2155:static bool ValidateTestPropertyName(
    $$$$$: 2155-block  0
        -: 2156:    const std::string& property_name,
        -: 2157:    const std::vector<std::string>& reserved_names) {
    #####: 2158:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2158-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2159:          reserved_names.end()) {
    $$$$$: 2159-block  0
call    0 never executed
    %%%%%: 2159-block  1
call    1 never executed
    #####: 2160:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2160-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2160-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 2160-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 2160-block  3
call   12 never executed
call   13 never executed
    %%%%%: 2160-block  4
call   14 never executed
    %%%%%: 2160-block  5
call   15 never executed
    #####: 2161:                  << " (" << FormatWordList(reserved_names)
    $$$$$: 2161-block  0
call    0 never executed
    $$$$$: 2161-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2161-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 2161-block  3
call    8 never executed
    #####: 2162:                  << " are reserved by " << GTEST_NAME_ << ")";
    $$$$$: 2162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2162-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2162-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 2162-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2163:    return false;
        -: 2164:  }
    #####: 2165:  return true;
    $$$$$: 2165-block  0
    $$$$$: 2165-block  1
        -: 2166:}
        -: 2167:
        -: 2168:// Adds a failure if the key is a reserved attribute of the element named
        -: 2169:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2170:bool TestResult::ValidateTestProperty(const std::string& xml_element,
    $$$$$: 2170-block  0
        -: 2171:                                      const TestProperty& test_property) {
    #####: 2172:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2172-block  0
call    5 never executed
call    6 never executed
    %%%%%: 2172-block  1
call    7 never executed
    %%%%%: 2172-block  2
call    8 never executed
    #####: 2173:                                  GetReservedAttributesForElement(xml_element));
    $$$$$: 2173-block  0
call    0 never executed
    $$$$$: 2173-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2173-block  2
    %%%%%: 2173-block  3
call    5 never executed
        -: 2174:}
        -: 2175:
        -: 2176:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 47 returned 100% blocks executed 100%
       47: 2177:void TestResult::Clear() {
       47: 2177-block  0
       47: 2178:  test_part_results_.clear();
       47: 2178-block  0
call    0 returned 47
       47: 2179:  test_properties_.clear();
call    0 returned 47
       47: 2180:  death_test_count_ = 0;
       47: 2181:  elapsed_time_ = 0;
       47: 2182:}
        -: 2183:
        -: 2184:// Returns true iff the test failed.
function _ZNK7testing10TestResult6FailedEv called 341 returned 100% blocks executed 90%
      341: 2185:bool TestResult::Failed() const {
      341: 2185-block  0
      341: 2186:  for (int i = 0; i < total_part_count(); ++i) {
      341: 2186-block  0
      341: 2186-block  1
call    0 returned 341
branch  1 taken 10 (fallthrough)
branch  2 taken 331
    $$$$$: 2186-block  2
       10: 2187:    if (GetTestPartResult(i).failed())
       10: 2187-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0
       10: 2188:      return true;
       10: 2188-block  0
        -: 2189:  }
      331: 2190:  return false;
      331: 2190-block  0
        -: 2191:}
        -: 2192:
        -: 2193:// Returns true iff the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2194:static bool TestPartFatallyFailed(const TestPartResult& result) {
    $$$$$: 2194-block  0
    #####: 2195:  return result.fatally_failed();
    $$$$$: 2195-block  0
call    0 never executed
        -: 2196:}
        -: 2197:
        -: 2198:// Returns true iff the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 73 returned 100% blocks executed 100%
       73: 2199:bool TestResult::HasFatalFailure() const {
       73: 2199-block  0
       73: 2200:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       73: 2200-block  0
call    0 returned 73
        -: 2201:}
        -: 2202:
        -: 2203:// Returns true iff the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2204:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    $$$$$: 2204-block  0
    #####: 2205:  return result.nonfatally_failed();
    $$$$$: 2205-block  0
call    0 never executed
        -: 2206:}
        -: 2207:
        -: 2208:// Returns true iff the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2209:bool TestResult::HasNonfatalFailure() const {
    $$$$$: 2209-block  0
    #####: 2210:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    $$$$$: 2210-block  0
call    0 never executed
        -: 2211:}
        -: 2212:
        -: 2213:// Gets the number of all test parts.  This is the sum of the number
        -: 2214:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 351 returned 100% blocks executed 100%
      351: 2215:int TestResult::total_part_count() const {
      351: 2215-block  0
      351: 2216:  return static_cast<int>(test_part_results_.size());
      351: 2216-block  0
call    0 returned 351
        -: 2217:}
        -: 2218:
        -: 2219:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2220:int TestResult::test_property_count() const {
    $$$$$: 2220-block  0
    #####: 2221:  return static_cast<int>(test_properties_.size());
    $$$$$: 2221-block  0
call    0 never executed
        -: 2222:}
        -: 2223:
        -: 2224:// class Test
        -: 2225:
        -: 2226:// Creates a Test object.
        -: 2227:
        -: 2228:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 36 returned 100% blocks executed 83%
       36: 2229:Test::Test()
       36: 2229-block  0
       36: 2230:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
       36: 2230-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36: 2230-block  1
call    4 returned 36
    %%%%%: 2230-block  2
call    5 never executed
       36: 2231:}
        -: 2232:
        -: 2233:// The d'tor restores the states of all flags.  The actual work is
        -: 2234:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2235:// visible here.
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing4TestD2Ev called 36 returned 100% blocks executed 100%
       72: 2236:Test::~Test() {
    $$$$$: 2236-block  0
       36: 2236-block  1
       36: 2236-block  2
call    0 returned 36
    #####: 2237:}
    $$$$$: 2237-block  0
call    0 never executed
call    1 never executed
        -: 2238:
        -: 2239:// Sets up the test fixture.
        -: 2240://
        -: 2241:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 36 returned 100% blocks executed 100%
       36: 2242:void Test::SetUp() {
       36: 2242-block  0
       36: 2243:}
        -: 2244:
        -: 2245:// Tears down the test fixture.
        -: 2246://
        -: 2247:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 36 returned 100% blocks executed 100%
       36: 2248:void Test::TearDown() {
       36: 2248-block  0
       36: 2249:}
        -: 2250:
        -: 2251:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2252:void Test::RecordProperty(const std::string& key, const std::string& value) {
    $$$$$: 2252-block  0
    #####: 2253:  UnitTest::GetInstance()->RecordProperty(key, value);
    $$$$$: 2253-block  0
call    0 never executed
call    1 never executed
    #####: 2254:}
        -: 2255:
        -: 2256:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2257:void Test::RecordProperty(const std::string& key, int value) {
    $$$$$: 2257-block  0
    #####: 2258:  Message value_message;
    $$$$$: 2258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 2258-block  1
call    4 never executed
    #####: 2259:  value_message << value;
    $$$$$: 2259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2260:  RecordProperty(key, value_message.GetString().c_str());
    $$$$$: 2260-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2260-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2260-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 2260-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    %%%%%: 2260-block  4
call   14 never executed
    %%%%%: 2260-block  5
call   15 never executed
    %%%%%: 2260-block  6
call   16 never executed
    #####: 2261:}
        -: 2262:
        -: 2263:namespace internal {
        -: 2264:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2265:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
    $$$$$: 2265-block  0
        -: 2266:                                    const std::string& message) {
        -: 2267:  // This function is a friend of UnitTest and as such has access to
        -: 2268:  // AddTestPartResult.
    #####: 2269:  UnitTest::GetInstance()->AddTestPartResult(
    $$$$$: 2269-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2269-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 2269-block  2
call    7 never executed
call    8 never executed
    %%%%%: 2269-block  3
call    9 never executed
    %%%%%: 2269-block  4
call   10 never executed
        -: 2270:      result_type,
        -: 2271:      NULL,  // No info about the source file where the exception occurred.
        -: 2272:      -1,    // We have no info on which line caused the exception.
        -: 2273:      message,
    #####: 2274:      "");   // No stack trace, either.
    $$$$$: 2274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2275:}
        -: 2276:
        -: 2277:}  // namespace internal
        -: 2278:
        -: 2279:// Google Test requires all tests in the same test case to use the same test
        -: 2280:// fixture class.  This function checks if the current test has the
        -: 2281:// same fixture class as the first test in the current test case.  If
        -: 2282:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2283:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 36 returned 100% blocks executed 16%
       36: 2284:bool Test::HasSameFixtureClass() {
       36: 2284-block  0
       36: 2285:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       36: 2285-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36: 2286:  const TestCase* const test_case = impl->current_test_case();
       36: 2286-block  0
call    0 returned 36
        -: 2287:
        -: 2288:  // Info about the first test in the current test case.
       36: 2289:  const TestInfo* const first_test_info = test_case->test_info_list()[0];
call    0 returned 36
call    1 returned 36
       36: 2290:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       36: 2291:  const char* const first_test_name = first_test_info->name();
call    0 returned 36
        -: 2292:
        -: 2293:  // Info about the current test.
       36: 2294:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 36
       36: 2295:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       36: 2296:  const char* const this_test_name = this_test_info->name();
call    0 returned 36
        -: 2297:
       36: 2298:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 36
        -: 2299:    // Is the first test defined using TEST?
    #####: 2300:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    $$$$$: 2300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2301:    // Is this test defined using TEST?
    #####: 2302:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    $$$$$: 2302-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2303:
    #####: 2304:    if (first_is_TEST || this_is_TEST) {
    $$$$$: 2304-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2304-block  1
branch  2 never executed
branch  3 never executed
        -: 2305:      // Both TEST and TEST_F appear in same test case, which is incorrect.
        -: 2306:      // Tell the user how to fix this.
        -: 2307:
        -: 2308:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2309:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2310:      // the fixture IDs are different for the two tests.
        -: 2311:      const char* const TEST_name =
    #####: 2312:          first_is_TEST ? first_test_name : this_test_name;
    $$$$$: 2312-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2312-block  1
    $$$$$: 2312-block  2
        -: 2313:      const char* const TEST_F_name =
    #####: 2314:          first_is_TEST ? this_test_name : first_test_name;
    $$$$$: 2314-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2314-block  1
    $$$$$: 2314-block  2
        -: 2315:
    #####: 2316:      ADD_FAILURE()
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2316-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2316-block  1
call    6 never executed
call    7 never executed
    %%%%%: 2316-block  2
call    8 never executed
    %%%%%: 2316-block  3
call    9 never executed
    #####: 2317:          << "All tests in the same test case must use the same test fixture\n"
    $$$$$: 2317-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2318:          << "class, so mixing TEST_F and TEST in the same test case is\n"
    $$$$$: 2318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2319:          << "illegal.  In test case " << this_test_info->test_case_name()
    $$$$$: 2319-block  0
call    0 never executed
    $$$$$: 2319-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2319-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2319-block  3
    %%%%%: 2319-block  4
    #####: 2320:          << ",\n"
    $$$$$: 2320-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2321:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    $$$$$: 2321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2321-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2321-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2322:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    $$$$$: 2322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2322-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2322-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2323:          << "want to change the TEST to TEST_F or move it to another test\n"
    $$$$$: 2323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2324:          << "case.";
    $$$$$: 2324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2324-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2325:    } else {
        -: 2326:      // Two fixture classes with the same name appear in two different
        -: 2327:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2328:      ADD_FAILURE()
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2328-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2328-block  1
call    6 never executed
call    7 never executed
    %%%%%: 2328-block  2
call    8 never executed
    %%%%%: 2328-block  3
call    9 never executed
    #####: 2329:          << "All tests in the same test case must use the same test fixture\n"
    $$$$$: 2329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2330:          << "class.  However, in test case "
    $$$$$: 2330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2331:          << this_test_info->test_case_name() << ",\n"
    $$$$$: 2331-block  0
call    0 never executed
    $$$$$: 2331-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2331-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2331-block  3
    #####: 2332:          << "you defined test " << first_test_name
    $$$$$: 2332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2332-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2333:          << " and test " << this_test_name << "\n"
    $$$$$: 2333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2333-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2333-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2334:          << "using two different test fixture classes.  This can happen if\n"
    $$$$$: 2334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2335:          << "the two classes are from different namespaces or translation\n"
    $$$$$: 2335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2336:          << "units and have the same name.  You should probably rename one\n"
    $$$$$: 2336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2337:          << "of the classes to put the tests into different test cases.";
    $$$$$: 2337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2337-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2338:    }
    #####: 2339:    return false;
    $$$$$: 2339-block  0
        -: 2340:  }
        -: 2341:
       36: 2342:  return true;
       36: 2342-block  0
       36: 2342-block  1
       36: 2342-block  2
        -: 2343:}
        -: 2344:
        -: 2345:#if GTEST_HAS_SEH
        -: 2346:
        -: 2347:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2348:// function returns its result via an output parameter pointer because VC++
        -: 2349:// prohibits creation of objects with destructors on stack in functions
        -: 2350:// using __try (see error C2712).
        -: 2351:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2352:                                              const char* location) {
        -: 2353:  Message message;
        -: 2354:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 2355:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 2356:
        -: 2357:  return new std::string(message.GetString());
        -: 2358:}
        -: 2359:
        -: 2360:#endif  // GTEST_HAS_SEH
        -: 2361:
        -: 2362:namespace internal {
        -: 2363:
        -: 2364:#if GTEST_HAS_EXCEPTIONS
        -: 2365:
        -: 2366:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2367:static std::string FormatCxxExceptionMessage(const char* description,
    $$$$$: 2367-block  0
        -: 2368:                                             const char* location) {
    #####: 2369:  Message message;
    $$$$$: 2369-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2369-block  1
call    3 never executed
    %%%%%: 2369-block  2
call    4 never executed
    #####: 2370:  if (description != NULL) {
    $$$$$: 2370-block  0
branch  0 never executed
branch  1 never executed
    #####: 2371:    message << "C++ exception with description \"" << description << "\"";
    $$$$$: 2371-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2371-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2371-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 2371-block  3
        -: 2372:  } else {
    #####: 2373:    message << "Unknown C++ exception";
    $$$$$: 2373-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2374:  }
    #####: 2375:  message << " thrown in " << location << ".";
    $$$$$: 2375-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2375-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2375-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2376:
    #####: 2377:  return message.GetString();
    $$$$$: 2377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2377-block  1
    $$$$$: 2377-block  2
        -: 2378:}
        -: 2379:
        -: 2380:static std::string PrintTestPartResultToString(
        -: 2381:    const TestPartResult& test_part_result);
        -: 2382:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2383:GoogleTestFailureException::GoogleTestFailureException(
    $$$$$: 2383-block  0
    #####: 2384:    const TestPartResult& failure)
    #####: 2385:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    $$$$$: 2385-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2385-block  1
call    5 never executed
    %%%%%: 2385-block  2
call    6 never executed
        -: 2386:
        -: 2387:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2388:
        -: 2389:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2390:// compiler rejects the code if they were declared static.
        -: 2391:
        -: 2392:// Runs the given method and handles SEH exceptions it throws, when
        -: 2393:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2394:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2395:// exceptions in the same function.  Therefore, we provide a separate
        -: 2396:// wrapper function for handling SEH exceptions.)
        -: 2397:template <class T, typename Result>
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc called 22 returned 100% blocks executed 80%
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 36 returned 100% blocks executed 83%
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 144 returned 100% blocks executed 100%
      203: 2398:Result HandleSehExceptionsInMethodIfSupported(
        1: 2398-block  0
       22: 2398-block  1
       36: 2398-block  2
      144: 2398-block  3
        -: 2399:    T* object, Result (T::*method)(), const char* location) {
        -: 2400:#if GTEST_HAS_SEH
        -: 2401:  __try {
        -: 2402:    return (object->*method)();
        -: 2403:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2404:      GetExceptionCode())) {
        -: 2405:    // We create the exception message on the heap because VC++ prohibits
        -: 2406:    // creation of objects with destructors on stack in functions using __try
        -: 2407:    // (see error C2712).
        -: 2408:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2409:        GetExceptionCode(), location);
        -: 2410:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2411:                                             *exception_message);
        -: 2412:    delete exception_message;
        -: 2413:    return static_cast<Result>(0);
        -: 2414:  }
        -: 2415:#else
        -: 2416:  (void)location;
      203: 2417:  return (object->*method)();
        1: 2417-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 2417-block  1
        1: 2417-block  2
        1: 2417-block  3
call    2 returned 1
       22: 2417-block  4
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    $$$$$: 2417-block  5
       22: 2417-block  6
       22: 2417-block  7
call    5 returned 22
       36: 2417-block  8
branch  6 taken 36 (fallthrough)
branch  7 taken 0
       36: 2417-block  9
    $$$$$: 2417-block 10
       36: 2417-block 11
call    8 returned 36
      144: 2417-block 12
branch  9 taken 108 (fallthrough)
branch 10 taken 36
      108: 2417-block 13
       36: 2417-block 14
      144: 2417-block 15
call   11 returned 144
        -: 2418:#endif  // GTEST_HAS_SEH
        -: 2419:}
        -: 2420:
        -: 2421:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2422:// exceptions, if they are supported; returns the 0-value for type
        -: 2423:// Result in case of an SEH exception.
        -: 2424:template <class T, typename Result>
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc called 22 returned 100% blocks executed 19%
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 36 returned 100% blocks executed 18%
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 144 returned 100% blocks executed 19%
      203: 2425:Result HandleExceptionsInMethodIfSupported(
        1: 2425-block  0
       22: 2425-block  1
       36: 2425-block  2
      144: 2425-block  3
        -: 2426:    T* object, Result (T::*method)(), const char* location) {
        -: 2427:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2428:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2429:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2430:  // after the exception is caught and either report or re-throw the
        -: 2431:  // exception based on the flag's value:
        -: 2432:  //
        -: 2433:  // try {
        -: 2434:  //   // Perform the test method.
        -: 2435:  // } catch (...) {
        -: 2436:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2437:  //     // Report the exception as failure.
        -: 2438:  //   else
        -: 2439:  //     throw;  // Re-throws the original exception.
        -: 2440:  // }
        -: 2441:  //
        -: 2442:  // However, the purpose of this flag is to allow the program to drop into
        -: 2443:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2444:  // control enters the catch block, the exception origin information is
        -: 2445:  // lost and the debugger will stop the program at the point of the
        -: 2446:  // re-throw in this function -- instead of at the point of the original
        -: 2447:  // throw statement in the code under test.  For this reason, we perform
        -: 2448:  // the check early, sacrificing the ability to affect Google Test's
        -: 2449:  // exception handling in the method where the exception is thrown.
      203: 2450:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2450-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
       22: 2450-block  1
call    4 returned 22
call    5 returned 22
branch  6 taken 22 (fallthrough)
branch  7 taken 0
       36: 2450-block  2
call    8 returned 36
call    9 returned 36
branch 10 taken 36 (fallthrough)
branch 11 taken 0
      144: 2450-block  3
call   12 returned 144
call   13 returned 144
branch 14 taken 144 (fallthrough)
branch 15 taken 0
        -: 2451:#if GTEST_HAS_EXCEPTIONS
        -: 2452:    try {
      203: 2453:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2453-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2453-block  1
       22: 2453-block  2
call    3 returned 22
branch  4 taken 22 (fallthrough)
branch  5 taken 0 (throw)
       22: 2453-block  3
       36: 2453-block  4
call    6 returned 36
branch  7 taken 36 (fallthrough)
branch  8 taken 0 (throw)
       36: 2453-block  5
      144: 2453-block  6
call    9 returned 144
branch 10 taken 144 (fallthrough)
branch 11 taken 0 (throw)
      144: 2453-block  7
    =====: 2454:    } catch (const AssertionException&) {  // NOLINT
    %%%%%: 2454-block  0
call    0 never executed
call    1 never executed
    %%%%%: 2454-block  1
call    2 never executed
call    3 never executed
    %%%%%: 2454-block  2
call    4 never executed
call    5 never executed
    %%%%%: 2454-block  3
call    6 never executed
call    7 never executed
        -: 2455:      // This failure was reported already.
    =====: 2456:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    %%%%%: 2456-block  0
call    0 never executed
    %%%%%: 2456-block  1
call    1 never executed
call    2 never executed
    %%%%%: 2456-block  2
call    3 never executed
    %%%%%: 2456-block  3
call    4 never executed
call    5 never executed
    %%%%%: 2456-block  4
call    6 never executed
    %%%%%: 2456-block  5
call    7 never executed
call    8 never executed
    %%%%%: 2456-block  6
call    9 never executed
    %%%%%: 2456-block  7
call   10 never executed
call   11 never executed
        -: 2457:      // This exception type can only be thrown by a failed Google
        -: 2458:      // Test assertion with the intention of letting another testing
        -: 2459:      // framework catch it.  Therefore we just re-throw it.
    =====: 2460:      throw;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    =====: 2461:    } catch (const std::exception& e) {  // NOLINT
    %%%%%: 2461-block  0
call    0 never executed
call    1 never executed
    %%%%%: 2461-block  1
call    2 never executed
call    3 never executed
    %%%%%: 2461-block  2
call    4 never executed
call    5 never executed
    %%%%%: 2461-block  3
call    6 never executed
call    7 never executed
    %%%%%: 2461-block  4
call    8 never executed
call    9 never executed
    %%%%%: 2461-block  5
call   10 never executed
call   11 never executed
    %%%%%: 2461-block  6
call   12 never executed
call   13 never executed
    %%%%%: 2461-block  7
call   14 never executed
call   15 never executed
    =====: 2462:      internal::ReportFailureInUnknownLocation(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2462-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2462-block  1
call    7 never executed
    %%%%%: 2462-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2462-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2462-block  4
call   16 never executed
    %%%%%: 2462-block  5
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2462-block  6
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 2462-block  7
call   25 never executed
    %%%%%: 2462-block  8
call   26 never executed
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 2462-block  9
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 2462-block 10
call   34 never executed
    %%%%%: 2462-block 11
call   35 never executed
        -: 2463:          TestPartResult::kFatalFailure,
    =====: 2464:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2465:    } catch (...) {  // NOLINT
    %%%%%: 2465-block  0
call    0 never executed
call    1 never executed
    %%%%%: 2465-block  1
call    2 never executed
    %%%%%: 2465-block  2
call    3 never executed
call    4 never executed
    %%%%%: 2465-block  3
call    5 never executed
    %%%%%: 2465-block  4
call    6 never executed
call    7 never executed
    %%%%%: 2465-block  5
call    8 never executed
    %%%%%: 2465-block  6
call    9 never executed
call   10 never executed
    %%%%%: 2465-block  7
call   11 never executed
    =====: 2466:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2466-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2466-block  1
call    6 never executed
    %%%%%: 2466-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2466-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2466-block  4
call   14 never executed
    %%%%%: 2466-block  5
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2466-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2466-block  7
call   22 never executed
    %%%%%: 2466-block  8
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 2466-block  9
call   27 never executed
branch 28 never executed
branch 29 never executed
    %%%%%: 2466-block 10
call   30 never executed
    %%%%%: 2466-block 11
call   31 never executed
        -: 2467:          TestPartResult::kFatalFailure,
        -: 2468:          FormatCxxExceptionMessage(NULL, location));
        -: 2469:    }
    =====: 2470:    return static_cast<Result>(0);
    %%%%%: 2470-block  0
    %%%%%: 2470-block  1
    %%%%%: 2470-block  2
    %%%%%: 2470-block  3
        -: 2471:#else
        -: 2472:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2473:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2474:  } else {
      203: 2475:    return (object->*method)();
    $$$$$: 2475-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2475-block  1
    $$$$$: 2475-block  2
    $$$$$: 2475-block  3
call    2 never executed
        1: 2475-block  4
    %%%%%: 2475-block  5
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 2475-block  6
branch  7 never executed
branch  8 never executed
    $$$$$: 2475-block  7
    $$$$$: 2475-block  8
    $$$$$: 2475-block  9
call    9 never executed
       22: 2475-block 10
    %%%%%: 2475-block 11
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 2475-block 12
branch 14 never executed
branch 15 never executed
    $$$$$: 2475-block 13
    $$$$$: 2475-block 14
    $$$$$: 2475-block 15
call   16 never executed
       36: 2475-block 16
    %%%%%: 2475-block 17
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 2475-block 18
branch 21 never executed
branch 22 never executed
    $$$$$: 2475-block 19
    $$$$$: 2475-block 20
    $$$$$: 2475-block 21
call   23 never executed
      144: 2475-block 22
    %%%%%: 2475-block 23
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -: 2476:  }
        -: 2477:}
        -: 2478:
        -: 2479:}  // namespace internal
        -: 2480:
        -: 2481:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 36 returned 100% blocks executed 94%
       36: 2482:void Test::Run() {
       36: 2482-block  0
       36: 2483:  if (!HasSameFixtureClass()) return;
       36: 2483-block  0
call    0 returned 36
branch  1 taken 0 (fallthrough)
branch  2 taken 36
    $$$$$: 2483-block  1
        -: 2484:
       36: 2485:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       36: 2485-block  0
call    0 returned 36
       36: 2486:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 36
call    1 returned 36
       36: 2487:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 36
        -: 2488:  // We will run the test only if SetUp() was successful.
       36: 2489:  if (!HasFatalFailure()) {
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0
       36: 2490:    impl->os_stack_trace_getter()->UponLeavingGTest();
       36: 2490-block  0
call    0 returned 36
call    1 returned 36
        -: 2491:    internal::HandleExceptionsInMethodIfSupported(
       36: 2492:        this, &Test::TestBody, "the test body");
call    0 returned 36
        -: 2493:  }
        -: 2494:
        -: 2495:  // However, we want to clean up as much as possible.  Hence we will
        -: 2496:  // always call TearDown(), even if SetUp() or the test body has
        -: 2497:  // failed.
       36: 2498:  impl->os_stack_trace_getter()->UponLeavingGTest();
       36: 2498-block  0
call    0 returned 36
call    1 returned 36
        -: 2499:  internal::HandleExceptionsInMethodIfSupported(
       36: 2500:      this, &Test::TearDown, "TearDown()");
call    0 returned 36
        -: 2501:}
        -: 2502:
        -: 2503:// Returns true iff the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 73 returned 100% blocks executed 100%
       73: 2504:bool Test::HasFatalFailure() {
       73: 2504-block  0
       73: 2505:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       73: 2505-block  0
call    0 returned 73
call    1 returned 73
call    2 returned 73
        -: 2506:}
        -: 2507:
        -: 2508:// Returns true iff the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2509:bool Test::HasNonfatalFailure() {
    $$$$$: 2509-block  0
        -: 2510:  return internal::GetUnitTestImpl()->current_test_result()->
    #####: 2511:      HasNonfatalFailure();
    $$$$$: 2511-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2512:}
        -: 2513:
        -: 2514:// class TestInfo
        -: 2515:
        -: 2516:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2517:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 36 returned 100% blocks executed 30%
       36: 2518:TestInfo::TestInfo(const std::string& a_test_case_name,
       36: 2518-block  0
        -: 2519:                   const std::string& a_name,
        -: 2520:                   const char* a_type_param,
        -: 2521:                   const char* a_value_param,
        -: 2522:                   internal::CodeLocation a_code_location,
        -: 2523:                   internal::TypeId fixture_class_id,
       36: 2524:                   internal::TestFactoryBase* factory)
        -: 2525:    : test_case_name_(a_test_case_name),
        -: 2526:      name_(a_name),
    #####: 2527:      type_param_(a_type_param ? new std::string(a_type_param) : NULL),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2527-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2527-block  1
call    6 never executed
    #####: 2528:      value_param_(a_value_param ? new std::string(a_value_param) : NULL),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2528-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2528-block  1
call    6 never executed
        -: 2529:      location_(a_code_location),
        -: 2530:      fixture_class_id_(fixture_class_id),
        -: 2531:      should_run_(false),
        -: 2532:      is_disabled_(false),
        -: 2533:      matches_filter_(false),
        -: 2534:      factory_(factory),
       36: 2535:      result_() {}
       36: 2535-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36: 2535-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 36
    $$$$$: 2535-block  2
call    6 never executed
    $$$$$: 2535-block  3
       36: 2535-block  4
       36: 2535-block  5
call    7 returned 36
branch  8 taken 0 (fallthrough)
branch  9 taken 36
    $$$$$: 2535-block  6
call   10 never executed
       36: 2535-block  7
branch 11 taken 0 (fallthrough)
branch 12 taken 36
    $$$$$: 2535-block  8
call   13 never executed
    $$$$$: 2535-block  9
       36: 2535-block 10
       36: 2535-block 11
call   14 returned 36
branch 15 taken 0 (fallthrough)
branch 16 taken 36
    $$$$$: 2535-block 12
call   17 never executed
       36: 2535-block 13
call   18 returned 36
branch 19 taken 36 (fallthrough)
branch 20 taken 0 (throw)
       36: 2535-block 14
call   21 returned 36
branch 22 taken 36 (fallthrough)
branch 23 taken 0 (throw)
       36: 2535-block 15
    %%%%%: 2535-block 16
branch 24 never executed
branch 25 never executed
    %%%%%: 2535-block 17
call   26 never executed
    %%%%%: 2535-block 18
    %%%%%: 2535-block 19
branch 27 never executed
branch 28 never executed
    %%%%%: 2535-block 20
call   29 never executed
    %%%%%: 2535-block 21
    %%%%%: 2535-block 22
call   30 never executed
    %%%%%: 2535-block 23
call   31 never executed
    %%%%%: 2535-block 24
call   32 never executed
    %%%%%: 2535-block 25
call   33 never executed
    %%%%%: 2535-block 26
call   34 never executed
        -: 2536:
        -: 2537:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 36 returned 100% blocks executed 100%
       72: 2538:TestInfo::~TestInfo() { delete factory_; }
       36: 2538-block  0
       36: 2538-block  1
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 2538-block  2
call    2 returned 36
       36: 2538-block  3
call    3 returned 36
call    4 returned 36
call    5 returned 36
call    6 returned 36
call    7 returned 36
call    8 returned 36
        -: 2539:
        -: 2540:namespace internal {
        -: 2541:
        -: 2542:// Creates a new TestInfo object and registers it with Google Test;
        -: 2543:// returns the created object.
        -: 2544://
        -: 2545:// Arguments:
        -: 2546://
        -: 2547://   test_case_name:   name of the test case
        -: 2548://   name:             name of the test
        -: 2549://   type_param:       the name of the test's type parameter, or NULL if
        -: 2550://                     this is not a typed or a type-parameterized test.
        -: 2551://   value_param:      text representation of the test's value parameter,
        -: 2552://                     or NULL if this is not a value-parameterized test.
        -: 2553://   code_location:    code location where the test is defined
        -: 2554://   fixture_class_id: ID of the test fixture class
        -: 2555://   set_up_tc:        pointer to the function that sets up the test case
        -: 2556://   tear_down_tc:     pointer to the function that tears down the test case
        -: 2557://   factory:          pointer to the factory that creates a test object.
        -: 2558://                     The newly created TestInfo instance will assume
        -: 2559://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 36 returned 100% blocks executed 61%
       36: 2560:TestInfo* MakeAndRegisterTestInfo(
       36: 2560-block  0
        -: 2561:    const char* test_case_name,
        -: 2562:    const char* name,
        -: 2563:    const char* type_param,
        -: 2564:    const char* value_param,
        -: 2565:    CodeLocation code_location,
        -: 2566:    TypeId fixture_class_id,
        -: 2567:    SetUpTestCaseFunc set_up_tc,
        -: 2568:    TearDownTestCaseFunc tear_down_tc,
        -: 2569:    TestFactoryBase* factory) {
        -: 2570:  TestInfo* const test_info =
        -: 2571:      new TestInfo(test_case_name, name, type_param, value_param,
       36: 2572:                   code_location, fixture_class_id, factory);
       36: 2572-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36: 2572-block  1
call    4 returned 36
call    5 returned 36
branch  6 taken 36 (fallthrough)
branch  7 taken 0 (throw)
       36: 2572-block  2
call    8 returned 36
branch  9 taken 36 (fallthrough)
branch 10 taken 0 (throw)
       36: 2572-block  3
call   11 returned 36
branch 12 taken 36 (fallthrough)
branch 13 taken 0 (throw)
       36: 2572-block  4
call   14 returned 36
branch 15 taken 36 (fallthrough)
branch 16 taken 0 (throw)
       36: 2572-block  5
call   17 returned 36
call   18 returned 36
call   19 returned 36
call   20 returned 36
call   21 returned 36
    %%%%%: 2572-block  6
call   22 never executed
    %%%%%: 2572-block  7
call   23 never executed
    %%%%%: 2572-block  8
call   24 never executed
    %%%%%: 2572-block  9
call   25 never executed
    %%%%%: 2572-block 10
call   26 never executed
    %%%%%: 2572-block 11
call   27 never executed
       36: 2573:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 36
call    1 returned 36
       36: 2574:  return test_info;
       36: 2574-block  0
        -: 2575:}
        -: 2576:
function _ZN7testing8internal25ReportInvalidTestCaseTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2577:void ReportInvalidTestCaseType(const char* test_case_name,
    $$$$$: 2577-block  0
        -: 2578:                               CodeLocation code_location) {
    #####: 2579:  Message errors;
    $$$$$: 2579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 2579-block  1
call    4 never executed
        -: 2580:  errors
    #####: 2581:      << "Attempted redefinition of test case " << test_case_name << ".\n"
    $$$$$: 2581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2581-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2581-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2582:      << "All tests in the same test case must use the same test fixture\n"
    $$$$$: 2582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2583:      << "class.  However, in test case " << test_case_name << ", you tried\n"
    $$$$$: 2583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2583-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2583-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2584:      << "to define a test using a fixture class different from the one\n"
    $$$$$: 2584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2585:      << "used earlier. This can happen if the two fixture classes are\n"
    $$$$$: 2585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2586:      << "from different namespaces and have the same name. You should\n"
    $$$$$: 2586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2587:      << "probably rename one of the classes to put the tests into different\n"
    $$$$$: 2587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2588:      << "test cases.";
    $$$$$: 2588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2589:
    #####: 2590:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    $$$$$: 2590-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2590-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 2590-block  2
call    7 never executed
    $$$$$: 2590-block  3
call    8 never executed
call    9 never executed
    %%%%%: 2590-block  4
call   10 never executed
    %%%%%: 2590-block  5
call   11 never executed
        -: 2591:                                          code_location.line)
    #####: 2592:                    << " " << errors.GetString();
    $$$$$: 2592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2592-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 2592-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    %%%%%: 2592-block  3
call   13 never executed
    #####: 2593:}
        -: 2594:}  // namespace internal
        -: 2595:
        -: 2596:namespace {
        -: 2597:
        -: 2598:// A predicate that checks the test name of a TestInfo against a known
        -: 2599:// value.
        -: 2600://
        -: 2601:// This is used for implementation of the TestCase class only.  We put
        -: 2602:// it in the anonymous namespace to prevent polluting the outer
        -: 2603:// namespace.
        -: 2604://
        -: 2605:// TestNameIs is copyable.
        -: 2606:class TestNameIs {
        -: 2607: public:
        -: 2608:  // Constructor.
        -: 2609:  //
        -: 2610:  // TestNameIs has NO default constructor.
        -: 2611:  explicit TestNameIs(const char* name)
        -: 2612:      : name_(name) {}
        -: 2613:
        -: 2614:  // Returns true iff the test name of test_info matches name_.
        -: 2615:  bool operator()(const TestInfo * test_info) const {
        -: 2616:    return test_info && test_info->name() == name_;
        -: 2617:  }
        -: 2618:
        -: 2619: private:
        -: 2620:  std::string name_;
        -: 2621:};
        -: 2622:
        -: 2623:}  // namespace
        -: 2624:
        -: 2625:namespace internal {
        -: 2626:
        -: 2627:// This method expands all parameterized tests registered with macros TEST_P
        -: 2628:// and INSTANTIATE_TEST_CASE_P into regular tests and registers those.
        -: 2629:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2630:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2630-block  0
        1: 2631:  if (!parameterized_tests_registered_) {
        1: 2631-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2632:    parameterized_test_registry_.RegisterTests();
        1: 2632-block  0
call    0 returned 1
        1: 2633:    parameterized_tests_registered_ = true;
        -: 2634:  }
        1: 2635:}
        -: 2636:
        -: 2637:}  // namespace internal
        -: 2638:
        -: 2639:// Creates the test object, runs it, records its result, and then
        -: 2640:// deletes it.
function _ZN7testing8TestInfo3RunEv called 36 returned 100% blocks executed 93%
       36: 2641:void TestInfo::Run() {
       36: 2641-block  0
       36: 2642:  if (!should_run_) return;
       36: 2642-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    $$$$$: 2642-block  1
        -: 2643:
        -: 2644:  // Tells UnitTest where to store test result.
       36: 2645:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       36: 2645-block  0
call    0 returned 36
       36: 2646:  impl->set_current_test_info(this);
call    0 returned 36
        -: 2647:
       36: 2648:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 36
call    1 returned 36
call    2 returned 36
        -: 2649:
        -: 2650:  // Notifies the unit test event listeners that a test is about to start.
       36: 2651:  repeater->OnTestStart(*this);
call    0 returned 36
        -: 2652:
       36: 2653:  const TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 36
        -: 2654:
       36: 2655:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 36
call    1 returned 36
        -: 2656:
        -: 2657:  // Creates the test object.
       36: 2658:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       36: 2659:      factory_, &internal::TestFactoryBase::CreateTest,
       36: 2660:      "the test fixture's constructor");
call    0 returned 36
        -: 2661:
        -: 2662:  // Runs the test only if the test object was created and its
        -: 2663:  // constructor didn't generate a fatal failure.
       36: 2664:  if ((test != NULL) && !Test::HasFatalFailure()) {
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 2664-block  0
call    2 returned 36
branch  3 taken 36 (fallthrough)
branch  4 taken 0
       36: 2664-block  1
    $$$$$: 2664-block  2
       36: 2664-block  3
branch  5 taken 36 (fallthrough)
branch  6 taken 0
        -: 2665:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2666:    // exception handling code.
       36: 2667:    test->Run();
       36: 2667-block  0
call    0 returned 36
        -: 2668:  }
        -: 2669:
        -: 2670:  // Deletes the test object.
       36: 2671:  impl->os_stack_trace_getter()->UponLeavingGTest();
       36: 2671-block  0
call    0 returned 36
call    1 returned 36
        -: 2672:  internal::HandleExceptionsInMethodIfSupported(
       36: 2673:      test, &Test::DeleteSelf_, "the test fixture's destructor");
call    0 returned 36
        -: 2674:
       36: 2675:  result_.set_elapsed_time(internal::GetTimeInMillis() - start);
call    0 returned 36
call    1 returned 36
        -: 2676:
        -: 2677:  // Notifies the unit test event listener that a test has just finished.
       36: 2678:  repeater->OnTestEnd(*this);
call    0 returned 36
        -: 2679:
        -: 2680:  // Tells UnitTest to stop associating assertion results to this
        -: 2681:  // test.
       36: 2682:  impl->set_current_test_info(NULL);
call    0 returned 36
        -: 2683:}
        -: 2684:
        -: 2685:// class TestCase
        -: 2686:
        -: 2687:// Gets the number of successful tests in this test case.
function _ZNK7testing8TestCase21successful_test_countEv called 11 returned 100% blocks executed 100%
       11: 2688:int TestCase::successful_test_count() const {
       11: 2688-block  0
       11: 2689:  return CountIf(test_info_list_, TestPassed);
       11: 2689-block  0
call    0 returned 11
        -: 2690:}
        -: 2691:
        -: 2692:// Gets the number of failed tests in this test case.
function _ZNK7testing8TestCase17failed_test_countEv called 66 returned 100% blocks executed 100%
       66: 2693:int TestCase::failed_test_count() const {
       66: 2693-block  0
       66: 2694:  return CountIf(test_info_list_, TestFailed);
       66: 2694-block  0
call    0 returned 66
        -: 2695:}
        -: 2696:
        -: 2697:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8TestCase30reportable_disabled_test_countEv called 11 returned 100% blocks executed 100%
       11: 2698:int TestCase::reportable_disabled_test_count() const {
       11: 2698-block  0
       11: 2699:  return CountIf(test_info_list_, TestReportableDisabled);
       11: 2699-block  0
call    0 returned 11
        -: 2700:}
        -: 2701:
        -: 2702:// Gets the number of disabled tests in this test case.
function _ZNK7testing8TestCase19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2703:int TestCase::disabled_test_count() const {
    $$$$$: 2703-block  0
    #####: 2704:  return CountIf(test_info_list_, TestDisabled);
    $$$$$: 2704-block  0
call    0 never executed
        -: 2705:}
        -: 2706:
        -: 2707:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8TestCase21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2708:int TestCase::reportable_test_count() const {
    $$$$$: 2708-block  0
    #####: 2709:  return CountIf(test_info_list_, TestReportable);
    $$$$$: 2709-block  0
call    0 never executed
        -: 2710:}
        -: 2711:
        -: 2712:// Get the number of tests in this test case that should run.
function _ZNK7testing8TestCase17test_to_run_countEv called 44 returned 100% blocks executed 100%
       44: 2713:int TestCase::test_to_run_count() const {
       44: 2713-block  0
       44: 2714:  return CountIf(test_info_list_, ShouldRunTest);
       44: 2714-block  0
call    0 returned 44
        -: 2715:}
        -: 2716:
        -: 2717:// Gets the number of all tests.
function _ZNK7testing8TestCase16total_test_countEv called 65 returned 100% blocks executed 100%
       65: 2718:int TestCase::total_test_count() const {
       65: 2718-block  0
       65: 2719:  return static_cast<int>(test_info_list_.size());
       65: 2719-block  0
call    0 returned 65
        -: 2720:}
        -: 2721:
        -: 2722:// Creates a TestCase with the given name.
        -: 2723://
        -: 2724:// Arguments:
        -: 2725://
        -: 2726://   name:         name of the test case
        -: 2727://   a_type_param: the name of the test case's type parameter, or NULL if
        -: 2728://                 this is not a typed or a type-parameterized test case.
        -: 2729://   set_up_tc:    pointer to the function that sets up the test case
        -: 2730://   tear_down_tc: pointer to the function that tears down the test case
function _ZN7testing8TestCaseC2EPKcS2_PFvvES4_ called 11 returned 100% blocks executed 36%
       11: 2731:TestCase::TestCase(const char* a_name, const char* a_type_param,
       11: 2731-block  0
        -: 2732:                   Test::SetUpTestCaseFunc set_up_tc,
       11: 2733:                   Test::TearDownTestCaseFunc tear_down_tc)
        -: 2734:    : name_(a_name),
    #####: 2735:      type_param_(a_type_param ? new std::string(a_type_param) : NULL),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2735-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2735-block  1
call    6 never executed
        -: 2736:      set_up_tc_(set_up_tc),
        -: 2737:      tear_down_tc_(tear_down_tc),
        -: 2738:      should_run_(false),
       11: 2739:      elapsed_time_(0) {
       11: 2739-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 2739-block  1
call    4 returned 11
branch  5 taken 0 (fallthrough)
branch  6 taken 11
    $$$$$: 2739-block  2
call    7 never executed
    $$$$$: 2739-block  3
       11: 2739-block  4
       11: 2739-block  5
call    8 returned 11
branch  9 taken 0 (fallthrough)
branch 10 taken 11
    $$$$$: 2739-block  6
call   11 never executed
       11: 2739-block  7
call   12 returned 11
call   13 returned 11
call   14 returned 11
branch 15 taken 11 (fallthrough)
branch 16 taken 0 (throw)
    %%%%%: 2739-block  8
call   17 never executed
call   18 never executed
    %%%%%: 2739-block  9
branch 19 never executed
branch 20 never executed
    %%%%%: 2739-block 10
call   21 never executed
    %%%%%: 2739-block 11
    %%%%%: 2739-block 12
call   22 never executed
    %%%%%: 2739-block 13
call   23 never executed
    %%%%%: 2739-block 14
call   24 never executed
    %%%%%: 2739-block 15
call   25 never executed
       11: 2740:}
       11: 2740-block  0
        -: 2741:
        -: 2742:// Destructor of TestCase.
function _ZN7testing8TestCaseD0Ev called 11 returned 100% blocks executed 100%
function _ZN7testing8TestCaseD2Ev called 11 returned 100% blocks executed 100%
       33: 2743:TestCase::~TestCase() {
       11: 2743-block  0
       11: 2743-block  1
call    0 returned 11
call    1 returned 11
call    2 returned 11
call    3 returned 11
call    4 returned 11
        -: 2744:  // Deletes every Test in the collection.
       11: 2745:  ForEach(test_info_list_, internal::Delete<TestInfo>);
       11: 2745-block  0
call    0 returned 11
       11: 2746:}
       11: 2746-block  0
call    0 returned 11
call    1 returned 11
        -: 2747:
        -: 2748:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2749:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8TestCase11GetTestInfoEi called 17 returned 100% blocks executed 86%
       17: 2750:const TestInfo* TestCase::GetTestInfo(int i) const {
       17: 2750-block  0
       17: 2751:  const int index = GetElementOr(test_indices_, i, -1);
       17: 2751-block  0
call    0 returned 17
       17: 2752:  return index < 0 ? NULL : test_info_list_[index];
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17: 2752-block  0
call    2 returned 17
    $$$$$: 2752-block  1
       17: 2752-block  2
        -: 2753:}
        -: 2754:
        -: 2755:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2756:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8TestCase18GetMutableTestInfoEi called 36 returned 100% blocks executed 86%
       36: 2757:TestInfo* TestCase::GetMutableTestInfo(int i) {
       36: 2757-block  0
       36: 2758:  const int index = GetElementOr(test_indices_, i, -1);
       36: 2758-block  0
call    0 returned 36
       36: 2759:  return index < 0 ? NULL : test_info_list_[index];
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 2759-block  0
call    2 returned 36
    $$$$$: 2759-block  1
       36: 2759-block  2
        -: 2760:}
        -: 2761:
        -: 2762:// Adds a test to this test case.  Will delete the test upon
        -: 2763:// destruction of the TestCase object.
function _ZN7testing8TestCase11AddTestInfoEPNS_8TestInfoE called 36 returned 100% blocks executed 100%
       36: 2764:void TestCase::AddTestInfo(TestInfo * test_info) {
       36: 2764-block  0
       36: 2765:  test_info_list_.push_back(test_info);
       36: 2765-block  0
call    0 returned 36
       36: 2766:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36: 2767:}
       36: 2767-block  0
        -: 2768:
        -: 2769:// Runs every test in this TestCase.
function _ZN7testing8TestCase3RunEv called 11 returned 100% blocks executed 96%
       11: 2770:void TestCase::Run() {
       11: 2770-block  0
       11: 2771:  if (!should_run_) return;
       11: 2771-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    $$$$$: 2771-block  1
        -: 2772:
       11: 2773:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       11: 2773-block  0
call    0 returned 11
       11: 2774:  impl->set_current_test_case(this);
call    0 returned 11
        -: 2775:
       11: 2776:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 11
call    1 returned 11
call    2 returned 11
        -: 2777:
       11: 2778:  repeater->OnTestCaseStart(*this);
call    0 returned 11
       11: 2779:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 11
call    1 returned 11
        -: 2780:  internal::HandleExceptionsInMethodIfSupported(
       11: 2781:      this, &TestCase::RunSetUpTestCase, "SetUpTestCase()");
call    0 returned 11
        -: 2782:
       11: 2783:  const internal::TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 11
       47: 2784:  for (int i = 0; i < total_test_count(); i++) {
       47: 2784-block  0
call    0 returned 47
branch  1 taken 36 (fallthrough)
branch  2 taken 11
       36: 2785:    GetMutableTestInfo(i)->Run();
       36: 2785-block  0
call    0 returned 36
call    1 returned 36
        -: 2786:  }
       11: 2787:  elapsed_time_ = internal::GetTimeInMillis() - start;
       11: 2787-block  0
call    0 returned 11
        -: 2788:
       11: 2789:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 11
call    1 returned 11
        -: 2790:  internal::HandleExceptionsInMethodIfSupported(
       11: 2791:      this, &TestCase::RunTearDownTestCase, "TearDownTestCase()");
call    0 returned 11
        -: 2792:
       11: 2793:  repeater->OnTestCaseEnd(*this);
call    0 returned 11
       11: 2794:  impl->set_current_test_case(NULL);
call    0 returned 11
        -: 2795:}
        -: 2796:
        -: 2797:// Clears the results of all tests in this test case.
function _ZN7testing8TestCase11ClearResultEv called 11 returned 100% blocks executed 100%
       11: 2798:void TestCase::ClearResult() {
       11: 2798-block  0
       11: 2799:  ad_hoc_test_result_.Clear();
       11: 2799-block  0
call    0 returned 11
       11: 2800:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 11
       11: 2801:}
        -: 2802:
        -: 2803:// Shuffles the tests in this test case.
function _ZN7testing8TestCase12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 2804:void TestCase::ShuffleTests(internal::Random* random) {
    $$$$$: 2804-block  0
    #####: 2805:  Shuffle(random, &test_indices_);
    $$$$$: 2805-block  0
call    0 never executed
    #####: 2806:}
        -: 2807:
        -: 2808:// Restores the test order to before the first shuffle.
function _ZN7testing8TestCase14UnshuffleTestsEv called 11 returned 100% blocks executed 100%
       11: 2809:void TestCase::UnshuffleTests() {
       11: 2809-block  0
       47: 2810:  for (size_t i = 0; i < test_indices_.size(); i++) {
       11: 2810-block  0
       47: 2810-block  1
call    0 returned 47
branch  1 taken 36 (fallthrough)
branch  2 taken 11
       36: 2811:    test_indices_[i] = static_cast<int>(i);
       36: 2811-block  0
call    0 returned 36
        -: 2812:  }
       11: 2813:}
        -: 2814:
        -: 2815:// Formats a countable noun.  Depending on its quantity, either the
        -: 2816:// singular form or the plural form is used. e.g.
        -: 2817://
        -: 2818:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 2819:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 28 returned 100% blocks executed 80%
       28: 2820:static std::string FormatCountableNoun(int count,
       28: 2820-block  0
        -: 2821:                                       const char * singular_form,
        -: 2822:                                       const char * plural_form) {
       56: 2823:  return internal::StreamableToString(count) + " " +
       28: 2823-block  0
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0 (throw)
       28: 2823-block  1
call    4 returned 28
call    5 returned 28
    %%%%%: 2823-block  2
call    6 never executed
    %%%%%: 2823-block  3
call    7 never executed
       84: 2824:      (count == 1 ? singular_form : plural_form);
       28: 2824-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 19
        9: 2824-block  1
       19: 2824-block  2
       28: 2824-block  3
call    2 returned 28
branch  3 taken 28 (fallthrough)
branch  4 taken 0 (throw)
       28: 2824-block  4
       28: 2824-block  5
        -: 2825:}
        -: 2826:
        -: 2827:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 4 returned 100% blocks executed 100%
        4: 2828:static std::string FormatTestCount(int test_count) {
        4: 2828-block  0
        4: 2829:  return FormatCountableNoun(test_count, "test", "tests");
        4: 2829-block  0
call    0 returned 4
        -: 2830:}
        -: 2831:
        -: 2832:// Formats the count of test cases.
function _ZN7testingL19FormatTestCaseCountEi called 2 returned 100% blocks executed 100%
        2: 2833:static std::string FormatTestCaseCount(int test_case_count) {
        2: 2833-block  0
        2: 2834:  return FormatCountableNoun(test_case_count, "test case", "test cases");
        2: 2834-block  0
call    0 returned 2
        -: 2835:}
        -: 2836:
        -: 2837:// Converts a TestPartResult::Type enum to human-friendly string
        -: 2838:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 2839:// to "Failure", as the user usually doesn't care about the difference
        -: 2840:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 1 returned 100% blocks executed 60%
        1: 2841:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
        1: 2841-block  0
        1: 2842:  switch (type) {
        1: 2842-block  0
branch  0 taken 0
branch  1 taken 1
branch  2 taken 0
        -: 2843:    case TestPartResult::kSuccess:
    #####: 2844:      return "Success";
    $$$$$: 2844-block  0
        -: 2845:
        -: 2846:    case TestPartResult::kNonFatalFailure:
        -: 2847:    case TestPartResult::kFatalFailure:
        -: 2848:#ifdef _MSC_VER
        -: 2849:      return "error: ";
        -: 2850:#else
        1: 2851:      return "Failure\n";
        1: 2851-block  0
        -: 2852:#endif
        -: 2853:    default:
    #####: 2854:      return "Unknown result type";
    $$$$$: 2854-block  0
        -: 2855:  }
        -: 2856:}
        -: 2857:
        -: 2858:namespace internal {
        -: 2859:
        -: 2860:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 1 returned 100% blocks executed 78%
        1: 2861:static std::string PrintTestPartResultToString(
        1: 2861-block  0
        -: 2862:    const TestPartResult& test_part_result) {
        2: 2863:  return (Message()
        1: 2863-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2863-block  1
call    3 returned 1
    %%%%%: 2863-block  2
call    4 never executed
        2: 2864:          << internal::FormatFileLocation(test_part_result.file_name(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
    %%%%%: 2864-block  0
call    6 never executed
        1: 2865:                                          test_part_result.line_number())
        1: 2865-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 2866:          << " " << TestPartResultTypeToString(test_part_result.type())
call    0 returned 1
call    1 returned 1
        1: 2866-block  0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 2866-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    %%%%%: 2866-block  2
        3: 2867:          << test_part_result.message()).GetString();
        1: 2867-block  0
call    0 returned 1
        1: 2867-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2867-block  2
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 2867-block  3
        1: 2867-block  4
        -: 2868:}
        -: 2869:
        -: 2870:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 90%
        1: 2871:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        1: 2871-block  0
        -: 2872:  const std::string& result =
        2: 2873:      PrintTestPartResultToString(test_part_result);
        1: 2873-block  0
call    0 returned 1
        1: 2873-block  1
call    1 returned 1
    %%%%%: 2873-block  2
call    2 never executed
        1: 2874:  printf("%s\n", result.c_str());
call    0 returned 1
        1: 2875:  fflush(stdout);
call    0 returned 1
        -: 2876:  // If the test program runs in Visual Studio or a debugger, the
        -: 2877:  // following statements add the test part result message to the Output
        -: 2878:  // window such that the user can double-click on it to jump to the
        -: 2879:  // corresponding source code location; otherwise they do nothing.
        -: 2880:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 2881:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 2882:  // to stdout is done by OutputDebugString() there already - we don't
        -: 2883:  // want the same message printed twice.
        1: 2884:  ::OutputDebugStringA(result.c_str());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2885:  ::OutputDebugStringA("\n");
        1: 2885-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2886:#endif
        1: 2887:}
        -: 2888:
        -: 2889:// class PrettyUnitTestResultPrinter
        -: 2890:
        -: 2891:enum GTestColor {
        -: 2892:  COLOR_DEFAULT,
        -: 2893:  COLOR_RED,
        -: 2894:  COLOR_GREEN,
        -: 2895:  COLOR_YELLOW
        -: 2896:};
        -: 2897:
        -: 2898:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 2899:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 2900:
        -: 2901:// Returns the character attribute for the given color.
        -: 2902:static WORD GetColorAttribute(GTestColor color) {
        -: 2903:  switch (color) {
        -: 2904:    case COLOR_RED:    return FOREGROUND_RED;
        -: 2905:    case COLOR_GREEN:  return FOREGROUND_GREEN;
        -: 2906:    case COLOR_YELLOW: return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 2907:    default:           return 0;
        -: 2908:  }
        -: 2909:}
        -: 2910:
        -: 2911:static int GetBitOffset(WORD color_mask) {
        -: 2912:  if (color_mask == 0) return 0;
        -: 2913:
        -: 2914:  int bitOffset = 0;
        -: 2915:  while ((color_mask & 1) == 0) {
        -: 2916:    color_mask >>= 1;
        -: 2917:    ++bitOffset;
        -: 2918:  }
        -: 2919:  return bitOffset;
        -: 2920:}
        -: 2921:
        -: 2922:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 2923:  // Let's reuse the BG
        -: 2924:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 2925:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 2926:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 2927:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 2928:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 2929:
        -: 2930:  WORD new_color =
        -: 2931:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 2932:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 2933:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 2934:
        -: 2935:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 2936:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 2937:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 2938:  }
        -: 2939:  return new_color;
        -: 2940:}
        -: 2941:
        -: 2942:#else
        -: 2943:
        -: 2944:// Returns the ANSI color code for the given color.  COLOR_DEFAULT is
        -: 2945:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_10GTestColorE called 0 returned 0% blocks executed 0%
    #####: 2946:static const char* GetAnsiColorCode(GTestColor color) {
    $$$$$: 2946-block  0
    #####: 2947:  switch (color) {
    $$$$$: 2947-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2948:    case COLOR_RED:     return "1";
    $$$$$: 2948-block  0
    #####: 2949:    case COLOR_GREEN:   return "2";
    $$$$$: 2949-block  0
    #####: 2950:    case COLOR_YELLOW:  return "3";
    $$$$$: 2950-block  0
    #####: 2951:    default:            return NULL;
    $$$$$: 2951-block  0
        -: 2952:  };
        -: 2953:}
        -: 2954:
        -: 2955:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 2956:
        -: 2957:// Returns true iff Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 31%
        1: 2958:bool ShouldUseColor(bool stdout_is_tty) {
        1: 2958-block  0
        1: 2959:  const char* const gtest_color = GTEST_FLAG(color).c_str();
        1: 2959-block  0
call    0 returned 1
        -: 2960:
        1: 2961:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 2962:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2963:    // On Windows the TERM variable is usually not set, but the
        -: 2964:    // console there does support colors.
        -: 2965:    return stdout_is_tty;
        -: 2966:#else
        -: 2967:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 2968:    const char* const term = posix::GetEnv("TERM");
    $$$$$: 2968-block  0
call    0 never executed
        -: 2969:    const bool term_supports_color =
    #####: 2970:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2971:        String::CStringEquals(term, "xterm-color") ||
    $$$$$: 2971-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2972:        String::CStringEquals(term, "xterm-256color") ||
    $$$$$: 2972-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2973:        String::CStringEquals(term, "screen") ||
    $$$$$: 2973-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2974:        String::CStringEquals(term, "screen-256color") ||
    $$$$$: 2974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2975:        String::CStringEquals(term, "tmux") ||
    $$$$$: 2975-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2976:        String::CStringEquals(term, "tmux-256color") ||
    $$$$$: 2976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2977:        String::CStringEquals(term, "rxvt-unicode") ||
    $$$$$: 2977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2978:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    $$$$$: 2978-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2979:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    $$$$$: 2979-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2979-block  1
    $$$$$: 2979-block  2
    #####: 2980:        String::CStringEquals(term, "cygwin");
    $$$$$: 2980-block  0
call    0 never executed
    #####: 2981:    return stdout_is_tty && term_supports_color;
    $$$$$: 2981-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2981-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 2981-block  2
    $$$$$: 2981-block  3
    $$$$$: 2981-block  4
        -: 2982:#endif  // GTEST_OS_WINDOWS
        -: 2983:  }
        -: 2984:
        2: 2985:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 2985-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 2986:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 2986-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        3: 2987:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2987-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    $$$$$: 2987-block  1
        1: 2987-block  2
        2: 2988:      String::CStringEquals(gtest_color, "1");
        1: 2988-block  0
call    0 returned 1
        1: 2988-block  1
        -: 2989:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 2990:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 2991:  // be conservative.
        -: 2992:}
        -: 2993:
        -: 2994:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 2995:// cannot simply emit special characters and have the terminal change colors.
        -: 2996:// This routine must actually emit the characters rather than return a string
        -: 2997:// that would be colored when printed, as can be done on Linux.
function _ZN7testing8internalL13ColoredPrintfENS0_10GTestColorEPKcz called 101 returned 100% blocks executed 75%
      101: 2998:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
      101: 2998-block  0
        -: 2999:  va_list args;
      101: 3000:  va_start(args, fmt);
        -: 3001:
        -: 3002:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || GTEST_OS_ZOS || \
        -: 3003:    GTEST_OS_IOS || GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT
        -: 3004:  const bool use_color = AlwaysFalse();
        -: 3005:#else
        -: 3006:  static const bool in_color_mode =
      101: 3007:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
      101: 3007-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 100
        1: 3007-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3007-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
      101: 3008:  const bool use_color = in_color_mode && (color != COLOR_DEFAULT);
      101: 3008-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 101
    $$$$$: 3008-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3008-block  2
      101: 3008-block  3
        -: 3009:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || GTEST_OS_ZOS
        -: 3010:  // The '!= 0' comparison is necessary to satisfy MSVC 7.1.
        -: 3011:
      101: 3012:  if (!use_color) {
      101: 3012-block  0
branch  0 taken 101 (fallthrough)
branch  1 taken 0
      101: 3013:    vprintf(fmt, args);
      101: 3014:    va_end(args);
      101: 3015:    return;
      101: 3015-block  0
        -: 3016:  }
        -: 3017:
        -: 3018:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3019:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3020:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3021:
        -: 3022:  // Gets the current text color.
        -: 3023:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3024:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3025:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3026:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3027:
        -: 3028:  // We need to flush the stream buffers into the console before each
        -: 3029:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3030:  // printed but has not yet reached the console.
        -: 3031:  fflush(stdout);
        -: 3032:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3033:
        -: 3034:  vprintf(fmt, args);
        -: 3035:
        -: 3036:  fflush(stdout);
        -: 3037:  // Restores the text color.
        -: 3038:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3039:#else
    #####: 3040:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    $$$$$: 3040-block  0
call    0 never executed
    #####: 3041:  vprintf(fmt, args);
    #####: 3042:  printf("\033[m");  // Resets the terminal to default.
        -: 3043:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3044:  va_end(args);
        -: 3045:}
        -: 3046:
        -: 3047:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3048:// output to label the type parameter and value parameter for a test.
        -: 3049:static const char kTypeParamLabel[] = "TypeParam";
        -: 3050:static const char kValueParamLabel[] = "GetParam()";
        -: 3051:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 2 returned 100% blocks executed 50%
        2: 3052:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
        2: 3052-block  0
        2: 3053:  const char* const type_param = test_info.type_param();
        2: 3053-block  0
call    0 returned 2
        2: 3054:  const char* const value_param = test_info.value_param();
call    0 returned 2
        -: 3055:
        2: 3056:  if (type_param != NULL || value_param != NULL) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 3056-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 3057:    printf(", where ");
    #####: 3058:    if (type_param != NULL) {
    $$$$$: 3058-block  0
branch  0 never executed
branch  1 never executed
    #####: 3059:      printf("%s = %s", kTypeParamLabel, type_param);
    #####: 3060:      if (value_param != NULL)
    $$$$$: 3060-block  0
branch  0 never executed
branch  1 never executed
    #####: 3061:        printf(" and ");
    $$$$$: 3061-block  0
        -: 3062:    }
    #####: 3063:    if (value_param != NULL) {
    $$$$$: 3063-block  0
branch  0 never executed
branch  1 never executed
    #####: 3064:      printf("%s = %s", kValueParamLabel, value_param);
    $$$$$: 3064-block  0
        -: 3065:    }
        -: 3066:  }
        2: 3067:}
        -: 3068:
        -: 3069:// This class implements the TestEventListener interface.
        -: 3070://
        -: 3071:// Class PrettyUnitTestResultPrinter is copyable.
function _ZN7testing8internal27PrettyUnitTestResultPrinterD0Ev called 1 returned 100% blocks executed 100%
function _ZN7testing8internal27PrettyUnitTestResultPrinterD1Ev called 1 returned 100% blocks executed 100%
        4: 3072:class PrettyUnitTestResultPrinter : public TestEventListener {
        1: 3072-block  0
        1: 3072-block  1
call    0 returned 1
call    1 returned 1
        1: 3072-block  2
        1: 3072-block  3
call    2 returned 1
        -: 3073: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        2: 3074:  PrettyUnitTestResultPrinter() {}
        1: 3074-block  0
        1: 3074-block  1
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 72 returned 100% blocks executed 100%
       72: 3075:  static void PrintTestName(const char * test_case, const char * test) {
       72: 3075-block  0
       72: 3076:    printf("%s.%s", test_case, test);
       72: 3077:  }
        -: 3078:
        -: 3079:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3080:  virtual void OnTestProgramStart(const UnitTest& /*unit_test*/) {}
        1: 3080-block  0
        -: 3081:  virtual void OnTestIterationStart(const UnitTest& unit_test, int iteration);
        -: 3082:  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test);
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3083:  virtual void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) {}
        1: 3083-block  0
        -: 3084:  virtual void OnTestCaseStart(const TestCase& test_case);
        -: 3085:  virtual void OnTestStart(const TestInfo& test_info);
        -: 3086:  virtual void OnTestPartResult(const TestPartResult& result);
        -: 3087:  virtual void OnTestEnd(const TestInfo& test_info);
        -: 3088:  virtual void OnTestCaseEnd(const TestCase& test_case);
        -: 3089:  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test);
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3090:  virtual void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) {}
        1: 3090-block  0
        -: 3091:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3092:  virtual void OnTestProgramEnd(const UnitTest& /*unit_test*/) {}
        1: 3092-block  0
        -: 3093:
        -: 3094: private:
        -: 3095:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3096:};
        -: 3097:
        -: 3098:  // Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 70%
        1: 3099:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        1: 3099-block  0
        -: 3100:    const UnitTest& unit_test, int iteration) {
        1: 3101:  if (GTEST_FLAG(repeat) != 1)
        1: 3101-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3102:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    $$$$$: 3102-block  0
        -: 3103:
        1: 3104:  const char* const filter = GTEST_FLAG(filter).c_str();
        1: 3104-block  0
call    0 returned 1
        -: 3105:
        -: 3106:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3107:  // tests may be skipped.
        1: 3108:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3109:    ColoredPrintf(COLOR_YELLOW,
    #####: 3110:                  "Note: %s filter = %s\n", GTEST_NAME_, filter);
    $$$$$: 3110-block  0
call    0 never executed
        -: 3111:  }
        -: 3112:
        1: 3113:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3113-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3114:    const Int32 shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    $$$$$: 3114-block  0
call    0 never executed
    #####: 3115:    ColoredPrintf(COLOR_YELLOW,
call    0 never executed
        -: 3116:                  "Note: This is test shard %d of %s.\n",
        -: 3117:                  static_cast<int>(shard_index) + 1,
    #####: 3118:                  internal::posix::GetEnv(kTestTotalShards));
call    0 never executed
        -: 3119:  }
        -: 3120:
        1: 3121:  if (GTEST_FLAG(shuffle)) {
        1: 3121-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3122:    ColoredPrintf(COLOR_YELLOW,
    $$$$$: 3122-block  0
call    0 never executed
        -: 3123:                  "Note: Randomizing tests' orders with a seed of %d .\n",
    #####: 3124:                  unit_test.random_seed());
call    0 never executed
        -: 3125:  }
        1: 3126:  ColoredPrintf(COLOR_GREEN,  "[==========] ");
        1: 3126-block  0
call    0 returned 1
        2: 3127:  printf("Running %s from %s.\n",
call    0 returned 1
        1: 3127-block  0
call    1 returned 1
        2: 3128:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3128-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
        2: 3129:         FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    %%%%%: 3129-block  0
call    3 never executed
        1: 3130:  fflush(stdout);
call    0 returned 1
        1: 3131:}
        -: 3132:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3133:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        1: 3133-block  0
        -: 3134:    const UnitTest& /*unit_test*/) {
        1: 3135:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
        1: 3135-block  0
call    0 returned 1
        1: 3136:  printf("Global test environment set-up.\n");
        1: 3137:  fflush(stdout);
call    0 returned 1
        1: 3138:}
        -: 3139:
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_8TestCaseE called 11 returned 100% blocks executed 75%
       11: 3140:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
       11: 3140-block  0
        -: 3141:  const std::string counts =
       22: 3142:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
       11: 3142-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 3142-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 11
    %%%%%: 3142-block  2
call    7 never executed
       11: 3143:  ColoredPrintf(COLOR_GREEN, "[----------] ");
       11: 3143-block  0
call    0 returned 11
       11: 3144:  printf("%s from %s", counts.c_str(), test_case.name());
call    0 returned 11
call    1 returned 11
       11: 3145:  if (test_case.type_param() == NULL) {
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 3145-block  0
branch  3 taken 11 (fallthrough)
branch  4 taken 0
       11: 3146:    printf("\n");
       11: 3146-block  0
        -: 3147:  } else {
    #####: 3148:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    $$$$$: 3148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3148-block  1
        -: 3149:  }
       11: 3150:  fflush(stdout);
       11: 3150-block  0
call    0 returned 11
       11: 3151:}
        -: 3152:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 36 returned 100% blocks executed 100%
       36: 3153:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       36: 3153-block  0
       36: 3154:  ColoredPrintf(COLOR_GREEN,  "[ RUN      ] ");
       36: 3154-block  0
call    0 returned 36
       36: 3155:  PrintTestName(test_info.test_case_name(), test_info.name());
call    0 returned 36
call    1 returned 36
call    2 returned 36
       36: 3156:  printf("\n");
       36: 3157:  fflush(stdout);
call    0 returned 36
       36: 3158:}
        -: 3159:
        -: 3160:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 83%
        1: 3161:void PrettyUnitTestResultPrinter::OnTestPartResult(
        1: 3161-block  0
        -: 3162:    const TestPartResult& result) {
        -: 3163:  // If the test part succeeded, we don't need to do anything.
        1: 3164:  if (result.type() == TestPartResult::kSuccess)
        1: 3164-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3165:    return;
    $$$$$: 3165-block  0
        -: 3166:
        -: 3167:  // Print failure message from the assertion (e.g. expected this and got that).
        1: 3168:  PrintTestPartResult(result);
        1: 3168-block  0
call    0 returned 1
        1: 3169:  fflush(stdout);
call    0 returned 1
        -: 3170:}
        -: 3171:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 36 returned 100% blocks executed 96%
       36: 3172:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       36: 3172-block  0
       36: 3173:  if (test_info.result()->Passed()) {
       36: 3173-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 35 (fallthrough)
branch  3 taken 1
       35: 3174:    ColoredPrintf(COLOR_GREEN, "[       OK ] ");
       35: 3174-block  0
call    0 returned 35
        -: 3175:  } else {
        1: 3176:    ColoredPrintf(COLOR_RED, "[  FAILED  ] ");
        1: 3176-block  0
call    0 returned 1
        -: 3177:  }
       36: 3178:  PrintTestName(test_info.test_case_name(), test_info.name());
       36: 3178-block  0
call    0 returned 36
call    1 returned 36
call    2 returned 36
       36: 3179:  if (test_info.result()->Failed())
call    0 returned 36
call    1 returned 36
branch  2 taken 1 (fallthrough)
branch  3 taken 35
        1: 3180:    PrintFullTestCommentIfPresent(test_info);
        1: 3180-block  0
call    0 returned 1
        -: 3181:
       36: 3182:  if (GTEST_FLAG(print_time)) {
       36: 3182-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 3183:    printf(" (%s ms)\n", internal::StreamableToString(
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36: 3183-block  0
call    3 returned 36
call    4 returned 36
       72: 3184:           test_info.result()->elapsed_time()).c_str());
       36: 3184-block  0
call    0 returned 36
call    1 returned 36
        -: 3185:  } else {
    #####: 3186:    printf("\n");
    $$$$$: 3186-block  0
        -: 3187:  }
       36: 3188:  fflush(stdout);
       36: 3188-block  0
call    0 returned 36
       36: 3189:}
        -: 3190:
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_8TestCaseE called 11 returned 100% blocks executed 79%
       11: 3191:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       11: 3191-block  0
       11: 3192:  if (!GTEST_FLAG(print_time)) return;
       11: 3192-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    $$$$$: 3192-block  1
        -: 3193:
        -: 3194:  const std::string counts =
       22: 3195:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
       11: 3195-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 3195-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 11
       11: 3195-block  2
    %%%%%: 3195-block  3
call    7 never executed
       11: 3196:  ColoredPrintf(COLOR_GREEN, "[----------] ");
       11: 3196-block  0
call    0 returned 11
       11: 3197:  printf("%s from %s (%s ms total)\n\n",
       11: 3197-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
        -: 3198:         counts.c_str(), test_case.name(),
       22: 3199:         internal::StreamableToString(test_case.elapsed_time()).c_str());
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 11
    %%%%%: 3199-block  0
       11: 3200:  fflush(stdout);
call    0 returned 11
        -: 3201:}
        -: 3202:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3203:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        1: 3203-block  0
        -: 3204:    const UnitTest& /*unit_test*/) {
        1: 3205:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
        1: 3205-block  0
call    0 returned 1
        1: 3206:  printf("Global test environment tear-down\n");
        1: 3207:  fflush(stdout);
call    0 returned 1
        1: 3208:}
        -: 3209:
        -: 3210:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 1 returned 100% blocks executed 97%
        1: 3211:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
        1: 3211-block  0
        1: 3212:  const int failed_test_count = unit_test.failed_test_count();
        1: 3212-block  0
call    0 returned 1
        1: 3213:  if (failed_test_count == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3214:    return;
    $$$$$: 3214-block  0
        -: 3215:  }
        -: 3216:
       12: 3217:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
        1: 3217-block  0
       12: 3217-block  1
call    0 returned 12
branch  1 taken 11 (fallthrough)
branch  2 taken 1
       11: 3217-block  2
       11: 3218:    const TestCase& test_case = *unit_test.GetTestCase(i);
       11: 3218-block  0
call    0 returned 11
       11: 3219:    if (!test_case.should_run() || (test_case.failed_test_count() == 0)) {
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0
       11: 3219-block  0
call    3 returned 11
branch  4 taken 10 (fallthrough)
branch  5 taken 1
       10: 3219-block  1
        1: 3219-block  2
       11: 3219-block  3
branch  6 taken 10 (fallthrough)
branch  7 taken 1
       10: 3220:      continue;
       10: 3220-block  0
        -: 3221:    }
       18: 3222:    for (int j = 0; j < test_case.total_test_count(); ++j) {
        1: 3222-block  0
       18: 3222-block  1
call    0 returned 18
branch  1 taken 17 (fallthrough)
branch  2 taken 1
       17: 3222-block  2
       17: 3223:      const TestInfo& test_info = *test_case.GetTestInfo(j);
       17: 3223-block  0
call    0 returned 17
       17: 3224:      if (!test_info.should_run() || test_info.result()->Passed()) {
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0
       17: 3224-block  0
call    3 returned 17
call    4 returned 17
branch  5 taken 16 (fallthrough)
branch  6 taken 1
       16: 3224-block  1
        1: 3224-block  2
       17: 3224-block  3
branch  7 taken 16 (fallthrough)
branch  8 taken 1
       16: 3225:        continue;
       16: 3225-block  0
        -: 3226:      }
        1: 3227:      ColoredPrintf(COLOR_RED, "[  FAILED  ] ");
        1: 3227-block  0
call    0 returned 1
        1: 3228:      printf("%s.%s", test_case.name(), test_info.name());
call    0 returned 1
call    1 returned 1
        1: 3229:      PrintFullTestCommentIfPresent(test_info);
call    0 returned 1
        1: 3230:      printf("\n");
        -: 3231:    }
        -: 3232:  }
        -: 3233:}
        -: 3234:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 79%
        1: 3235:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        1: 3235-block  0
        -: 3236:                                                     int /*iteration*/) {
        1: 3237:  ColoredPrintf(COLOR_GREEN,  "[==========] ");
        1: 3237-block  0
call    0 returned 1
        2: 3238:  printf("%s from %s ran.",
call    0 returned 1
        1: 3238-block  0
call    1 returned 1
        2: 3239:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3239-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
        2: 3240:         FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    %%%%%: 3240-block  0
call    3 never executed
call    4 never executed
        1: 3241:  if (GTEST_FLAG(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3242:    printf(" (%s ms total)",
        1: 3242-block  0
call    0 returned 1
        2: 3243:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3243-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
        -: 3244:  }
        1: 3245:  printf("\n");
        1: 3246:  ColoredPrintf(COLOR_GREEN,  "[  PASSED  ] ");
        1: 3246-block  0
call    0 returned 1
        1: 3247:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -: 3248:
        1: 3249:  int num_failures = unit_test.failed_test_count();
call    0 returned 1
        1: 3250:  if (!unit_test.Passed()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3251:    const int failed_test_count = unit_test.failed_test_count();
        1: 3251-block  0
call    0 returned 1
        1: 3252:    ColoredPrintf(COLOR_RED,  "[  FAILED  ] ");
call    0 returned 1
        1: 3253:    printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 3254:    PrintFailedTests(unit_test);
call    0 returned 1
        1: 3255:    printf("\n%2d FAILED %s\n", num_failures,
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3255-block  0
    $$$$$: 3255-block  1
        1: 3256:                        num_failures == 1 ? "TEST" : "TESTS");
        1: 3256-block  0
        -: 3257:  }
        -: 3258:
        1: 3259:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3259-block  0
call    0 returned 1
        1: 3260:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 3260-block  0
branch  2 never executed
branch  3 never executed
    #####: 3261:    if (!num_failures) {
    $$$$$: 3261-block  0
branch  0 never executed
branch  1 never executed
    #####: 3262:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    $$$$$: 3262-block  0
        -: 3263:    }
    #####: 3264:    ColoredPrintf(COLOR_YELLOW,
    $$$$$: 3264-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3264-block  1
    $$$$$: 3264-block  2
        -: 3265:                  "  YOU HAVE %d DISABLED %s\n\n",
        -: 3266:                  num_disabled,
    #####: 3267:                  num_disabled == 1 ? "TEST" : "TESTS");
    $$$$$: 3267-block  0
call    0 never executed
        -: 3268:  }
        -: 3269:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3270:  fflush(stdout);
        1: 3270-block  0
call    0 returned 1
        1: 3271:}
        -: 3272:
        -: 3273:// End PrettyUnitTestResultPrinter
        -: 3274:
        -: 3275:// class TestEventRepeater
        -: 3276://
        -: 3277:// This class forwards events to other event listeners.
        -: 3278:class TestEventRepeater : public TestEventListener {
        -: 3279: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        2: 3280:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3280-block  0
        1: 3280-block  1
call    0 returned 1
call    1 returned 1
        -: 3281:  virtual ~TestEventRepeater();
        -: 3282:  void Append(TestEventListener *listener);
        -: 3283:  TestEventListener* Release(TestEventListener* listener);
        -: 3284:
        -: 3285:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3286:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3287:  bool forwarding_enabled() const { return forwarding_enabled_; }
    $$$$$: 3287-block  0
    $$$$$: 3287-block  1
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3288:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
    $$$$$: 3288-block  0
        -: 3289:
        -: 3290:  virtual void OnTestProgramStart(const UnitTest& unit_test);
        -: 3291:  virtual void OnTestIterationStart(const UnitTest& unit_test, int iteration);
        -: 3292:  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test);
        -: 3293:  virtual void OnEnvironmentsSetUpEnd(const UnitTest& unit_test);
        -: 3294:  virtual void OnTestCaseStart(const TestCase& test_case);
        -: 3295:  virtual void OnTestStart(const TestInfo& test_info);
        -: 3296:  virtual void OnTestPartResult(const TestPartResult& result);
        -: 3297:  virtual void OnTestEnd(const TestInfo& test_info);
        -: 3298:  virtual void OnTestCaseEnd(const TestCase& test_case);
        -: 3299:  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test);
        -: 3300:  virtual void OnEnvironmentsTearDownEnd(const UnitTest& unit_test);
        -: 3301:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 3302:  virtual void OnTestProgramEnd(const UnitTest& unit_test);
        -: 3303:
        -: 3304: private:
        -: 3305:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3306:  // in death test child processes.
        -: 3307:  bool forwarding_enabled_;
        -: 3308:  // The list of listeners that receive events.
        -: 3309:  std::vector<TestEventListener*> listeners_;
        -: 3310:
        -: 3311:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3312:};
        -: 3313:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        3: 3314:TestEventRepeater::~TestEventRepeater() {
        1: 3314-block  0
        1: 3314-block  1
call    0 returned 1
call    1 returned 1
        1: 3315:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3315-block  0
call    0 returned 1
        1: 3316:}
        1: 3316-block  0
call    0 returned 1
call    1 returned 1
        -: 3317:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3318:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 3318-block  0
        1: 3319:  listeners_.push_back(listener);
        1: 3319-block  0
call    0 returned 1
        1: 3320:}
        -: 3321:
        -: 3322:// TODO(vladl@google.com): Factor the search functionality into Vector::Find.
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3323:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
        1: 3323-block  0
        1: 3324:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3324-block  0
        1: 3324-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$: 3324-block  2
    #####: 3325:    if (listeners_[i] == listener) {
    $$$$$: 3325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3326:      listeners_.erase(listeners_.begin() + i);
    $$$$$: 3326-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3326-block  1
    %%%%%: 3326-block  2
    #####: 3327:      return listener;
    $$$$$: 3327-block  0
        -: 3328:    }
        -: 3329:  }
        -: 3330:
        1: 3331:  return NULL;
        1: 3331-block  0
        1: 3331-block  1
        -: 3332:}
        -: 3333:
        -: 3334:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3335:// This defines a member that forwards the call to all listeners.
        -: 3336:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 3337:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3338:  if (forwarding_enabled_) { \
        -: 3339:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 3340:      listeners_[i]->Name(parameter); \
        -: 3341:    } \
        -: 3342:  } \
        -: 3343:}
        -: 3344:// This defines a member that forwards the call to all listeners in reverse
        -: 3345:// order.
        -: 3346:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type) \
        -: 3347:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3348:  if (forwarding_enabled_) { \
        -: 3349:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) { \
        -: 3350:      listeners_[i]->Name(parameter); \
        -: 3351:    } \
        -: 3352:  } \
        -: 3353:}
        -: 3354:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        3: 3355:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3355-block  0
        1: 3355-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3355-block  2
        2: 3355-block  3
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3355-block  4
call    5 returned 1
call    6 returned 1
        1: 3355-block  5
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        3: 3356:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3356-block  0
        1: 3356-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3356-block  2
        2: 3356-block  3
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3356-block  4
call    5 returned 1
call    6 returned 1
        1: 3356-block  5
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_8TestCaseE called 11 returned 100% blocks executed 100%
       33: 3357:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestCase)
       11: 3357-block  0
       11: 3357-block  1
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 3357-block  2
       22: 3357-block  3
call    2 returned 22
branch  3 taken 11 (fallthrough)
branch  4 taken 11
       11: 3357-block  4
call    5 returned 11
call    6 returned 11
       11: 3357-block  5
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 36 returned 100% blocks executed 100%
      108: 3358:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       36: 3358-block  0
       36: 3358-block  1
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 3358-block  2
       72: 3358-block  3
call    2 returned 72
branch  3 taken 36 (fallthrough)
branch  4 taken 36
       36: 3358-block  4
call    5 returned 36
call    6 returned 36
       36: 3358-block  5
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        3: 3359:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
        1: 3359-block  0
        1: 3359-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3359-block  2
        2: 3359-block  3
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3359-block  4
call    5 returned 1
call    6 returned 1
        1: 3359-block  5
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        3: 3360:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3360-block  0
        1: 3360-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3360-block  2
        2: 3360-block  3
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3360-block  4
call    5 returned 1
call    6 returned 1
        1: 3360-block  5
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        3: 3361:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3361-block  0
        1: 3361-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3361-block  2
call    2 returned 1
        2: 3361-block  3
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3361-block  4
call    5 returned 1
call    6 returned 1
        1: 3361-block  5
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        3: 3362:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3362-block  0
        1: 3362-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3362-block  2
call    2 returned 1
        2: 3362-block  3
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3362-block  4
call    5 returned 1
call    6 returned 1
        1: 3362-block  5
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 36 returned 100% blocks executed 100%
      108: 3363:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       36: 3363-block  0
       36: 3363-block  1
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 3363-block  2
call    2 returned 36
       72: 3363-block  3
branch  3 taken 36 (fallthrough)
branch  4 taken 36
       36: 3363-block  4
call    5 returned 36
call    6 returned 36
       36: 3363-block  5
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_8TestCaseE called 11 returned 100% blocks executed 100%
       33: 3364:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestCase)
       11: 3364-block  0
       11: 3364-block  1
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 3364-block  2
call    2 returned 11
       22: 3364-block  3
branch  3 taken 11 (fallthrough)
branch  4 taken 11
       11: 3364-block  4
call    5 returned 11
call    6 returned 11
       11: 3364-block  5
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        3: 3365:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3365-block  0
        1: 3365-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3365-block  2
call    2 returned 1
        2: 3365-block  3
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3365-block  4
call    5 returned 1
call    6 returned 1
        1: 3365-block  5
        -: 3366:
        -: 3367:#undef GTEST_REPEATER_METHOD_
        -: 3368:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3369:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3370:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        1: 3370-block  0
        -: 3371:                                             int iteration) {
        1: 3372:  if (forwarding_enabled_) {
        1: 3372-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3373:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3373-block  0
        2: 3373-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3373-block  2
        1: 3374:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3374-block  0
call    0 returned 1
call    1 returned 1
        -: 3375:    }
        -: 3376:  }
        1: 3377:}
        -: 3378:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3379:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        1: 3379-block  0
        -: 3380:                                           int iteration) {
        1: 3381:  if (forwarding_enabled_) {
        1: 3381-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3382:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) {
        1: 3382-block  0
call    0 returned 1
        2: 3382-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3382-block  2
        1: 3383:      listeners_[i]->OnTestIterationEnd(unit_test, iteration);
        1: 3383-block  0
call    0 returned 1
call    1 returned 1
        -: 3384:    }
        -: 3385:  }
        1: 3386:}
        -: 3387:
        -: 3388:// End TestEventRepeater
        -: 3389:
        -: 3390:// This class generates an XML output file.
function _ZN7testing8internal24XmlUnitTestResultPrinterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal24XmlUnitTestResultPrinterD1Ev called 0 returned 0% blocks executed 0%
    #####: 3391:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
    $$$$$: 3391-block  0
    $$$$$: 3391-block  1
call    0 never executed
call    1 never executed
    $$$$$: 3391-block  2
    $$$$$: 3391-block  3
call    2 never executed
call    3 never executed
        -: 3392: public:
        -: 3393:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3394:
        -: 3395:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 3396:
        -: 3397: private:
        -: 3398:  // Is c a whitespace character that is normalized to a space character
        -: 3399:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEc called 0 returned 0% blocks executed 0%
    #####: 3400:  static bool IsNormalizableWhitespace(char c) {
    $$$$$: 3400-block  0
    #####: 3401:    return c == 0x9 || c == 0xA || c == 0xD;
    $$$$$: 3401-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3401-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3401-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 3401-block  3
    $$$$$: 3401-block  4
    $$$$$: 3401-block  5
        -: 3402:  }
        -: 3403:
        -: 3404:  // May c appear in a well-formed XML document?
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEc called 0 returned 0% blocks executed 0%
    #####: 3405:  static bool IsValidXmlCharacter(char c) {
    $$$$$: 3405-block  0
    #####: 3406:    return IsNormalizableWhitespace(c) || c >= 0x20;
    $$$$$: 3406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3406-block  1
branch  3 never executed
branch  4 never executed
    $$$$$: 3406-block  2
    $$$$$: 3406-block  3
    $$$$$: 3406-block  4
        -: 3407:  }
        -: 3408:
        -: 3409:  // Returns an XML-escaped copy of the input string str.  If
        -: 3410:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3411:  // value, and normalizable whitespace is preserved by replacing it
        -: 3412:  // with character references.
        -: 3413:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3414:
        -: 3415:  // Returns the given string with all characters invalid in XML removed.
        -: 3416:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3417:
        -: 3418:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3419:  static std::string EscapeXmlAttribute(const std::string& str) {
    $$$$$: 3419-block  0
    #####: 3420:    return EscapeXml(str, true);
    $$$$$: 3420-block  0
call    0 never executed
        -: 3421:  }
        -: 3422:
        -: 3423:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3424:  static std::string EscapeXmlText(const char* str) {
        -: 3425:    return EscapeXml(str, false);
        -: 3426:  }
        -: 3427:
        -: 3428:  // Verifies that the given attribute belongs to the given element and
        -: 3429:  // streams the attribute as XML.
        -: 3430:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3431:                                 const std::string& element_name,
        -: 3432:                                 const std::string& name,
        -: 3433:                                 const std::string& value);
        -: 3434:
        -: 3435:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3436:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3437:
        -: 3438:  // Streams an XML representation of a TestInfo object.
        -: 3439:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3440:                                const char* test_case_name,
        -: 3441:                                const TestInfo& test_info);
        -: 3442:
        -: 3443:  // Prints an XML representation of a TestCase object
        -: 3444:  static void PrintXmlTestCase(::std::ostream* stream,
        -: 3445:                               const TestCase& test_case);
        -: 3446:
        -: 3447:  // Prints an XML summary of unit_test to output stream out.
        -: 3448:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3449:                               const UnitTest& unit_test);
        -: 3450:
        -: 3451:  // Produces a string representing the test properties in a result as space
        -: 3452:  // delimited XML attributes based on the property key="value" pairs.
        -: 3453:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3454:  // to delimit this attribute from prior attributes.
        -: 3455:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3456:
        -: 3457:  // Streams an XML representation of the test properties of a TestResult
        -: 3458:  // object.
        -: 3459:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3460:                                      const TestResult& result);
        -: 3461:
        -: 3462:  // The output file.
        -: 3463:  const std::string output_file_;
        -: 3464:
        -: 3465:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 3466:};
        -: 3467:
        -: 3468:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3469:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    $$$$$: 3469-block  0
    #####: 3470:    : output_file_(output_file) {
    $$$$$: 3470-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3470-block  1
call    5 never executed
    %%%%%: 3470-block  2
call    6 never executed
    %%%%%: 3470-block  3
call    7 never executed
    %%%%%: 3470-block  4
call    8 never executed
    #####: 3471:  if (output_file_.c_str() == NULL || output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3471-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3471-block  1
    $$$$$: 3471-block  2
    $$$$$: 3471-block  3
branch  6 never executed
branch  7 never executed
    #####: 3472:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    $$$$$: 3472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3472-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3472-block  2
call    7 never executed
    %%%%%: 3472-block  3
call    8 never executed
        -: 3473:  }
    #####: 3474:}
    $$$$$: 3474-block  0
        -: 3475:
        -: 3476:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3477:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
    $$$$$: 3477-block  0
        -: 3478:                                                  int /*iteration*/) {
    #####: 3479:  FILE* xmlout = NULL;
    #####: 3480:  FilePath output_file(output_file_);
    $$$$$: 3480-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 3480-block  1
call    4 never executed
    #####: 3481:  FilePath output_dir(output_file.RemoveFileName());
    $$$$$: 3481-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 3481-block  1
call    4 never executed
        -: 3482:
    #####: 3483:  if (output_dir.CreateDirectoriesRecursively()) {
    $$$$$: 3483-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3483-block  1
branch  3 never executed
branch  4 never executed
    #####: 3484:    xmlout = posix::FOpen(output_file_.c_str(), "w");
    $$$$$: 3484-block  0
call    0 never executed
call    1 never executed
        -: 3485:  }
    #####: 3486:  if (xmlout == NULL) {
    $$$$$: 3486-block  0
branch  0 never executed
branch  1 never executed
        -: 3487:    // TODO(wan): report the reason of the failure.
        -: 3488:    //
        -: 3489:    // We don't do it for now as:
        -: 3490:    //
        -: 3491:    //   1. There is no urgent need for it.
        -: 3492:    //   2. It's a bit involved to make the errno variable thread-safe on
        -: 3493:    //      all three operating systems (Linux, Windows, and Mac OS).
        -: 3494:    //   3. To interpret the meaning of errno in a thread-safe way,
        -: 3495:    //      we need the strerror_r() function, which is not available on
        -: 3496:    //      Windows.
        -: 3497:
    #####: 3498:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file_ << "\"";
    $$$$$: 3498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3498-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3498-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 3498-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 3498-block  4
call   13 never executed
    %%%%%: 3498-block  5
call   14 never executed
        -: 3499:  }
    #####: 3500:  std::stringstream stream;
    $$$$$: 3500-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    %%%%%: 3500-block  1
call    5 never executed
    #####: 3501:  PrintXmlUnitTest(&stream, unit_test);
    $$$$$: 3501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3502:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    $$$$$: 3502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3502-block  1
call    3 never executed
call    4 never executed
    #####: 3503:  fclose(xmlout);
call    0 never executed
    #####: 3504:}
        -: 3505:
        -: 3506:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 3507:// is true, the text is meant to appear as an attribute value, and
        -: 3508:// normalizable whitespace is preserved by replacing it with character
        -: 3509:// references.
        -: 3510://
        -: 3511:// Invalid XML characters in str, if any, are stripped from the output.
        -: 3512:// It is expected that most, if not all, of the text processed by this
        -: 3513:// module will consist of ordinary English text.
        -: 3514:// If this module is ever modified to produce version 1.1 XML output,
        -: 3515:// most invalid characters can be retained using character references.
        -: 3516:// TODO(wan): It might be nice to have a minimally invasive, human-readable
        -: 3517:// escaping scheme for invalid characters, rather than dropping them.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 3518:std::string XmlUnitTestResultPrinter::EscapeXml(
    $$$$$: 3518-block  0
        -: 3519:    const std::string& str, bool is_attribute) {
    #####: 3520:  Message m;
    $$$$$: 3520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3520-block  1
call    3 never executed
    %%%%%: 3520-block  2
call    4 never executed
        -: 3521:
    #####: 3522:  for (size_t i = 0; i < str.size(); ++i) {
    $$$$$: 3522-block  0
    $$$$$: 3522-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3522-block  2
    #####: 3523:    const char ch = str[i];
    $$$$$: 3523-block  0
call    0 never executed
    #####: 3524:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3525:      case '<':
    #####: 3526:        m << "&lt;";
    $$$$$: 3526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3527:        break;
    $$$$$: 3527-block  0
        -: 3528:      case '>':
    #####: 3529:        m << "&gt;";
    $$$$$: 3529-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3530:        break;
    $$$$$: 3530-block  0
        -: 3531:      case '&':
    #####: 3532:        m << "&amp;";
    $$$$$: 3532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3533:        break;
    $$$$$: 3533-block  0
        -: 3534:      case '\'':
    #####: 3535:        if (is_attribute)
    $$$$$: 3535-block  0
branch  0 never executed
branch  1 never executed
    #####: 3536:          m << "&apos;";
    $$$$$: 3536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3536-block  1
        -: 3537:        else
    #####: 3538:          m << '\'';
    $$$$$: 3538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3538-block  1
    %%%%%: 3538-block  2
    #####: 3539:        break;
    $$$$$: 3539-block  0
        -: 3540:      case '"':
    #####: 3541:        if (is_attribute)
    $$$$$: 3541-block  0
branch  0 never executed
branch  1 never executed
    #####: 3542:          m << "&quot;";
    $$$$$: 3542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3542-block  1
        -: 3543:        else
    #####: 3544:          m << '"';
    $$$$$: 3544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3544-block  1
    %%%%%: 3544-block  2
    #####: 3545:        break;
    $$$$$: 3545-block  0
        -: 3546:      default:
    #####: 3547:        if (IsValidXmlCharacter(ch)) {
    $$$$$: 3547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3548:          if (is_attribute && IsNormalizableWhitespace(ch))
    $$$$$: 3548-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3548-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3548-block  2
    $$$$$: 3548-block  3
    $$$$$: 3548-block  4
branch  5 never executed
branch  6 never executed
    #####: 3549:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    $$$$$: 3549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3549-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3549-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3549-block  3
call    9 never executed
    %%%%%: 3549-block  4
call   10 never executed
    %%%%%: 3549-block  5
    #####: 3550:              << ";";
    $$$$$: 3550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3551:          else
    #####: 3552:            m << ch;
    $$$$$: 3552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3552-block  1
        -: 3553:        }
    #####: 3554:        break;
    $$$$$: 3554-block  0
        -: 3555:    }
        -: 3556:  }
        -: 3557:
    #####: 3558:  return m.GetString();
    $$$$$: 3558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3558-block  1
    $$$$$: 3558-block  2
        -: 3559:}
        -: 3560:
        -: 3561:// Returns the given string with all characters invalid in XML removed.
        -: 3562:// Currently invalid characters are dropped from the string. An
        -: 3563:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3564:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
    $$$$$: 3564-block  0
        -: 3565:    const std::string& str) {
    #####: 3566:  std::string output;
    $$$$$: 3566-block  0
call    0 never executed
    #####: 3567:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3568:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    $$$$$: 3568-block  0
call    0 never executed
    $$$$$: 3568-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3568-block  2
call    5 never executed
    #####: 3569:    if (IsValidXmlCharacter(*it))
    $$$$$: 3569-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3570:      output.push_back(*it);
    $$$$$: 3570-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3570-block  1
        -: 3571:
    #####: 3572:  return output;
    $$$$$: 3572-block  0
    $$$$$: 3572-block  1
    %%%%%: 3572-block  2
    %%%%%: 3572-block  3
call    0 never executed
        -: 3573:}
        -: 3574:
        -: 3575:// The following routines generate an XML representation of a UnitTest
        -: 3576:// object.
        -: 3577://
        -: 3578:// This is how Google Test concepts map to the DTD:
        -: 3579://
        -: 3580:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 3581://   <testsuite name="testcase-name">  <-- corresponds to a TestCase object
        -: 3582://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 3583://       <failure message="...">...</failure>
        -: 3584://       <failure message="...">...</failure>
        -: 3585://       <failure message="...">...</failure>
        -: 3586://                                     <-- individual assertion failures
        -: 3587://     </testcase>
        -: 3588://   </testsuite>
        -: 3589:// </testsuites>
        -: 3590:
        -: 3591:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 3592:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    $$$$$: 3592-block  0
    #####: 3593:  ::std::stringstream ss;
    $$$$$: 3593-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3593-block  1
call    4 never executed
    %%%%%: 3593-block  2
call    5 never executed
    #####: 3594:  ss << (static_cast<double>(ms) * 1e-3);
    $$$$$: 3594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3595:  return ss.str();
    $$$$$: 3595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3595-block  1
    $$$$$: 3595-block  2
        -: 3596:}
        -: 3597:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 3598:static bool PortableLocaltime(time_t seconds, struct tm* out) {
    $$$$$: 3598-block  0
        -: 3599:#if defined(_MSC_VER)
        -: 3600:  return localtime_s(out, &seconds) == 0;
        -: 3601:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 3602:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 3603:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 3604:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    $$$$$: 3604-block  0
call    0 never executed
    #####: 3605:  if (tm_ptr == NULL)
branch  0 never executed
branch  1 never executed
    #####: 3606:    return false;
    $$$$$: 3606-block  0
    #####: 3607:  *out = *tm_ptr;
    #####: 3608:  return true;
    $$$$$: 3608-block  0
        -: 3609:#else
        -: 3610:  return localtime_r(&seconds, out) != NULL;
        -: 3611:#endif
        -: 3612:}
        -: 3613:
        -: 3614:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 3615:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 3616:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
    $$$$$: 3616-block  0
        -: 3617:  struct tm time_struct;
    #####: 3618:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    $$$$$: 3618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3619:    return "";
    $$$$$: 3619-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3619-block  1
call    4 never executed
    %%%%%: 3619-block  2
call    5 never executed
        -: 3620:  // YYYY-MM-DDThh:mm:ss
    #####: 3621:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    $$$$$: 3621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3621-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3621-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3621-block  3
call   12 never executed
    %%%%%: 3621-block  4
call   13 never executed
    %%%%%: 3621-block  5
call   14 never executed
    %%%%%: 3621-block  6
    #####: 3622:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    $$$$$: 3622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3622-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3622-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3622-block  3
call   12 never executed
    %%%%%: 3622-block  4
call   13 never executed
    %%%%%: 3622-block  5
call   14 never executed
    #####: 3623:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    $$$$$: 3623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3623-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3623-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3623-block  3
call   12 never executed
    %%%%%: 3623-block  4
call   13 never executed
    %%%%%: 3623-block  5
call   14 never executed
    #####: 3624:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    $$$$$: 3624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3624-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3624-block  3
call   12 never executed
    %%%%%: 3624-block  4
call   13 never executed
    %%%%%: 3624-block  5
call   14 never executed
    #####: 3625:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    $$$$$: 3625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3625-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3625-block  2
call    6 never executed
call    7 never executed
    %%%%%: 3625-block  3
call    8 never executed
    %%%%%: 3625-block  4
call    9 never executed
    #####: 3626:      String::FormatIntWidth2(time_struct.tm_sec);
    $$$$$: 3626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3626-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3626-block  2
call    6 never executed
    $$$$$: 3626-block  3
    $$$$$: 3626-block  4
    %%%%%: 3626-block  5
call    7 never executed
        -: 3627:}
        -: 3628:
        -: 3629:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 3630:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
    $$$$$: 3630-block  0
        -: 3631:                                                     const char* data) {
    #####: 3632:  const char* segment = data;
    #####: 3633:  *stream << "<![CDATA[";
    $$$$$: 3633-block  0
call    0 never executed
        -: 3634:  for (;;) {
    #####: 3635:    const char* const next_segment = strstr(segment, "]]>");
    #####: 3636:    if (next_segment != NULL) {
    $$$$$: 3636-block  0
branch  0 never executed
branch  1 never executed
        -: 3637:      stream->write(
    #####: 3638:          segment, static_cast<std::streamsize>(next_segment - segment));
    $$$$$: 3638-block  0
call    0 never executed
    #####: 3639:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 3640:      segment = next_segment + strlen("]]>");
        -: 3641:    } else {
    #####: 3642:      *stream << segment;
    $$$$$: 3642-block  0
call    0 never executed
    #####: 3643:      break;
        -: 3644:    }
    #####: 3645:  }
    $$$$$: 3645-block  0
    #####: 3646:  *stream << "]]>";
    $$$$$: 3646-block  0
call    0 never executed
    #####: 3647:}
        -: 3648:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 3649:void XmlUnitTestResultPrinter::OutputXmlAttribute(
    $$$$$: 3649-block  0
        -: 3650:    std::ostream* stream,
        -: 3651:    const std::string& element_name,
        -: 3652:    const std::string& name,
        -: 3653:    const std::string& value) {
        -: 3654:  const std::vector<std::string>& allowed_names =
    #####: 3655:      GetReservedAttributesForElement(element_name);
    $$$$$: 3655-block  0
call    0 never executed
call    1 never executed
    %%%%%: 3655-block  1
call    2 never executed
        -: 3656:
    #####: 3657:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3657-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 3657-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 3657-block  2
call   13 never executed
    $$$$$: 3657-block  3
call   14 never executed
    %%%%%: 3657-block  4
    %%%%%: 3657-block  5
call   15 never executed
        -: 3658:                   allowed_names.end())
        -: 3659:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 3660:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3660-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3660-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3660-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3660-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 3660-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 3661:
    #####: 3662:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    $$$$$: 3662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3662-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3662-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3662-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3662-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 3662-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 3662-block  6
call   18 never executed
    %%%%%: 3662-block  7
call   19 never executed
    #####: 3663:}
        -: 3664:
        -: 3665:// Prints an XML representation of a TestInfo object.
        -: 3666:// TODO(wan): There is also value in printing properties with the plain printer.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3667:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
    $$$$$: 3667-block  0
        -: 3668:                                                 const char* test_case_name,
        -: 3669:                                                 const TestInfo& test_info) {
    #####: 3670:  const TestResult& result = *test_info.result();
    $$$$$: 3670-block  0
call    0 never executed
    #####: 3671:  const std::string kTestcase = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3671-block  0
call    4 never executed
    $$$$$: 3671-block  1
    $$$$$: 3671-block  2
    $$$$$: 3671-block  3
    $$$$$: 3671-block  4
    %%%%%: 3671-block  5
call    5 never executed
    %%%%%: 3671-block  6
call    6 never executed
        -: 3672:
    #####: 3673:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3674:    return;
    $$$$$: 3674-block  0
        -: 3675:  }
        -: 3676:
    #####: 3677:  *stream << "    <testcase";
    $$$$$: 3677-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3678:  OutputXmlAttribute(stream, kTestcase, "name", test_info.name());
    $$$$$: 3678-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3678-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3678-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3678-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%: 3678-block  4
call   16 never executed
    %%%%%: 3678-block  5
call   17 never executed
    %%%%%: 3678-block  6
call   18 never executed
    %%%%%: 3678-block  7
call   19 never executed
        -: 3679:
    #####: 3680:  if (test_info.value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3680-block  0
branch  3 never executed
branch  4 never executed
    #####: 3681:    OutputXmlAttribute(stream, kTestcase, "value_param",
    $$$$$: 3681-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3681-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3681-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3681-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 3681-block  4
call   15 never executed
    %%%%%: 3681-block  5
call   16 never executed
    %%%%%: 3681-block  6
call   17 never executed
    %%%%%: 3681-block  7
call   18 never executed
    #####: 3682:                       test_info.value_param());
    $$$$$: 3682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3683:  }
    #####: 3684:  if (test_info.type_param() != NULL) {
    $$$$$: 3684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3684-block  1
branch  3 never executed
branch  4 never executed
    #####: 3685:    OutputXmlAttribute(stream, kTestcase, "type_param", test_info.type_param());
    $$$$$: 3685-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3685-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3685-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3685-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 3685-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    %%%%%: 3685-block  5
call   18 never executed
    %%%%%: 3685-block  6
call   19 never executed
    %%%%%: 3685-block  7
call   20 never executed
    %%%%%: 3685-block  8
call   21 never executed
        -: 3686:  }
        -: 3687:
    #####: 3688:  OutputXmlAttribute(stream, kTestcase, "status",
    $$$$$: 3688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3688-block  1
    $$$$$: 3688-block  2
    $$$$$: 3688-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3688-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 3688-block  5
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    %%%%%: 3688-block  6
call   14 never executed
    %%%%%: 3688-block  7
call   15 never executed
    %%%%%: 3688-block  8
call   16 never executed
    %%%%%: 3688-block  9
call   17 never executed
    #####: 3689:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    $$$$$: 3689-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3690:  OutputXmlAttribute(stream, kTestcase, "time",
    $$$$$: 3690-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3690-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3690-block  2
call    6 never executed
    %%%%%: 3690-block  3
call    7 never executed
    #####: 3691:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3691-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 3691-block  1
call    8 never executed
    #####: 3692:  OutputXmlAttribute(stream, kTestcase, "classname", test_case_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3692-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3692-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3692-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 3692-block  3
call   15 never executed
    %%%%%: 3692-block  4
call   16 never executed
    %%%%%: 3692-block  5
call   17 never executed
    %%%%%: 3692-block  6
call   18 never executed
    %%%%%: 3692-block  7
call   19 never executed
        -: 3693:
    #####: 3694:  int failures = 0;
    #####: 3695:  for (int i = 0; i < result.total_part_count(); ++i) {
    $$$$$: 3695-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3695-block  1
    #####: 3696:    const TestPartResult& part = result.GetTestPartResult(i);
    $$$$$: 3696-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3697:    if (part.failed()) {
    $$$$$: 3697-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3698:      if (++failures == 1) {
    $$$$$: 3698-block  0
branch  0 never executed
branch  1 never executed
    #####: 3699:        *stream << ">\n";
    $$$$$: 3699-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3699-block  1
        -: 3700:      }
        -: 3701:      const std::string location =
        -: 3702:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 3703:                                                          part.line_number());
    $$$$$: 3703-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    %%%%%: 3703-block  1
call    6 never executed
    %%%%%: 3703-block  2
    #####: 3704:      const std::string summary = location + "\n" + part.summary();
    $$$$$: 3704-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3704-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3704-block  2
call    7 never executed
call    8 never executed
    %%%%%: 3704-block  3
call    9 never executed
        -: 3705:      *stream << "      <failure message=\""
    #####: 3706:              << EscapeXmlAttribute(summary.c_str())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3706-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3706-block  1
call    8 never executed
call    9 never executed
call   10 never executed
    %%%%%: 3706-block  2
call   11 never executed
    %%%%%: 3706-block  3
call   12 never executed
    %%%%%: 3706-block  4
call   13 never executed
    %%%%%: 3706-block  5
call   14 never executed
    #####: 3707:              << "\" type=\"\">";
    $$$$$: 3707-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3707-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3707-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3708:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3708-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3708-block  1
call    7 never executed
    $$$$$: 3708-block  2
call    8 never executed
    %%%%%: 3708-block  3
call    9 never executed
    #####: 3709:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3709-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3709-block  1
call    7 never executed
    %%%%%: 3709-block  2
call    8 never executed
    #####: 3710:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3711:    }
        -: 3712:  }
        -: 3713:
    #####: 3714:  if (failures == 0 && result.test_property_count() == 0) {
    $$$$$: 3714-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3714-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3714-block  2
    $$$$$: 3714-block  3
    $$$$$: 3714-block  4
branch  5 never executed
branch  6 never executed
    #####: 3715:    *stream << " />\n";
    $$$$$: 3715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3715-block  1
        -: 3716:  } else {
    #####: 3717:    if (failures == 0) {
    $$$$$: 3717-block  0
branch  0 never executed
branch  1 never executed
    #####: 3718:      *stream << ">\n";
    $$$$$: 3718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3718-block  1
        -: 3719:    }
    #####: 3720:    OutputXmlTestProperties(stream, result);
    $$$$$: 3720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3721:    *stream << "    </testcase>\n";
    $$$$$: 3721-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3721-block  1
    $$$$$: 3721-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3722:  }
        -: 3723:}
        -: 3724:
        -: 3725:// Prints an XML representation of a TestCase object
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlTestCaseEPSoRKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 3726:void XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream* stream,
    $$$$$: 3726-block  0
        -: 3727:                                                const TestCase& test_case) {
    #####: 3728:  const std::string kTestsuite = "testsuite";
    $$$$$: 3728-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3728-block  1
call    4 never executed
    $$$$$: 3728-block  2
call    5 never executed
    %%%%%: 3728-block  3
call    6 never executed
    #####: 3729:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3729-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3730:  OutputXmlAttribute(stream, kTestsuite, "name", test_case.name());
    $$$$$: 3730-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3730-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3730-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3730-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%: 3730-block  4
call   16 never executed
    %%%%%: 3730-block  5
call   17 never executed
    %%%%%: 3730-block  6
call   18 never executed
    %%%%%: 3730-block  7
call   19 never executed
    #####: 3731:  OutputXmlAttribute(stream, kTestsuite, "tests",
    $$$$$: 3731-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3731-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3731-block  2
call    6 never executed
    %%%%%: 3731-block  3
call    7 never executed
    #####: 3732:                     StreamableToString(test_case.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3732-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3732-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 3732-block  2
call   10 never executed
    %%%%%: 3732-block  3
    #####: 3733:  OutputXmlAttribute(stream, kTestsuite, "failures",
    $$$$$: 3733-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3733-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3733-block  2
call    6 never executed
    %%%%%: 3733-block  3
call    7 never executed
    #####: 3734:                     StreamableToString(test_case.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3734-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3734-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 3734-block  2
call   10 never executed
    %%%%%: 3734-block  3
    #####: 3735:  OutputXmlAttribute(
    $$$$$: 3735-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3735-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3735-block  2
call    6 never executed
    %%%%%: 3735-block  3
call    7 never executed
        -: 3736:      stream, kTestsuite, "disabled",
    #####: 3737:      StreamableToString(test_case.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3737-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3737-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 3737-block  2
call   10 never executed
    %%%%%: 3737-block  3
    #####: 3738:  OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3738-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3738-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3738-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 3738-block  3
call   15 never executed
    %%%%%: 3738-block  4
call   16 never executed
    %%%%%: 3738-block  5
call   17 never executed
    %%%%%: 3738-block  6
call   18 never executed
    #####: 3739:  OutputXmlAttribute(stream, kTestsuite, "time",
    $$$$$: 3739-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3739-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3739-block  2
call    6 never executed
    %%%%%: 3739-block  3
call    7 never executed
    #####: 3740:                     FormatTimeInMillisAsSeconds(test_case.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3740-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 3740-block  1
call    8 never executed
    #####: 3741:  *stream << TestPropertiesAsXmlAttributes(test_case.ad_hoc_test_result())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3741-block  0
call    4 never executed
    %%%%%: 3741-block  1
call    5 never executed
    #####: 3742:          << ">\n";
    $$$$$: 3742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3742-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3743:
    #####: 3744:  for (int i = 0; i < test_case.total_test_count(); ++i) {
    $$$$$: 3744-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3744-block  1
    #####: 3745:    if (test_case.GetTestInfo(i)->is_reportable())
    $$$$$: 3745-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3745-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3746:      OutputXmlTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));
    $$$$$: 3746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3746-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3746-block  2
        -: 3747:  }
    #####: 3748:  *stream << "  </" << kTestsuite << ">\n";
    $$$$$: 3748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3748-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3748-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3749:}
    %%%%%: 3749-block  0
call    0 never executed
        -: 3750:
        -: 3751:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3752:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
    $$$$$: 3752-block  0
        -: 3753:                                                const UnitTest& unit_test) {
    #####: 3754:  const std::string kTestsuites = "testsuites";
    $$$$$: 3754-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3754-block  1
call    4 never executed
    $$$$$: 3754-block  2
call    5 never executed
    %%%%%: 3754-block  3
call    6 never executed
        -: 3755:
    #####: 3756:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3757:  *stream << "<" << kTestsuites;
    $$$$$: 3757-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3757-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3758:
    #####: 3759:  OutputXmlAttribute(stream, kTestsuites, "tests",
    $$$$$: 3759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3759-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3759-block  2
call    6 never executed
    %%%%%: 3759-block  3
call    7 never executed
    #####: 3760:                     StreamableToString(unit_test.reportable_test_count()));
    $$$$$: 3760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3760-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3760-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 3760-block  3
call   10 never executed
    %%%%%: 3760-block  4
    #####: 3761:  OutputXmlAttribute(stream, kTestsuites, "failures",
    $$$$$: 3761-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3761-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3761-block  2
call    6 never executed
    %%%%%: 3761-block  3
call    7 never executed
    #####: 3762:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3762-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3762-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 3762-block  2
call   10 never executed
    %%%%%: 3762-block  3
    #####: 3763:  OutputXmlAttribute(
    $$$$$: 3763-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3763-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3763-block  2
call    6 never executed
    %%%%%: 3763-block  3
call    7 never executed
        -: 3764:      stream, kTestsuites, "disabled",
    #####: 3765:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3765-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3765-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    %%%%%: 3765-block  2
call   10 never executed
    %%%%%: 3765-block  3
    #####: 3766:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3766-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3766-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3766-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 3766-block  3
call   15 never executed
    %%%%%: 3766-block  4
call   16 never executed
    %%%%%: 3766-block  5
call   17 never executed
    %%%%%: 3766-block  6
call   18 never executed
    #####: 3767:  OutputXmlAttribute(
    $$$$$: 3767-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3767-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3767-block  2
call    6 never executed
    %%%%%: 3767-block  3
call    7 never executed
        -: 3768:      stream, kTestsuites, "timestamp",
    #####: 3769:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3769-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 3769-block  1
call    8 never executed
    #####: 3770:  OutputXmlAttribute(stream, kTestsuites, "time",
    $$$$$: 3770-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3770-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3770-block  2
call    6 never executed
    %%%%%: 3770-block  3
call    7 never executed
    #####: 3771:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3771-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 3771-block  1
call    8 never executed
        -: 3772:
    #####: 3773:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 3774:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    $$$$$: 3774-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3774-block  1
call    4 never executed
call    5 never executed
    %%%%%: 3774-block  2
call    6 never executed
    %%%%%: 3774-block  3
call    7 never executed
    #####: 3775:                       StreamableToString(unit_test.random_seed()));
    $$$$$: 3775-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3775-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 3775-block  2
call    8 never executed
    %%%%%: 3775-block  3
        -: 3776:  }
    #####: 3777:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    $$$$$: 3777-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3777-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3777-block  2
call    7 never executed
    %%%%%: 3777-block  3
call    8 never executed
        -: 3778:
    #####: 3779:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3779-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3779-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3779-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 3779-block  3
call   15 never executed
    %%%%%: 3779-block  4
call   16 never executed
    %%%%%: 3779-block  5
call   17 never executed
    %%%%%: 3779-block  6
call   18 never executed
    #####: 3780:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3781:
    #####: 3782:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    $$$$$: 3782-block  0
    $$$$$: 3782-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3782-block  2
    #####: 3783:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0)
    $$$$$: 3783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3783-block  2
branch  6 never executed
branch  7 never executed
    #####: 3784:      PrintXmlTestCase(stream, *unit_test.GetTestCase(i));
    $$$$$: 3784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3784-block  2
        -: 3785:  }
    #####: 3786:  *stream << "</" << kTestsuites << ">\n";
    $$$$$: 3786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3786-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3786-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3787:}
    %%%%%: 3787-block  0
call    0 never executed
        -: 3788:
        -: 3789:// Produces a string representing the test properties in a result as space
        -: 3790:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 3791:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
    $$$$$: 3791-block  0
        -: 3792:    const TestResult& result) {
    #####: 3793:  Message attributes;
    $$$$$: 3793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3793-block  1
call    3 never executed
    %%%%%: 3793-block  2
call    4 never executed
    #####: 3794:  for (int i = 0; i < result.test_property_count(); ++i) {
    $$$$$: 3794-block  0
    $$$$$: 3794-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3795:    const TestProperty& property = result.GetTestProperty(i);
    $$$$$: 3795-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3796:    attributes << " " << property.key() << "="
    $$$$$: 3796-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3796-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3796-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3796-block  3
    #####: 3797:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    $$$$$: 3797-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3797-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3797-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3797-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 3797-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 3797-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    %%%%%: 3797-block  6
call   20 never executed
    %%%%%: 3797-block  7
call   21 never executed
    %%%%%: 3797-block  8
call   22 never executed
        -: 3798:  }
    #####: 3799:  return attributes.GetString();
    $$$$$: 3799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3799-block  1
    $$$$$: 3799-block  2
        -: 3800:}
        -: 3801:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 3802:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
    $$$$$: 3802-block  0
        -: 3803:    std::ostream* stream, const TestResult& result) {
    #####: 3804:  const std::string kProperties = "properties";
    $$$$$: 3804-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3804-block  1
call    4 never executed
    $$$$$: 3804-block  2
    $$$$$: 3804-block  3
    $$$$$: 3804-block  4
    $$$$$: 3804-block  5
    %%%%%: 3804-block  6
call    5 never executed
    %%%%%: 3804-block  7
call    6 never executed
    %%%%%: 3804-block  8
call    7 never executed
    #####: 3805:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3805-block  0
call    4 never executed
    $$$$$: 3805-block  1
    $$$$$: 3805-block  2
    $$$$$: 3805-block  3
    $$$$$: 3805-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3805-block  5
call    8 never executed
        -: 3806:
    #####: 3807:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3808:    return;
    $$$$$: 3808-block  0
        -: 3809:  }
        -: 3810:
    #####: 3811:  *stream << "<" << kProperties << ">\n";
    $$$$$: 3811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3811-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3811-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3812:  for (int i = 0; i < result.test_property_count(); ++i) {
    $$$$$: 3812-block  0
    $$$$$: 3812-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3812-block  2
    #####: 3813:    const TestProperty& property = result.GetTestProperty(i);
    $$$$$: 3813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3814:    *stream << "<" << kProperty;
    $$$$$: 3814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3814-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3815:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    $$$$$: 3815-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3815-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3815-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3815-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 3815-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 3815-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    %%%%%: 3815-block  6
call   20 never executed
    %%%%%: 3815-block  7
call   21 never executed
    %%%%%: 3815-block  8
call   22 never executed
    #####: 3816:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3816-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3816-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 3816-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 3816-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 3816-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    %%%%%: 3816-block  5
call   20 never executed
    %%%%%: 3816-block  6
call   21 never executed
    %%%%%: 3816-block  7
call   22 never executed
    #####: 3817:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3818:  }
    #####: 3819:  *stream << "</" << kProperties << ">\n";
    $$$$$: 3819-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3819-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3819-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3819-block  3
    $$$$$: 3819-block  4
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 3820:}
        -: 3821:
        -: 3822:// End XmlUnitTestResultPrinter
        -: 3823:
        -: 3824:
        -: 3825:// This class generates an JSON output file.
function _ZN7testing8internal25JsonUnitTestResultPrinterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal25JsonUnitTestResultPrinterD1Ev called 0 returned 0% blocks executed 0%
    #####: 3826:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
    $$$$$: 3826-block  0
    $$$$$: 3826-block  1
call    0 never executed
call    1 never executed
    $$$$$: 3826-block  2
    $$$$$: 3826-block  3
call    2 never executed
call    3 never executed
        -: 3827: public:
        -: 3828:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 3829:
        -: 3830:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 3831:
        -: 3832: private:
        -: 3833:  // Returns an JSON-escaped copy of the input string str.
        -: 3834:  static std::string EscapeJson(const std::string& str);
        -: 3835:
        -: 3836:  //// Verifies that the given attribute belongs to the given element and
        -: 3837:  //// streams the attribute as JSON.
        -: 3838:  static void OutputJsonKey(std::ostream* stream,
        -: 3839:                            const std::string& element_name,
        -: 3840:                            const std::string& name,
        -: 3841:                            const std::string& value,
        -: 3842:                            const std::string& indent,
        -: 3843:                            bool comma = true);
        -: 3844:  static void OutputJsonKey(std::ostream* stream,
        -: 3845:                            const std::string& element_name,
        -: 3846:                            const std::string& name,
        -: 3847:                            int value,
        -: 3848:                            const std::string& indent,
        -: 3849:                            bool comma = true);
        -: 3850:
        -: 3851:  // Streams a JSON representation of a TestInfo object.
        -: 3852:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 3853:                                 const char* test_case_name,
        -: 3854:                                 const TestInfo& test_info);
        -: 3855:
        -: 3856:  // Prints a JSON representation of a TestCase object
        -: 3857:  static void PrintJsonTestCase(::std::ostream* stream,
        -: 3858:                                const TestCase& test_case);
        -: 3859:
        -: 3860:  // Prints a JSON summary of unit_test to output stream out.
        -: 3861:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 3862:                                const UnitTest& unit_test);
        -: 3863:
        -: 3864:  // Produces a string representing the test properties in a result as
        -: 3865:  // a JSON dictionary.
        -: 3866:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 3867:                                          const std::string& indent);
        -: 3868:
        -: 3869:  // The output file.
        -: 3870:  const std::string output_file_;
        -: 3871:
        -: 3872:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 3873:};
        -: 3874:
        -: 3875:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3876:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    $$$$$: 3876-block  0
    #####: 3877:    : output_file_(output_file) {
    $$$$$: 3877-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3877-block  1
call    5 never executed
    %%%%%: 3877-block  2
call    6 never executed
    %%%%%: 3877-block  3
call    7 never executed
    %%%%%: 3877-block  4
call    8 never executed
    #####: 3878:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3879:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    $$$$$: 3879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3879-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3879-block  2
call    7 never executed
    %%%%%: 3879-block  3
call    8 never executed
        -: 3880:  }
    #####: 3881:}
    $$$$$: 3881-block  0
        -: 3882:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3883:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
    $$$$$: 3883-block  0
        -: 3884:                                                  int /*iteration*/) {
    #####: 3885:  FILE* jsonout = NULL;
    #####: 3886:  FilePath output_file(output_file_);
    $$$$$: 3886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 3886-block  1
call    4 never executed
    #####: 3887:  FilePath output_dir(output_file.RemoveFileName());
    $$$$$: 3887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 3887-block  1
call    4 never executed
        -: 3888:
    #####: 3889:  if (output_dir.CreateDirectoriesRecursively()) {
    $$$$$: 3889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3889-block  1
branch  3 never executed
branch  4 never executed
    #####: 3890:    jsonout = posix::FOpen(output_file_.c_str(), "w");
    $$$$$: 3890-block  0
call    0 never executed
call    1 never executed
        -: 3891:  }
    #####: 3892:  if (jsonout == NULL) {
    $$$$$: 3892-block  0
branch  0 never executed
branch  1 never executed
        -: 3893:    // TODO(phosek): report the reason of the failure.
        -: 3894:    //
        -: 3895:    // We don't do it for now as:
        -: 3896:    //
        -: 3897:    //   1. There is no urgent need for it.
        -: 3898:    //   2. It's a bit involved to make the errno variable thread-safe on
        -: 3899:    //      all three operating systems (Linux, Windows, and Mac OS).
        -: 3900:    //   3. To interpret the meaning of errno in a thread-safe way,
        -: 3901:    //      we need the strerror_r() function, which is not available on
        -: 3902:    //      Windows.
    #####: 3903:    GTEST_LOG_(FATAL) << "Unable to open file \""
    $$$$$: 3903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3903-block  1
call    3 never executed
    $$$$$: 3903-block  2
call    4 never executed
    %%%%%: 3903-block  3
call    5 never executed
    #####: 3904:                      << output_file_ << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3904-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3904-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 3905:  }
    #####: 3906:  std::stringstream stream;
    $$$$$: 3906-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    %%%%%: 3906-block  1
call    5 never executed
    #####: 3907:  PrintJsonUnitTest(&stream, unit_test);
    $$$$$: 3907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3908:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    $$$$$: 3908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3908-block  1
call    3 never executed
call    4 never executed
    #####: 3909:  fclose(jsonout);
call    0 never executed
    #####: 3910:}
        -: 3911:
        -: 3912:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3913:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    $$$$$: 3913-block  0
    #####: 3914:  Message m;
    $$$$$: 3914-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3914-block  1
call    3 never executed
    %%%%%: 3914-block  2
call    4 never executed
        -: 3915:
    #####: 3916:  for (size_t i = 0; i < str.size(); ++i) {
    $$$$$: 3916-block  0
    $$$$$: 3916-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3916-block  2
    #####: 3917:    const char ch = str[i];
    $$$$$: 3917-block  0
call    0 never executed
    #####: 3918:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 3919:      case '\\':
        -: 3920:      case '"':
        -: 3921:      case '/':
    #####: 3922:        m << '\\' << ch;
    $$$$$: 3922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3922-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3922-block  2
    #####: 3923:        break;
    $$$$$: 3923-block  0
        -: 3924:      case '\b':
    #####: 3925:        m << "\\b";
    $$$$$: 3925-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3926:        break;
    $$$$$: 3926-block  0
        -: 3927:      case '\t':
    #####: 3928:        m << "\\t";
    $$$$$: 3928-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3929:        break;
    $$$$$: 3929-block  0
        -: 3930:      case '\n':
    #####: 3931:        m << "\\n";
    $$$$$: 3931-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3932:        break;
    $$$$$: 3932-block  0
        -: 3933:      case '\f':
    #####: 3934:        m << "\\f";
    $$$$$: 3934-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3935:        break;
    $$$$$: 3935-block  0
        -: 3936:      case '\r':
    #####: 3937:        m << "\\r";
    $$$$$: 3937-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3938:        break;
    $$$$$: 3938-block  0
        -: 3939:      default:
    #####: 3940:        if (ch < ' ') {
    $$$$$: 3940-block  0
branch  0 never executed
branch  1 never executed
    #####: 3941:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    $$$$$: 3941-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3941-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3941-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3941-block  3
call    9 never executed
    %%%%%: 3941-block  4
call   10 never executed
    %%%%%: 3941-block  5
        -: 3942:        } else {
    #####: 3943:          m << ch;
    $$$$$: 3943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3944:        }
    #####: 3945:        break;
    $$$$$: 3945-block  0
        -: 3946:    }
        -: 3947:  }
        -: 3948:
    #####: 3949:  return m.GetString();
    $$$$$: 3949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3949-block  1
    $$$$$: 3949-block  2
        -: 3950:}
        -: 3951:
        -: 3952:// The following routines generate an JSON representation of a UnitTest
        -: 3953:// object.
        -: 3954:
        -: 3955:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 3956:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    $$$$$: 3956-block  0
    #####: 3957:  ::std::stringstream ss;
    $$$$$: 3957-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3957-block  1
call    4 never executed
    %%%%%: 3957-block  2
call    5 never executed
    #####: 3958:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    $$$$$: 3958-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3958-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3959:  return ss.str();
    $$$$$: 3959-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3959-block  1
    $$$$$: 3959-block  2
        -: 3960:}
        -: 3961:
        -: 3962:// Converts the given epoch time in milliseconds to a date string in the
        -: 3963:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 3964:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
    $$$$$: 3964-block  0
        -: 3965:  struct tm time_struct;
    #####: 3966:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    $$$$$: 3966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3967:    return "";
    $$$$$: 3967-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3967-block  1
call    4 never executed
    %%%%%: 3967-block  2
call    5 never executed
        -: 3968:  // YYYY-MM-DDThh:mm:ss
    #####: 3969:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    $$$$$: 3969-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3969-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3969-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3969-block  3
call   12 never executed
    %%%%%: 3969-block  4
call   13 never executed
    %%%%%: 3969-block  5
call   14 never executed
    %%%%%: 3969-block  6
    #####: 3970:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    $$$$$: 3970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3970-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3970-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3970-block  3
call   12 never executed
    %%%%%: 3970-block  4
call   13 never executed
    %%%%%: 3970-block  5
call   14 never executed
    #####: 3971:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    $$$$$: 3971-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3971-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3971-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3971-block  3
call   12 never executed
    %%%%%: 3971-block  4
call   13 never executed
    %%%%%: 3971-block  5
call   14 never executed
    #####: 3972:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    $$$$$: 3972-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3972-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3972-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3972-block  3
call   12 never executed
    %%%%%: 3972-block  4
call   13 never executed
    %%%%%: 3972-block  5
call   14 never executed
    #####: 3973:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    $$$$$: 3973-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3973-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3973-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3973-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 3973-block  4
call   12 never executed
    %%%%%: 3973-block  5
call   13 never executed
    %%%%%: 3973-block  6
call   14 never executed
    #####: 3974:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    $$$$$: 3974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3974-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3974-block  2
call    6 never executed
    $$$$$: 3974-block  3
    $$$$$: 3974-block  4
    %%%%%: 3974-block  5
call    7 never executed
        -: 3975:}
        -: 3976:
function _ZN7testing8internalL6IndentEi called 0 returned 0% blocks executed 0%
    #####: 3977:static inline std::string Indent(int width) {
    $$$$$: 3977-block  0
    #####: 3978:  return std::string(width, ' ');
    $$$$$: 3978-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3978-block  1
call    4 never executed
    $$$$$: 3978-block  2
    %%%%%: 3978-block  3
call    5 never executed
        -: 3979:}
        -: 3980:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 3981:void JsonUnitTestResultPrinter::OutputJsonKey(
    $$$$$: 3981-block  0
        -: 3982:    std::ostream* stream,
        -: 3983:    const std::string& element_name,
        -: 3984:    const std::string& name,
        -: 3985:    const std::string& value,
        -: 3986:    const std::string& indent,
        -: 3987:    bool comma) {
        -: 3988:  const std::vector<std::string>& allowed_names =
    #####: 3989:      GetReservedAttributesForElement(element_name);
    $$$$$: 3989-block  0
call    0 never executed
    $$$$$: 3989-block  1
call    1 never executed
    %%%%%: 3989-block  2
call    2 never executed
        -: 3990:
    #####: 3991:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3991-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 3991-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 3991-block  2
call   13 never executed
    $$$$$: 3991-block  3
call   14 never executed
    %%%%%: 3991-block  4
    %%%%%: 3991-block  5
call   15 never executed
        -: 3992:                   allowed_names.end())
        -: 3993:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 3994:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3994-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3994-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3994-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3994-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 3994-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 3995:
    #####: 3996:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    $$$$$: 3996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3996-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3996-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 3996-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3996-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 3996-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 3996-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 3996-block  7
call   21 never executed
    %%%%%: 3996-block  8
call   22 never executed
    #####: 3997:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 3998:    *stream << ",\n";
    $$$$$: 3998-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3998-block  1
    #####: 3999:}
        -: 4000:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4001:void JsonUnitTestResultPrinter::OutputJsonKey(
    $$$$$: 4001-block  0
        -: 4002:    std::ostream* stream,
        -: 4003:    const std::string& element_name,
        -: 4004:    const std::string& name,
        -: 4005:    int value,
        -: 4006:    const std::string& indent,
        -: 4007:    bool comma) {
        -: 4008:  const std::vector<std::string>& allowed_names =
    #####: 4009:      GetReservedAttributesForElement(element_name);
    $$$$$: 4009-block  0
call    0 never executed
    $$$$$: 4009-block  1
call    1 never executed
    %%%%%: 4009-block  2
call    2 never executed
        -: 4010:
    #####: 4011:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4011-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4011-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4011-block  2
call   13 never executed
    $$$$$: 4011-block  3
call   14 never executed
    %%%%%: 4011-block  4
    %%%%%: 4011-block  5
call   15 never executed
        -: 4012:                   allowed_names.end())
        -: 4013:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4014:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4014-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4014-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4014-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4014-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 4014-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4015:
    #####: 4016:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    $$$$$: 4016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4016-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4016-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4016-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4016-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 4016-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 4016-block  6
call   18 never executed
    %%%%%: 4016-block  7
call   19 never executed
    #####: 4017:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4018:    *stream << ",\n";
    $$$$$: 4018-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4018-block  1
    #####: 4019:}
        -: 4020:
        -: 4021:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4022:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
    $$$$$: 4022-block  0
        -: 4023:                                                   const char* test_case_name,
        -: 4024:                                                   const TestInfo& test_info) {
    #####: 4025:  const TestResult& result = *test_info.result();
    $$$$$: 4025-block  0
call    0 never executed
    #####: 4026:  const std::string kTestcase = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4026-block  0
call    4 never executed
call    5 never executed
    %%%%%: 4026-block  1
call    6 never executed
    #####: 4027:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 4027-block  0
call    4 never executed
        -: 4028:
    #####: 4029:  *stream << Indent(8) << "{\n";
    $$$$$: 4029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4029-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4029-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4029-block  3
call    9 never executed
    %%%%%: 4029-block  4
call   10 never executed
    #####: 4030:  OutputJsonKey(stream, kTestcase, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 4030-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4030-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4030-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%: 4030-block  3
call   16 never executed
    %%%%%: 4030-block  4
call   17 never executed
    %%%%%: 4030-block  5
call   18 never executed
    %%%%%: 4030-block  6
call   19 never executed
        -: 4031:
    #####: 4032:  if (test_info.value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4032-block  0
branch  3 never executed
branch  4 never executed
    #####: 4033:    OutputJsonKey(stream, kTestcase, "value_param",
    $$$$$: 4033-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4033-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4033-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 4033-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 4033-block  4
call   15 never executed
    %%%%%: 4033-block  5
call   16 never executed
    %%%%%: 4033-block  6
call   17 never executed
    %%%%%: 4033-block  7
call   18 never executed
    #####: 4034:                  test_info.value_param(), kIndent);
    $$$$$: 4034-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4035:  }
    #####: 4036:  if (test_info.type_param() != NULL) {
    $$$$$: 4036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4036-block  1
branch  3 never executed
branch  4 never executed
    #####: 4037:    OutputJsonKey(stream, kTestcase, "type_param", test_info.type_param(),
    $$$$$: 4037-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4037-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4037-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 4037-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 4037-block  4
call   15 never executed
    %%%%%: 4037-block  5
call   16 never executed
    %%%%%: 4037-block  6
call   17 never executed
    %%%%%: 4037-block  7
call   18 never executed
    #####: 4038:                  kIndent);
    $$$$$: 4038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4039:  }
        -: 4040:
    #####: 4041:  OutputJsonKey(stream, kTestcase, "status",
    $$$$$: 4041-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4041-block  1
    $$$$$: 4041-block  2
    $$$$$: 4041-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4041-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4041-block  5
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    %%%%%: 4041-block  6
call   14 never executed
    %%%%%: 4041-block  7
call   15 never executed
    %%%%%: 4041-block  8
call   16 never executed
    %%%%%: 4041-block  9
call   17 never executed
    #####: 4042:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    $$$$$: 4042-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4043:  OutputJsonKey(stream, kTestcase, "time",
    $$$$$: 4043-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4043-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4043-block  2
call    6 never executed
    %%%%%: 4043-block  3
call    7 never executed
    #####: 4044:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4044-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 4044-block  1
call    8 never executed
    #####: 4045:  OutputJsonKey(stream, kTestcase, "classname", test_case_name, kIndent, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4045-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 4045-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 4045-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 4045-block  3
call   15 never executed
    %%%%%: 4045-block  4
call   16 never executed
    %%%%%: 4045-block  5
call   17 never executed
    %%%%%: 4045-block  6
call   18 never executed
    #####: 4046:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4046-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4046-block  1
call    6 never executed
    %%%%%: 4046-block  2
call    7 never executed
    %%%%%: 4046-block  3
call    8 never executed
        -: 4047:
    #####: 4048:  int failures = 0;
    #####: 4049:  for (int i = 0; i < result.total_part_count(); ++i) {
    $$$$$: 4049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4049-block  1
    #####: 4050:    const TestPartResult& part = result.GetTestPartResult(i);
    $$$$$: 4050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4051:    if (part.failed()) {
    $$$$$: 4051-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4052:      *stream << ",\n";
    $$$$$: 4052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4053:      if (++failures == 1) {
    $$$$$: 4053-block  0
branch  0 never executed
branch  1 never executed
    #####: 4054:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    $$$$$: 4054-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4054-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4054-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4054-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4054-block  4
        -: 4055:      }
        -: 4056:      const std::string location =
        -: 4057:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4058:                                                          part.line_number());
    $$$$$: 4058-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    %%%%%: 4058-block  1
call    6 never executed
    %%%%%: 4058-block  2
    #####: 4059:      const std::string message = EscapeJson(location + "\n" + part.message());
    $$$$$: 4059-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4059-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4059-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4059-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4059-block  4
call   12 never executed
    %%%%%: 4059-block  5
call   13 never executed
    %%%%%: 4059-block  6
call   14 never executed
        -: 4060:      *stream << kIndent << "  {\n"
        -: 4061:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4062:              << kIndent << "    \"type\": \"\"\n"
    #####: 4063:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4063-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4063-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4063-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4063-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 4063-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 4063-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$: 4063-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 4063-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$: 4063-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 4064:    }
        -: 4065:  }
        -: 4066:
    #####: 4067:  if (failures > 0)
    $$$$$: 4067-block  0
branch  0 never executed
branch  1 never executed
    #####: 4068:    *stream << "\n" << kIndent << "]";
    $$$$$: 4068-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4068-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4068-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4068-block  3
    #####: 4069:  *stream << "\n" << Indent(8) << "}";
    $$$$$: 4069-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4069-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4069-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4069-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4069-block  4
call   12 never executed
    %%%%%: 4069-block  5
call   13 never executed
    #####: 4070:}
    %%%%%: 4070-block  0
call    0 never executed
        -: 4071:
        -: 4072:// Prints an JSON representation of a TestCase object
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestCaseEPSoRKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 4073:void JsonUnitTestResultPrinter::PrintJsonTestCase(std::ostream* stream,
    $$$$$: 4073-block  0
        -: 4074:                                                  const TestCase& test_case) {
    #####: 4075:  const std::string kTestsuite = "testsuite";
    $$$$$: 4075-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4075-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4075-block  2
call    6 never executed
    #####: 4076:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 4076-block  0
call    4 never executed
        -: 4077:
    #####: 4078:  *stream << Indent(4) << "{\n";
    $$$$$: 4078-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4078-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4078-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4078-block  3
call    9 never executed
    %%%%%: 4078-block  4
call   10 never executed
    #####: 4079:  OutputJsonKey(stream, kTestsuite, "name", test_case.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 4079-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4079-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4079-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%: 4079-block  3
call   16 never executed
    %%%%%: 4079-block  4
call   17 never executed
    %%%%%: 4079-block  5
call   18 never executed
    %%%%%: 4079-block  6
call   19 never executed
    #####: 4080:  OutputJsonKey(stream, kTestsuite, "tests", test_case.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4080-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4080-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4080-block  2
call    9 never executed
    %%%%%: 4080-block  3
call   10 never executed
    #####: 4081:                kIndent);
    $$$$$: 4081-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4082:  OutputJsonKey(stream, kTestsuite, "failures", test_case.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4082-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4082-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4082-block  2
call    9 never executed
    %%%%%: 4082-block  3
call   10 never executed
    #####: 4083:                kIndent);
    $$$$$: 4083-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4084:  OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4084-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4084-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4084-block  2
call    9 never executed
    %%%%%: 4084-block  3
call   10 never executed
    #####: 4085:                test_case.reportable_disabled_test_count(), kIndent);
    $$$$$: 4085-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4086:  OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4086-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4086-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4086-block  2
call    9 never executed
    %%%%%: 4086-block  3
call   10 never executed
    #####: 4087:  OutputJsonKey(stream, kTestsuite, "time",
    $$$$$: 4087-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4087-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4087-block  2
call    6 never executed
    %%%%%: 4087-block  3
call    7 never executed
    #####: 4088:                FormatTimeInMillisAsDuration(test_case.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    %%%%%: 4088-block  0
call    5 never executed
    #####: 4089:                false);
    $$$$$: 4089-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4090:  *stream << TestPropertiesAsJson(test_case.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4090-block  0
call    4 never executed
    %%%%%: 4090-block  1
call    5 never executed
    #####: 4091:          << ",\n";
    $$$$$: 4091-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4091-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4092:
    #####: 4093:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4093-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4093-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4093-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4094:
    #####: 4095:  bool comma = false;
    #####: 4096:  for (int i = 0; i < test_case.total_test_count(); ++i) {
    $$$$$: 4096-block  0
    $$$$$: 4096-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4096-block  2
    #####: 4097:    if (test_case.GetTestInfo(i)->is_reportable()) {
    $$$$$: 4097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4097-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4098:      if (comma) {
    $$$$$: 4098-block  0
branch  0 never executed
branch  1 never executed
    #####: 4099:        *stream << ",\n";
    $$$$$: 4099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4099-block  1
        -: 4100:      } else {
    #####: 4101:        comma = true;
    $$$$$: 4101-block  0
        -: 4102:      }
    #####: 4103:      OutputJsonTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));
    $$$$$: 4103-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4103-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4103-block  2
        -: 4104:    }
        -: 4105:  }
    #####: 4106:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    $$$$$: 4106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4106-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4106-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4106-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4106-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 4106-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 4106-block  6
call   18 never executed
    %%%%%: 4106-block  7
call   19 never executed
    #####: 4107:}
    %%%%%: 4107-block  0
call    0 never executed
        -: 4108:
        -: 4109:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4110:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
    $$$$$: 4110-block  0
        -: 4111:                                                  const UnitTest& unit_test) {
    #####: 4112:  const std::string kTestsuites = "testsuites";
    $$$$$: 4112-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4112-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4112-block  2
call    6 never executed
    #####: 4113:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4113-block  0
call    3 never executed
    %%%%%: 4113-block  1
call    4 never executed
    #####: 4114:  *stream << "{\n";
    $$$$$: 4114-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4115:
    #####: 4116:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    $$$$$: 4116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4116-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4116-block  2
call    7 never executed
call    8 never executed
    %%%%%: 4116-block  3
call    9 never executed
    %%%%%: 4116-block  4
call   10 never executed
    #####: 4117:                kIndent);
    $$$$$: 4117-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4118:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4118-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4118-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4118-block  2
call    9 never executed
    %%%%%: 4118-block  3
call   10 never executed
    #####: 4119:                kIndent);
    $$$$$: 4119-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4120:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4120-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4120-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4120-block  2
call    9 never executed
    %%%%%: 4120-block  3
call   10 never executed
    #####: 4121:                unit_test.reportable_disabled_test_count(), kIndent);
    $$$$$: 4121-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4122:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4122-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4122-block  1
call    7 never executed
call    8 never executed
    %%%%%: 4122-block  2
call    9 never executed
    %%%%%: 4122-block  3
call   10 never executed
    #####: 4123:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4124:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    $$$$$: 4124-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 4124-block  1
call    5 never executed
call    6 never executed
    %%%%%: 4124-block  2
call    7 never executed
    %%%%%: 4124-block  3
call    8 never executed
    #####: 4125:                  kIndent);
    $$$$$: 4125-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4126:  }
    #####: 4127:  OutputJsonKey(stream, kTestsuites, "timestamp",
    $$$$$: 4127-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4127-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4127-block  2
call    6 never executed
    %%%%%: 4127-block  3
call    7 never executed
    #####: 4128:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    $$$$$: 4128-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    %%%%%: 4128-block  1
call    5 never executed
    #####: 4129:                kIndent);
    $$$$$: 4129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4130:  OutputJsonKey(stream, kTestsuites, "time",
    $$$$$: 4130-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4130-block  1
call    4 never executed
call    5 never executed
    %%%%%: 4130-block  2
call    6 never executed
    %%%%%: 4130-block  3
call    7 never executed
    #####: 4131:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    %%%%%: 4131-block  0
call    5 never executed
    #####: 4132:                false);
    $$$$$: 4132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4133:
    #####: 4134:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4134-block  0
call    4 never executed
    %%%%%: 4134-block  1
call    5 never executed
    #####: 4135:          << ",\n";
    $$$$$: 4135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4135-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4136:
    #####: 4137:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4137-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 4137-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 4137-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    %%%%%: 4137-block  3
call   15 never executed
    %%%%%: 4137-block  4
call   16 never executed
    %%%%%: 4137-block  5
call   17 never executed
    %%%%%: 4137-block  6
call   18 never executed
    #####: 4138:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4138-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4138-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4138-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4139:
    #####: 4140:  bool comma = false;
    #####: 4141:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    $$$$$: 4141-block  0
    $$$$$: 4141-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4141-block  2
    #####: 4142:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0) {
    $$$$$: 4142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4142-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4142-block  2
branch  6 never executed
branch  7 never executed
    #####: 4143:      if (comma) {
    $$$$$: 4143-block  0
branch  0 never executed
branch  1 never executed
    #####: 4144:        *stream << ",\n";
    $$$$$: 4144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4144-block  1
        -: 4145:      } else {
    #####: 4146:        comma = true;
    $$$$$: 4146-block  0
        -: 4147:      }
    #####: 4148:      PrintJsonTestCase(stream, *unit_test.GetTestCase(i));
    $$$$$: 4148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4148-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4148-block  2
        -: 4149:    }
        -: 4150:  }
        -: 4151:
    #####: 4152:  *stream << "\n" << kIndent << "]\n" << "}\n";
    $$$$$: 4152-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4152-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4152-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4152-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4153:}
    %%%%%: 4153-block  0
call    0 never executed
        -: 4154:
        -: 4155:// Produces a string representing the test properties in a result as
        -: 4156:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4157:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
    $$$$$: 4157-block  0
        -: 4158:    const TestResult& result, const std::string& indent) {
    #####: 4159:  Message attributes;
    $$$$$: 4159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4159-block  1
call    3 never executed
    %%%%%: 4159-block  2
call    4 never executed
    #####: 4160:  for (int i = 0; i < result.test_property_count(); ++i) {
    $$$$$: 4160-block  0
    $$$$$: 4160-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4161:    const TestProperty& property = result.GetTestProperty(i);
    $$$$$: 4161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4162:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    $$$$$: 4162-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4162-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4162-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4162-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4162-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4162-block  5
    #####: 4163:               << "\"" << EscapeJson(property.value()) << "\"";
    $$$$$: 4163-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 4163-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 4163-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 4163-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 4163-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 4163-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    %%%%%: 4163-block  6
call   20 never executed
    %%%%%: 4163-block  7
call   21 never executed
    %%%%%: 4163-block  8
call   22 never executed
        -: 4164:  }
    #####: 4165:  return attributes.GetString();
    $$$$$: 4165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4165-block  1
    $$$$$: 4165-block  2
        -: 4166:}
        -: 4167:
        -: 4168:// End JsonUnitTestResultPrinter
        -: 4169:
        -: 4170:#if GTEST_CAN_STREAM_RESULTS_
        -: 4171:
        -: 4172:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4173:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4174:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4175:// in both time and space -- important as the input str may contain an
        -: 4176:// arbitrarily long test failure message and stack trace.
        -: 4177:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4178:  std::string result;
        -: 4179:  result.reserve(strlen(str) + 1);
        -: 4180:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4181:    switch (ch) {
        -: 4182:      case '%':
        -: 4183:      case '=':
        -: 4184:      case '&':
        -: 4185:      case '\n':
        -: 4186:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4187:        break;
        -: 4188:      default:
        -: 4189:        result.push_back(ch);
        -: 4190:        break;
        -: 4191:    }
        -: 4192:  }
        -: 4193:  return result;
        -: 4194:}
        -: 4195:
        -: 4196:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4197:  GTEST_CHECK_(sockfd_ == -1)
        -: 4198:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4199:
        -: 4200:  addrinfo hints;
        -: 4201:  memset(&hints, 0, sizeof(hints));
        -: 4202:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
        -: 4203:  hints.ai_socktype = SOCK_STREAM;
        -: 4204:  addrinfo* servinfo = NULL;
        -: 4205:
        -: 4206:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4207:  // the given host name.
        -: 4208:  const int error_num = getaddrinfo(
        -: 4209:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4210:  if (error_num != 0) {
        -: 4211:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4212:                        << gai_strerror(error_num);
        -: 4213:  }
        -: 4214:
        -: 4215:  // Loop through all the results and connect to the first we can.
        -: 4216:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != NULL;
        -: 4217:       cur_addr = cur_addr->ai_next) {
        -: 4218:    sockfd_ = socket(
        -: 4219:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
        -: 4220:    if (sockfd_ != -1) {
        -: 4221:      // Connect the client socket to the server socket.
        -: 4222:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4223:        close(sockfd_);
        -: 4224:        sockfd_ = -1;
        -: 4225:      }
        -: 4226:    }
        -: 4227:  }
        -: 4228:
        -: 4229:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4230:
        -: 4231:  if (sockfd_ == -1) {
        -: 4232:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4233:                        << host_name_ << ":" << port_num_;
        -: 4234:  }
        -: 4235:}
        -: 4236:
        -: 4237:// End of class Streaming Listener
        -: 4238:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4239:
        -: 4240:// class OsStackTraceGetter
        -: 4241:
        -: 4242:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4243:    "... " GTEST_NAME_ " internal frames ...";
        -: 4244:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 1 returned 100% blocks executed 86%
        1: 4245:std::string OsStackTraceGetter::CurrentStackTrace(int /*max_depth*/,
        1: 4245-block  0
        -: 4246:                                                  int /*skip_count*/) {
        1: 4247:  return "";
        1: 4247-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 4247-block  1
call    4 returned 1
        1: 4247-block  2
    %%%%%: 4247-block  3
call    5 never executed
        -: 4248:}
        -: 4249:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 202 returned 100% blocks executed 100%
      202: 4250:void OsStackTraceGetter::UponLeavingGTest() {}
      202: 4250-block  0
        -: 4251:
        -: 4252:// A helper class that creates the premature-exit file in its
        -: 4253:// constructor and deletes the file in its destructor.
        -: 4254:class ScopedPrematureExitFile {
        -: 4255: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 69%
        1: 4256:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 4256-block  0
        1: 4257:      : premature_exit_filepath_(premature_exit_filepath ?
        1: 4258:                                 premature_exit_filepath : "") {
        1: 4258-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$: 4258-block  1
        1: 4258-block  2
        1: 4258-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4258-block  4
call    6 returned 1
    %%%%%: 4258-block  5
call    7 never executed
        -: 4259:    // If a path to the premature-exit file is specified...
        1: 4260:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 4261:      // create the file with a single "0" character in it.  I/O
        -: 4262:      // errors are ignored as there's nothing better we can do and we
        -: 4263:      // don't want to fail the test because of this.
    #####: 4264:      FILE* pfile = posix::FOpen(premature_exit_filepath, "w");
    $$$$$: 4264-block  0
call    0 never executed
    #####: 4265:      fwrite("0", 1, 1, pfile);
    #####: 4266:      fclose(pfile);
call    0 never executed
        -: 4267:    }
        1: 4268:  }
        1: 4268-block  0
        -: 4269:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 25%
        2: 4270:  ~ScopedPrematureExitFile() {
        1: 4270-block  0
        1: 4270-block  1
call    0 returned 1
        1: 4271:    if (!premature_exit_filepath_.empty()) {
        1: 4271-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4272:      int retval = remove(premature_exit_filepath_.c_str());
    $$$$$: 4272-block  0
call    0 never executed
call    1 never executed
    #####: 4273:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 4274:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    $$$$$: 4274-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4274-block  1
    #####: 4275:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4276:                          << retval;
call    0 never executed
        -: 4277:      }
        -: 4278:    }
        1: 4279:  }
        -: 4280:
        -: 4281: private:
        -: 4282:  const std::string premature_exit_filepath_;
        -: 4283:
        -: 4284:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 4285:};
        -: 4286:
        -: 4287:}  // namespace internal
        -: 4288:
        -: 4289:// class TestEventListeners
        -: 4290:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 4291:TestEventListeners::TestEventListeners()
        1: 4291-block  0
        1: 4292:    : repeater_(new internal::TestEventRepeater()),
        1: 4292-block  0
call    0 returned 1
call    1 returned 1
        -: 4293:      default_result_printer_(NULL),
        1: 4294:      default_xml_generator_(NULL) {
        1: 4295:}
        -: 4296:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        2: 4297:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 4297-block  0
        1: 4297-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4297-block  2
call    2 returned 1
        -: 4298:
        -: 4299:// Returns the standard listener responsible for the default console
        -: 4300:// output.  Can be removed from the listeners list to shut down default
        -: 4301:// console output.  Note that removing this object from the listener list
        -: 4302:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 4303:void TestEventListeners::Append(TestEventListener* listener) {
        1: 4303-block  0
        1: 4304:  repeater_->Append(listener);
        1: 4304-block  0
call    0 returned 1
        1: 4305:}
        -: 4306:
        -: 4307:// Removes the given event listener from the list and returns it.  It then
        -: 4308:// becomes the caller's responsibility to delete the listener. Returns
        -: 4309:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 4310:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 4310-block  0
        1: 4311:  if (listener == default_result_printer_)
        1: 4311-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4312:    default_result_printer_ = NULL;
        1: 4312-block  0
    #####: 4313:  else if (listener == default_xml_generator_)
    $$$$$: 4313-block  0
branch  0 never executed
branch  1 never executed
    #####: 4314:    default_xml_generator_ = NULL;
    $$$$$: 4314-block  0
        1: 4315:  return repeater_->Release(listener);
        1: 4315-block  0
call    0 returned 1
        -: 4316:}
        -: 4317:
        -: 4318:// Returns repeater that broadcasts the TestEventListener events to all
        -: 4319:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 49 returned 100% blocks executed 100%
       98: 4320:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       49: 4320-block  0
       49: 4320-block  1
        -: 4321:
        -: 4322:// Sets the default_result_printer attribute to the provided listener.
        -: 4323:// The listener is also added to the listener list and previous
        -: 4324:// default_result_printer is removed from it and deleted. The listener can
        -: 4325:// also be NULL in which case it will not be added to the list. Does
        -: 4326:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 4327:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 4327-block  0
        1: 4328:  if (default_result_printer_ != listener) {
        1: 4328-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4329:    // It is an error to pass this method a listener that is already in the
        -: 4330:    // list.
        1: 4331:    delete Release(default_result_printer_);
        1: 4331-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$: 4331-block  1
call    3 never executed
        1: 4332:    default_result_printer_ = listener;
        1: 4333:    if (listener != NULL)
        1: 4333-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4334:      Append(listener);
        1: 4334-block  0
call    0 returned 1
        -: 4335:  }
        1: 4336:}
        -: 4337:
        -: 4338:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 4339:// listener is also added to the listener list and previous
        -: 4340:// default_xml_generator is removed from it and deleted. The listener can
        -: 4341:// also be NULL in which case it will not be added to the list. Does
        -: 4342:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 4343:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    $$$$$: 4343-block  0
    #####: 4344:  if (default_xml_generator_ != listener) {
    $$$$$: 4344-block  0
branch  0 never executed
branch  1 never executed
        -: 4345:    // It is an error to pass this method a listener that is already in the
        -: 4346:    // list.
    #####: 4347:    delete Release(default_xml_generator_);
    $$$$$: 4347-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4347-block  1
call    3 never executed
    #####: 4348:    default_xml_generator_ = listener;
    #####: 4349:    if (listener != NULL)
    $$$$$: 4349-block  0
branch  0 never executed
branch  1 never executed
    #####: 4350:      Append(listener);
    $$$$$: 4350-block  0
call    0 never executed
        -: 4351:  }
    #####: 4352:}
        -: 4353:
        -: 4354:// Controls whether events will be forwarded by the repeater to the
        -: 4355:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 4356:bool TestEventListeners::EventForwardingEnabled() const {
    $$$$$: 4356-block  0
    #####: 4357:  return repeater_->forwarding_enabled();
    $$$$$: 4357-block  0
call    0 never executed
        -: 4358:}
        -: 4359:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 4360:void TestEventListeners::SuppressEventForwarding() {
    $$$$$: 4360-block  0
    #####: 4361:  repeater_->set_forwarding_enabled(false);
    $$$$$: 4361-block  0
call    0 never executed
    #####: 4362:}
        -: 4363:
        -: 4364:// class UnitTest
        -: 4365:
        -: 4366:// Gets the singleton UnitTest object.  The first time this method is
        -: 4367:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 4368:// calls will return the same object.
        -: 4369://
        -: 4370:// We don't protect this under mutex_ as a user is not supposed to
        -: 4371:// call this before main() starts, from which point on the return
        -: 4372:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 482 returned 100% blocks executed 82%
      482: 4373:UnitTest* UnitTest::GetInstance() {
      482: 4373-block  0
        -: 4374:  // When compiled with MSVC 7.1 in optimized mode, destroying the
        -: 4375:  // UnitTest object upon exiting the program messes up the exit code,
        -: 4376:  // causing successful tests to appear failed.  We have to use a
        -: 4377:  // different implementation in this case to bypass the compiler bug.
        -: 4378:  // This implementation makes the compiler happy, at the cost of
        -: 4379:  // leaking the UnitTest object.
        -: 4380:
        -: 4381:  // CodeGear C++Builder insists on a public destructor for the
        -: 4382:  // default implementation.  Use this implementation to keep good OO
        -: 4383:  // design with private destructor.
        -: 4384:
        -: 4385:#if (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)
        -: 4386:  static UnitTest* const instance = new UnitTest;
        -: 4387:  return instance;
        -: 4388:#else
function __tcf_0 called 1 returned 100% blocks executed 100%
      484: 4389:  static UnitTest instance;
      482: 4389-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 481
        1: 4389-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 4389-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 4389-block  3
call    8 returned 1
call    9 returned 1
    %%%%%: 4389-block  4
branch 10 never executed
branch 11 never executed
    %%%%%: 4389-block  5
call   12 never executed
        1: 4389-block  6
        1: 4389-block  7
call   13 returned 1
      482: 4390:  return &instance;
      482: 4390-block  0
      482: 4390-block  1
        -: 4391:#endif  // (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)
        -: 4392:}
        -: 4393:
        -: 4394:// Gets the number of successful test cases.
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 4395:int UnitTest::successful_test_case_count() const {
    $$$$$: 4395-block  0
    #####: 4396:  return impl()->successful_test_case_count();
    $$$$$: 4396-block  0
call    0 never executed
call    1 never executed
        -: 4397:}
        -: 4398:
        -: 4399:// Gets the number of failed test cases.
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 4400:int UnitTest::failed_test_case_count() const {
    $$$$$: 4400-block  0
    #####: 4401:  return impl()->failed_test_case_count();
    $$$$$: 4401-block  0
call    0 never executed
call    1 never executed
        -: 4402:}
        -: 4403:
        -: 4404:// Gets the number of all test cases.
function _ZNK7testing8UnitTest21total_test_case_countEv called 12 returned 100% blocks executed 100%
       12: 4405:int UnitTest::total_test_case_count() const {
       12: 4405-block  0
       12: 4406:  return impl()->total_test_case_count();
       12: 4406-block  0
call    0 returned 12
call    1 returned 12
        -: 4407:}
        -: 4408:
        -: 4409:// Gets the number of all test cases that contain at least one test
        -: 4410:// that should run.
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 4411:int UnitTest::test_case_to_run_count() const {
        2: 4411-block  0
        2: 4412:  return impl()->test_case_to_run_count();
        2: 4412-block  0
call    0 returned 2
call    1 returned 2
        -: 4413:}
        -: 4414:
        -: 4415:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 4416:int UnitTest::successful_test_count() const {
        1: 4416-block  0
        1: 4417:  return impl()->successful_test_count();
        1: 4417-block  0
call    0 returned 1
call    1 returned 1
        -: 4418:}
        -: 4419:
        -: 4420:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 3 returned 100% blocks executed 100%
        6: 4421:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
        3: 4421-block  0
        3: 4421-block  1
call    0 returned 3
call    1 returned 3
        -: 4422:
        -: 4423:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 4424:int UnitTest::reportable_disabled_test_count() const {
        1: 4424-block  0
        1: 4425:  return impl()->reportable_disabled_test_count();
        1: 4425-block  0
call    0 returned 1
call    1 returned 1
        -: 4426:}
        -: 4427:
        -: 4428:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4429:int UnitTest::disabled_test_count() const {
    $$$$$: 4429-block  0
    #####: 4430:  return impl()->disabled_test_count();
    $$$$$: 4430-block  0
call    0 never executed
call    1 never executed
        -: 4431:}
        -: 4432:
        -: 4433:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4434:int UnitTest::reportable_test_count() const {
    $$$$$: 4434-block  0
    #####: 4435:  return impl()->reportable_test_count();
    $$$$$: 4435-block  0
call    0 never executed
call    1 never executed
        -: 4436:}
        -: 4437:
        -: 4438:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4439:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    $$$$$: 4439-block  0
    $$$$$: 4439-block  1
call    0 never executed
call    1 never executed
        -: 4440:
        -: 4441:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        4: 4442:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 4442-block  0
        2: 4442-block  1
call    0 returned 2
call    1 returned 2
        -: 4443:
        -: 4444:// Gets the time of the test program start, in ms from the start of the
        -: 4445:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 4446:internal::TimeInMillis UnitTest::start_timestamp() const {
    $$$$$: 4446-block  0
    #####: 4447:    return impl()->start_timestamp();
    $$$$$: 4447-block  0
call    0 never executed
call    1 never executed
        -: 4448:}
        -: 4449:
        -: 4450:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 4451:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 4451-block  0
        1: 4452:  return impl()->elapsed_time();
        1: 4452-block  0
call    0 returned 1
call    1 returned 1
        -: 4453:}
        -: 4454:
        -: 4455:// Returns true iff the unit test passed (i.e. all test cases passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        2: 4456:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 4456-block  0
        1: 4456-block  1
call    0 returned 1
call    1 returned 1
        -: 4457:
        -: 4458:// Returns true iff the unit test failed (i.e. some test case failed
        -: 4459:// or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 4460:bool UnitTest::Failed() const { return impl()->Failed(); }
    $$$$$: 4460-block  0
    $$$$$: 4460-block  1
call    0 never executed
call    1 never executed
        -: 4461:
        -: 4462:// Gets the i-th test case among all the test cases. i can range from 0 to
        -: 4463:// total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest11GetTestCaseEi called 11 returned 100% blocks executed 100%
       11: 4464:const TestCase* UnitTest::GetTestCase(int i) const {
       11: 4464-block  0
       11: 4465:  return impl()->GetTestCase(i);
       11: 4465-block  0
call    0 returned 11
call    1 returned 11
        -: 4466:}
        -: 4467:
        -: 4468:// Returns the TestResult containing information on test failures and
        -: 4469:// properties logged outside of individual test cases.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 4470:const TestResult& UnitTest::ad_hoc_test_result() const {
    $$$$$: 4470-block  0
    #####: 4471:  return *impl()->ad_hoc_test_result();
    $$$$$: 4471-block  0
call    0 never executed
call    1 never executed
        -: 4472:}
        -: 4473:
        -: 4474:// Gets the i-th test case among all the test cases. i can range from 0 to
        -: 4475:// total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest18GetMutableTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 4476:TestCase* UnitTest::GetMutableTestCase(int i) {
    $$$$$: 4476-block  0
    #####: 4477:  return impl()->GetMutableTestCase(i);
    $$$$$: 4477-block  0
call    0 never executed
call    1 never executed
        -: 4478:}
        -: 4479:
        -: 4480:// Returns the list of event listeners that can be used to track events
        -: 4481:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 47 returned 100% blocks executed 100%
       47: 4482:TestEventListeners& UnitTest::listeners() {
       47: 4482-block  0
       47: 4483:  return *impl()->listeners();
       47: 4483-block  0
call    0 returned 47
call    1 returned 47
        -: 4484:}
        -: 4485:
        -: 4486:// Registers and returns a global test environment.  When a test
        -: 4487:// program is run, all global test environments will be set-up in the
        -: 4488:// order they were registered.  After all tests in the program have
        -: 4489:// finished, all global test environments will be torn-down in the
        -: 4490:// *reverse* order they were registered.
        -: 4491://
        -: 4492:// The UnitTest object takes ownership of the given environment.
        -: 4493://
        -: 4494:// We don't protect this under mutex_, as we only support calling it
        -: 4495:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 4496:Environment* UnitTest::AddEnvironment(Environment* env) {
    $$$$$: 4496-block  0
    #####: 4497:  if (env == NULL) {
    $$$$$: 4497-block  0
branch  0 never executed
branch  1 never executed
    #####: 4498:    return NULL;
    $$$$$: 4498-block  0
        -: 4499:  }
        -: 4500:
    #####: 4501:  impl_->environments().push_back(env);
    $$$$$: 4501-block  0
call    0 never executed
call    1 never executed
    #####: 4502:  return env;
        -: 4503:}
        -: 4504:
        -: 4505:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 4506:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 4507:// this to report their results.  The user code should use the
        -: 4508:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 1 returned 100% blocks executed 41%
        1: 4509:void UnitTest::AddTestPartResult(
        1: 4509-block  0
        -: 4510:    TestPartResult::Type result_type,
        -: 4511:    const char* file_name,
        -: 4512:    int line_number,
        -: 4513:    const std::string& message,
        -: 4514:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
        2: 4515:  Message msg;
        1: 4515-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    %%%%%: 4515-block  1
call    4 never executed
        1: 4516:  msg << message;
        1: 4516-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 4517:
        2: 4518:  internal::MutexLock lock(&mutex_);
        1: 4518-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    %%%%%: 4518-block  1
call    4 never executed
        1: 4519:  if (impl_->gtest_trace_stack().size() > 0) {
        1: 4519-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4519-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 4520:    msg << "\n" << GTEST_NAME_ << " trace:";
    $$$$$: 4520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4520-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4520-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4521:
    #####: 4522:    for (int i = static_cast<int>(impl_->gtest_trace_stack().size());
    $$$$$: 4522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4522-block  1
call    3 never executed
    $$$$$: 4522-block  2
    #####: 4523:         i > 0; --i) {
    $$$$$: 4523-block  0
branch  0 never executed
branch  1 never executed
    #####: 4524:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    $$$$$: 4524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4524-block  1
call    3 never executed
    #####: 4525:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4525-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4525-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 4525-block  2
call    9 never executed
    %%%%%: 4525-block  3
call   10 never executed
    %%%%%: 4525-block  4
call   11 never executed
    #####: 4526:          << " " << trace.message;
    $$$$$: 4526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4526-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4527:    }
        -: 4528:  }
        -: 4529:
        1: 4530:  if (os_stack_trace.c_str() != NULL && !os_stack_trace.empty()) {
        1: 4530-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 4530-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    $$$$$: 4530-block  2
        1: 4530-block  3
        1: 4530-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    #####: 4531:    msg << internal::kStackTraceMarker << os_stack_trace;
    $$$$$: 4531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4531-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4531-block  2
        -: 4532:  }
        -: 4533:
        -: 4534:  const TestPartResult result =
        -: 4535:    TestPartResult(result_type, file_name, line_number,
        2: 4536:                   msg.GetString().c_str());
        1: 4536-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4536-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 4536-block  2
call    7 returned 1
        1: 4536-block  3
call    8 returned 1
    %%%%%: 4536-block  4
call    9 never executed
        1: 4537:  impl_->GetTestPartResultReporterForCurrentThread()->
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4538:      ReportTestPartResult(result);
        1: 4538-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 4539:
        1: 4540:  if (result_type != TestPartResult::kSuccess) {
        1: 4540-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4541:    // gtest_break_on_failure takes precedence over
        -: 4542:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 4543:    // in the code (perhaps in order to use Google Test assertions
        -: 4544:    // with another testing framework) and specify the former on the
        -: 4545:    // command line for debugging.
        1: 4546:    if (GTEST_FLAG(break_on_failure)) {
        1: 4546-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4547:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 4548:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 4549:      // when a failure happens and both the --gtest_break_on_failure and
        -: 4550:      // the --gtest_catch_exceptions flags are specified.
    #####: 4551:      DebugBreak();
    $$$$$: 4551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4551-block  1
        -: 4552:#elif (!defined(__native_client__)) &&            \
        -: 4553:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 4554:     (defined(__x86_64__) || defined(__i386__)))
        -: 4555:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 4556:      asm("int3");
        -: 4557:#else
        -: 4558:      // Dereference NULL through a volatile pointer to prevent the compiler
        -: 4559:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 4560:      // portability: Symbian doesn't implement abort() well, and some debuggers
        -: 4561:      // don't correctly trap abort().
        -: 4562:      *static_cast<volatile int*>(NULL) = 1;
        -: 4563:#endif  // GTEST_OS_WINDOWS
        1: 4564:    } else if (GTEST_FLAG(throw_on_failure)) {
        1: 4564-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4565:#if GTEST_HAS_EXCEPTIONS
    #####: 4566:      throw internal::GoogleTestFailureException(result);
    $$$$$: 4566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4566-block  1
call    4 never executed
    %%%%%: 4566-block  2
call    5 never executed
        -: 4567:#else
        -: 4568:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 4569:      // that cannot be suppressed in VC 7.1 or below.
        -: 4570:      exit(1);
        -: 4571:#endif
        -: 4572:    }
        -: 4573:  }
        1: 4574:}
        -: 4575:
        -: 4576:// Adds a TestProperty to the current TestResult object when invoked from
        -: 4577:// inside a test, to current TestCase's ad_hoc_test_result_ when invoked
        -: 4578:// from SetUpTestCase or TearDownTestCase, or to the global property set
        -: 4579:// when invoked elsewhere.  If the result already contains a property with
        -: 4580:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 4581:void UnitTest::RecordProperty(const std::string& key,
    $$$$$: 4581-block  0
        -: 4582:                              const std::string& value) {
    #####: 4583:  impl_->RecordProperty(TestProperty(key, value));
    $$$$$: 4583-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4583-block  1
call    4 never executed
    %%%%%: 4583-block  2
call    5 never executed
    #####: 4584:}
        -: 4585:
        -: 4586:// Runs all tests in this UnitTest object and prints the result.
        -: 4587:// Returns 0 if successful, or 1 otherwise.
        -: 4588://
        -: 4589:// We don't protect this under mutex_, as we only support calling it
        -: 4590:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 4591:int UnitTest::Run() {
        1: 4591-block  0
        -: 4592:  const bool in_death_test_child_process =
        1: 4593:      internal::GTEST_FLAG(internal_run_death_test).length() > 0;
        1: 4593-block  0
call    0 returned 1
        -: 4594:
        -: 4595:  // Google Test implements this protocol for catching that a test
        -: 4596:  // program exits before returning control to Google Test:
        -: 4597:  //
        -: 4598:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 4599:  //      is specified by the environment variable
        -: 4600:  //      TEST_PREMATURE_EXIT_FILE.
        -: 4601:  //   2. When Google Test has finished its work, it deletes the file.
        -: 4602:  //
        -: 4603:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 4604:  // running a Google-Test-based test program and check the existence
        -: 4605:  // of the file at the end of the test execution to see if it has
        -: 4606:  // exited prematurely.
        -: 4607:
        -: 4608:  // If we are in the child process of a death test, don't
        -: 4609:  // create/delete the premature exit file, as doing so is unnecessary
        -: 4610:  // and will confuse the parent process.  Otherwise, create/delete
        -: 4611:  // the file upon entering/leaving this function.  If the program
        -: 4612:  // somehow exits before this function has a chance to return, the
        -: 4613:  // premature-exit file will be left undeleted, causing a test runner
        -: 4614:  // that understands the premature-exit-file protocol to report the
        -: 4615:  // test as having failed.
        -: 4616:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 4617:      in_death_test_child_process ?
        2: 4618:      NULL : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 4618-block  0
        1: 4618-block  1
call    2 returned 1
        1: 4618-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4618-block  3
call    6 returned 1
    %%%%%: 4618-block  4
call    7 never executed
        -: 4619:
        -: 4620:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 4621:  // used for the duration of the program.
        1: 4622:  impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));
        1: 4622-block  0
call    0 returned 1
call    1 returned 1
        -: 4623:
        -: 4624:#if GTEST_HAS_SEH
        -: 4625:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 4626:  // tests or this is executing in the context of death test child
        -: 4627:  // process. In either case the user does not want to see pop-up dialogs
        -: 4628:  // about crashes - they are expected.
        -: 4629:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 4630:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 4631:    // SetErrorMode doesn't exist on CE.
        -: 4632:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 4633:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 4634:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 4635:
        -: 4636:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 4637:    // Death test children can be terminated with _abort().  On Windows,
        -: 4638:    // _abort() can show a dialog with a warning message.  This forces the
        -: 4639:    // abort message to go to stderr instead.
        -: 4640:    _set_error_mode(_OUT_TO_STDERR);
        -: 4641:# endif
        -: 4642:
        -: 4643:# if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE
        -: 4644:    // In the debug version, Visual Studio pops up a separate dialog
        -: 4645:    // offering a choice to debug the aborted program. We need to suppress
        -: 4646:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 4647:    // executed. Google Test will notify the user of any unexpected
        -: 4648:    // failure via stderr.
        -: 4649:    //
        -: 4650:    // VC++ doesn't define _set_abort_behavior() prior to the version 8.0.
        -: 4651:    // Users of prior VC versions shall suffer the agony and pain of
        -: 4652:    // clicking through the countless debug dialogs.
        -: 4653:    // TODO(vladl@google.com): find a way to suppress the abort dialog() in the
        -: 4654:    // debug mode when compiled with VC 7.1 or lower.
        -: 4655:    if (!GTEST_FLAG(break_on_failure))
        -: 4656:      _set_abort_behavior(
        -: 4657:          0x0,                                    // Clear the following flags:
        -: 4658:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 4659:# endif
        -: 4660:  }
        -: 4661:#endif  // GTEST_HAS_SEH
        -: 4662:
        1: 4663:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 4664:      impl(),
        -: 4665:      &internal::UnitTestImpl::RunAllTests,
        2: 4666:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 4666-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 4666-block  1
        1: 4666-block  2
        1: 4666-block  3
        -: 4667:}
        -: 4668:
        -: 4669:// Returns the working directory when the first TEST() or TEST_F() was
        -: 4670:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 4671:const char* UnitTest::original_working_dir() const {
    $$$$$: 4671-block  0
    #####: 4672:  return impl_->original_working_dir_.c_str();
    $$$$$: 4672-block  0
call    0 never executed
        -: 4673:}
        -: 4674:
        -: 4675:// Returns the TestCase object for the test that's currently running,
        -: 4676:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 4677:const TestCase* UnitTest::current_test_case() const
    $$$$$: 4677-block  0
        -: 4678:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4679:  internal::MutexLock lock(&mutex_);
    $$$$$: 4679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4680:  return impl_->current_test_case();
    $$$$$: 4680-block  0
call    0 never executed
    $$$$$: 4680-block  1
        -: 4681:}
        -: 4682:
        -: 4683:// Returns the TestInfo object for the test that's currently running,
        -: 4684:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 4685:const TestInfo* UnitTest::current_test_info() const
    $$$$$: 4685-block  0
        -: 4686:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4687:  internal::MutexLock lock(&mutex_);
    $$$$$: 4687-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4688:  return impl_->current_test_info();
    $$$$$: 4688-block  0
call    0 never executed
    $$$$$: 4688-block  1
        -: 4689:}
        -: 4690:
        -: 4691:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 4692:int UnitTest::random_seed() const { return impl_->random_seed(); }
    $$$$$: 4692-block  0
    $$$$$: 4692-block  1
call    0 never executed
        -: 4693:
        -: 4694:// Returns ParameterizedTestCaseRegistry object used to keep track of
        -: 4695:// value-parameterized tests and instantiate and register them.
        -: 4696:internal::ParameterizedTestCaseRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 4697:    UnitTest::parameterized_test_registry()
    $$$$$: 4697-block  0
        -: 4698:        GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4699:  return impl_->parameterized_test_registry();
    $$$$$: 4699-block  0
call    0 never executed
        -: 4700:}
        -: 4701:
        -: 4702:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 63%
        2: 4703:UnitTest::UnitTest() {
        1: 4703-block  0
        1: 4703-block  1
call    0 returned 1
    %%%%%: 4703-block  2
call    1 never executed
        1: 4704:  impl_ = new internal::UnitTestImpl(this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4704-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%: 4704-block  1
call    6 never executed
        1: 4705:}
        1: 4705-block  0
        -: 4706:
        -: 4707:// Destructor of UnitTest.
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        2: 4708:UnitTest::~UnitTest() {
    $$$$$: 4708-block  0
        1: 4708-block  1
        1: 4708-block  2
call    0 returned 1
        1: 4709:  delete impl_;
        1: 4709-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4709-block  1
call    2 returned 1
    #####: 4710:}
    $$$$$: 4710-block  0
call    0 never executed
call    1 never executed
        -: 4711:
        -: 4712:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 4713:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 4714:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
    $$$$$: 4714-block  0
        -: 4715:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4716:  internal::MutexLock lock(&mutex_);
    $$$$$: 4716-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4716-block  1
call    3 never executed
    %%%%%: 4716-block  2
call    4 never executed
    #####: 4717:  impl_->gtest_trace_stack().push_back(trace);
    $$$$$: 4717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4717-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4718:}
        -: 4719:
        -: 4720:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 4721:void UnitTest::PopGTestTrace()
    $$$$$: 4721-block  0
        -: 4722:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4723:  internal::MutexLock lock(&mutex_);
    $$$$$: 4723-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 4723-block  1
call    4 never executed
    #####: 4724:  impl_->gtest_trace_stack().pop_back();
    $$$$$: 4724-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4724-block  1
call    3 never executed
    #####: 4725:}
        -: 4726:
        -: 4727:namespace internal {
        -: 4728:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 45%
        1: 4729:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 4729-block  0
        -: 4730:    : parent_(parent),
        -: 4731:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 4732:      default_global_test_part_result_reporter_(this),
        -: 4733:      default_per_thread_test_part_result_reporter_(this),
        -: 4734:      GTEST_DISABLE_MSC_WARNINGS_POP_()
        -: 4735:      global_test_part_result_repoter_(
        -: 4736:          &default_global_test_part_result_reporter_),
        -: 4737:      per_thread_test_part_result_reporter_(
        -: 4738:          &default_per_thread_test_part_result_reporter_),
        -: 4739:      parameterized_test_registry_(),
        -: 4740:      parameterized_tests_registered_(false),
        -: 4741:      last_death_test_case_(-1),
        -: 4742:      current_test_case_(NULL),
        -: 4743:      current_test_info_(NULL),
        -: 4744:      ad_hoc_test_result_(),
        -: 4745:      os_stack_trace_getter_(NULL),
        -: 4746:      post_flag_parse_init_performed_(false),
        -: 4747:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 4748:      random_(0),  // Will be reseeded before first use.
        -: 4749:      start_timestamp_(0),
        -: 4750:      elapsed_time_(0),
        -: 4751:#if GTEST_HAS_DEATH_TEST
        1: 4752:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4752-block  0
call    3 returned 1
        -: 4753:#endif
        -: 4754:      // Will be overridden by the flag before first use.
        2: 4755:      catch_exceptions_(false) {
        1: 4755-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4755-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 4755-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1: 4755-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1: 4755-block  4
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
branch 23 taken 1 (fallthrough)
branch 24 taken 0 (throw)
    %%%%%: 4755-block  5
    %%%%%: 4755-block  6
call   25 never executed
    %%%%%: 4755-block  7
call   26 never executed
    %%%%%: 4755-block  8
call   27 never executed
    %%%%%: 4755-block  9
call   28 never executed
    %%%%%: 4755-block 10
call   29 never executed
    %%%%%: 4755-block 11
call   30 never executed
    %%%%%: 4755-block 12
call   31 never executed
    %%%%%: 4755-block 13
call   32 never executed
    %%%%%: 4755-block 14
call   33 never executed
    %%%%%: 4755-block 15
call   34 never executed
    %%%%%: 4755-block 16
call   35 never executed
    %%%%%: 4755-block 17
call   36 never executed
    %%%%%: 4755-block 18
call   37 never executed
    %%%%%: 4755-block 19
call   38 never executed
        1: 4756:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 4756-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4756-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 4757:}
        1: 4757-block  0
        -: 4758:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        3: 4759:UnitTestImpl::~UnitTestImpl() {
        1: 4759-block  0
        1: 4759-block  1
        1: 4759-block  2
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
        -: 4760:  // Deletes every TestCase.
        1: 4761:  ForEach(test_cases_, internal::Delete<TestCase>);
        1: 4761-block  0
call    0 returned 1
        -: 4762:
        -: 4763:  // Deletes every Environment.
        1: 4764:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
        -: 4765:
        1: 4766:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4766-block  0
call    2 returned 1
        1: 4767:}
        1: 4767-block  0
call    0 returned 1
call    1 returned 1
        -: 4768:
        -: 4769:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 4770:// context of a test, to current test case's ad_hoc_test_result when invoke
        -: 4771:// from SetUpTestCase/TearDownTestCase, or to the global property set
        -: 4772:// otherwise.  If the result already contains a property with the same key,
        -: 4773:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 4774:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    $$$$$: 4774-block  0
    #####: 4775:  std::string xml_element;
    $$$$$: 4775-block  0
call    0 never executed
    $$$$$: 4775-block  1
call    1 never executed
    %%%%%: 4775-block  2
call    2 never executed
        -: 4776:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 4777:
    #####: 4778:  if (current_test_info_ != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 4779:    xml_element = "testcase";
    $$$$$: 4779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4780:    test_result = &(current_test_info_->result_);
    $$$$$: 4780-block  0
    #####: 4781:  } else if (current_test_case_ != NULL) {
    $$$$$: 4781-block  0
branch  0 never executed
branch  1 never executed
    #####: 4782:    xml_element = "testsuite";
    $$$$$: 4782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4783:    test_result = &(current_test_case_->ad_hoc_test_result_);
    $$$$$: 4783-block  0
        -: 4784:  } else {
    #####: 4785:    xml_element = "testsuites";
    $$$$$: 4785-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4786:    test_result = &ad_hoc_test_result_;
    $$$$$: 4786-block  0
        -: 4787:  }
    #####: 4788:  test_result->RecordProperty(xml_element, test_property);
    $$$$$: 4788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4789:}
        -: 4790:
        -: 4791:#if GTEST_HAS_DEATH_TEST
        -: 4792:// Disables event forwarding if the control is currently in a death test
        -: 4793:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 4794:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 4794-block  0
        1: 4795:  if (internal_run_death_test_flag_.get() != NULL)
        1: 4795-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4796:    listeners()->SuppressEventForwarding();
    $$$$$: 4796-block  0
call    0 never executed
call    1 never executed
        1: 4797:}
        -: 4798:#endif  // GTEST_HAS_DEATH_TEST
        -: 4799:
        -: 4800:// Initializes event listeners performing XML output as specified by
        -: 4801:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 23%
        1: 4802:void UnitTestImpl::ConfigureXmlOutput() {
        1: 4802-block  0
        2: 4803:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 4803-block  0
call    0 returned 1
        1: 4803-block  1
call    1 returned 1
    %%%%%: 4803-block  2
call    2 never executed
        1: 4804:  if (output_format == "xml") {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4804-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 4805:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    $$$$$: 4805-block  0
call    0 never executed
    #####: 4806:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
    $$$$$: 4806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4806-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4806-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4806-block  3
call   13 never executed
    %%%%%: 4806-block  4
call   14 never executed
    %%%%%: 4806-block  5
call   15 never executed
        1: 4807:  } else if (output_format == "json") {
        1: 4807-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4807-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 4808:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    $$$$$: 4808-block  0
call    0 never executed
    #####: 4809:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
    $$$$$: 4809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4809-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4809-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4809-block  3
call   13 never executed
    %%%%%: 4809-block  4
call   14 never executed
    %%%%%: 4809-block  5
call   15 never executed
        1: 4810:  } else if (output_format != "") {
        1: 4810-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4810-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 4811:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    $$$$$: 4811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4811-block  1
call    3 never executed
    $$$$$: 4811-block  2
call    4 never executed
    %%%%%: 4811-block  3
call    5 never executed
    #####: 4812:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4812-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4812-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4813:  }
        1: 4814:}
        -: 4815:
        -: 4816:#if GTEST_CAN_STREAM_RESULTS_
        -: 4817:// Initializes event listeners for streaming test results in string form.
        -: 4818:// Must not be called before InitGoogleTest.
        -: 4819:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 4820:  const std::string& target = GTEST_FLAG(stream_result_to);
        -: 4821:  if (!target.empty()) {
        -: 4822:    const size_t pos = target.find(':');
        -: 4823:    if (pos != std::string::npos) {
        -: 4824:      listeners()->Append(new StreamingListener(target.substr(0, pos),
        -: 4825:                                                target.substr(pos+1)));
        -: 4826:    } else {
        -: 4827:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 4828:                          << "\" ignored.";
        -: 4829:    }
        -: 4830:  }
        -: 4831:}
        -: 4832:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 4833:
        -: 4834:// Performs initialization dependent upon flag values obtained in
        -: 4835:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 4836:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 4837:// this function is also called from RunAllTests.  Since this function can be
        -: 4838:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 100%
        2: 4839:void UnitTestImpl::PostFlagParsingInit() {
        2: 4839-block  0
        -: 4840:  // Ensures that this function does not execute more than once.
        2: 4841:  if (!post_flag_parse_init_performed_) {
        2: 4841-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 4842:    post_flag_parse_init_performed_ = true;
        -: 4843:
        -: 4844:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 4845:    // Register to send notifications about key process state changes.
        -: 4846:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 4847:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 4848:
        -: 4849:#if GTEST_HAS_DEATH_TEST
        1: 4850:    InitDeathTestSubprocessControlInfo();
        1: 4850-block  0
call    0 returned 1
        1: 4851:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 4852:#endif  // GTEST_HAS_DEATH_TEST
        -: 4853:
        -: 4854:    // Registers parameterized tests. This makes parameterized tests
        -: 4855:    // available to the UnitTest reflection API without running
        -: 4856:    // RUN_ALL_TESTS.
        1: 4857:    RegisterParameterizedTests();
call    0 returned 1
        -: 4858:
        -: 4859:    // Configures listeners for XML output. This makes it possible for users
        -: 4860:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 4861:    ConfigureXmlOutput();
call    0 returned 1
        -: 4862:
        -: 4863:#if GTEST_CAN_STREAM_RESULTS_
        -: 4864:    // Configures listeners for streaming test results to the specified server.
        -: 4865:    ConfigureStreamingOutput();
        -: 4866:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 4867:  }
        2: 4868:}
        -: 4869:
        -: 4870:// A predicate that checks the name of a TestCase against a known
        -: 4871:// value.
        -: 4872://
        -: 4873:// This is used for implementation of the UnitTest class only.  We put
        -: 4874:// it in the anonymous namespace to prevent polluting the outer
        -: 4875:// namespace.
        -: 4876://
        -: 4877:// TestCaseNameIs is copyable.
function _ZN7testing8internal14TestCaseNameIsC1ERKS1_ called 144 returned 100% blocks executed 100%
function _ZN7testing8internal14TestCaseNameIsD1Ev called 180 returned 100% blocks executed 100%
      648: 4878:class TestCaseNameIs {
      144: 4878-block  0
      144: 4878-block  1
call    0 returned 144
      180: 4878-block  2
      180: 4878-block  3
call    1 returned 180
        -: 4879: public:
        -: 4880:  // Constructor.
function _ZN7testing8internal14TestCaseNameIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 36 returned 100% blocks executed 100%
       36: 4881:  explicit TestCaseNameIs(const std::string& name)
       36: 4881-block  0
       36: 4882:      : name_(name) {}
       36: 4882-block  0
call    0 returned 36
        -: 4883:
        -: 4884:  // Returns true iff the name of test_case matches name_.
function _ZNK7testing8internal14TestCaseNameIsclEPKNS_8TestCaseE called 238 returned 100% blocks executed 100%
      238: 4885:  bool operator()(const TestCase* test_case) const {
      238: 4885-block  0
      238: 4886:    return test_case != NULL && strcmp(test_case->name(), name_.c_str()) == 0;
      238: 4886-block  0
branch  0 taken 238 (fallthrough)
branch  1 taken 0
      238: 4886-block  1
call    2 returned 238
call    3 returned 238
branch  4 taken 25 (fallthrough)
branch  5 taken 213
       25: 4886-block  2
      213: 4886-block  3
      238: 4886-block  4
        -: 4887:  }
        -: 4888:
        -: 4889: private:
        -: 4890:  std::string name_;
        -: 4891:};
        -: 4892:
        -: 4893:// Finds and returns a TestCase with the given name.  If one doesn't
        -: 4894:// exist, creates one and returns it.  It's the CALLER'S
        -: 4895:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 4896:// TESTS ARE NOT SHUFFLED.
        -: 4897://
        -: 4898:// Arguments:
        -: 4899://
        -: 4900://   test_case_name: name of the test case
        -: 4901://   type_param:     the name of the test case's type parameter, or NULL if
        -: 4902://                   this is not a typed or a type-parameterized test case.
        -: 4903://   set_up_tc:      pointer to the function that sets up the test case
        -: 4904://   tear_down_tc:   pointer to the function that tears down the test case
function _ZN7testing8internal12UnitTestImpl11GetTestCaseEPKcS3_PFvvES5_ called 36 returned 100% blocks executed 59%
       36: 4905:TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,
       36: 4905-block  0
        -: 4906:                                    const char* type_param,
        -: 4907:                                    Test::SetUpTestCaseFunc set_up_tc,
        -: 4908:                                    Test::TearDownTestCaseFunc tear_down_tc) {
        -: 4909:  // Can we find a TestCase with the given name?
        -: 4910:  const std::vector<TestCase*>::const_iterator test_case =
       36: 4911:      std::find_if(test_cases_.begin(), test_cases_.end(),
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       72: 4912:                   TestCaseNameIs(test_case_name));
       36: 4912-block  0
call    0 returned 36
call    1 returned 36
branch  2 taken 36 (fallthrough)
branch  3 taken 0 (throw)
       36: 4912-block  1
call    4 returned 36
branch  5 taken 36 (fallthrough)
branch  6 taken 0 (throw)
       36: 4912-block  2
call    7 returned 36
call    8 returned 36
       36: 4912-block  3
call    9 returned 36
call   10 returned 36
call   11 returned 36
call   12 returned 36
    %%%%%: 4912-block  4
call   13 never executed
    %%%%%: 4912-block  5
call   14 never executed
    %%%%%: 4912-block  6
call   15 never executed
        -: 4913:
       36: 4914:  if (test_case != test_cases_.end())
call    0 returned 36
call    1 returned 36
branch  2 taken 25 (fallthrough)
branch  3 taken 11
       25: 4915:    return *test_case;
       25: 4915-block  0
call    0 returned 25
        -: 4916:
        -: 4917:  // No.  Let's create one.
        -: 4918:  TestCase* const new_test_case =
       11: 4919:      new TestCase(test_case_name, type_param, set_up_tc, tear_down_tc);
       11: 4919-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 4919-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%: 4919-block  2
call    6 never executed
        -: 4920:
        -: 4921:  // Is this a death test case?
       11: 4922:  if (internal::UnitTestOptions::MatchesFilter(test_case_name,
       11: 4922-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 4922-block  1
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0 (throw)
       11: 4922-block  2
call    7 returned 11
call    8 returned 11
branch  9 taken 0 (fallthrough)
branch 10 taken 11
    %%%%%: 4922-block  3
call   11 never executed
    %%%%%: 4922-block  4
call   12 never executed
        -: 4923:                                               kDeathTestCaseFilter)) {
        -: 4924:    // Yes.  Inserts the test case after the last death test case
        -: 4925:    // defined so far.  This only works when the test cases haven't
        -: 4926:    // been shuffled.  Otherwise we may end up running a death test
        -: 4927:    // after a non-death test.
    #####: 4928:    ++last_death_test_case_;
    #####: 4929:    test_cases_.insert(test_cases_.begin() + last_death_test_case_,
    $$$$$: 4929-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4929-block  1
    %%%%%: 4929-block  2
    %%%%%: 4929-block  3
    #####: 4930:                       new_test_case);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4930-block  0
        -: 4931:  } else {
        -: 4932:    // No.  Appends to the end of the list.
       11: 4933:    test_cases_.push_back(new_test_case);
       11: 4933-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -: 4934:  }
        -: 4935:
       11: 4936:  test_case_indices_.push_back(static_cast<int>(test_case_indices_.size()));
       11: 4936-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
    %%%%%: 4936-block  1
       36: 4937:  return new_test_case;
       11: 4937-block  0
       36: 4937-block  1
       36: 4937-block  2
        -: 4938:}
        -: 4939:
        -: 4940:// Helpers for setting up / tearing down the given environment.  They
        -: 4941:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 4942:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    $$$$$: 4942-block  0
    $$$$$: 4942-block  1
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 4943:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    $$$$$: 4943-block  0
    $$$$$: 4943-block  1
call    0 never executed
        -: 4944:
        -: 4945:// Runs all tests in this UnitTest object, prints the result, and
        -: 4946:// returns true if all tests are successful.  If any exception is
        -: 4947:// thrown during a test, the test is considered to be failed, but the
        -: 4948:// rest of the tests will still be run.
        -: 4949://
        -: 4950:// When parameterized tests are enabled, it expands and registers
        -: 4951:// parameterized tests first in RegisterParameterizedTests().
        -: 4952:// All other functions called from RunAllTests() may safely assume that
        -: 4953:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 80%
        1: 4954:bool UnitTestImpl::RunAllTests() {
        1: 4954-block  0
        -: 4955:  // True iff Google Test is initialized before RUN_ALL_TESTS() is called.
        1: 4956:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 4956-block  0
call    0 returned 1
        -: 4957:
        -: 4958:  // Do not run any test if the --help flag was specified.
        1: 4959:  if (g_help_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4960:    return true;
    $$$$$: 4960-block  0
        -: 4961:
        -: 4962:  // Repeats the call to the post-flag parsing initialization in case the
        -: 4963:  // user didn't call InitGoogleTest.
        1: 4964:  PostFlagParsingInit();
        1: 4964-block  0
call    0 returned 1
        -: 4965:
        -: 4966:  // Even if sharding is not on, test runners may want to use the
        -: 4967:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 4968:  // protocol.
        1: 4969:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 4970:
        -: 4971:  // True iff we are in a subprocess for running a thread-safe-style
        -: 4972:  // death test.
        1: 4973:  bool in_subprocess_for_death_test = false;
        -: 4974:
        -: 4975:#if GTEST_HAS_DEATH_TEST
        1: 4976:  in_subprocess_for_death_test = (internal_run_death_test_flag_.get() != NULL);
call    0 returned 1
        -: 4977:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 4978:  if (in_subprocess_for_death_test) {
        -: 4979:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 4980:  }
        -: 4981:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 4982:#endif  // GTEST_HAS_DEATH_TEST
        -: 4983:
        1: 4984:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
        1: 4985:                                        in_subprocess_for_death_test);
call    0 returned 1
        -: 4986:
        -: 4987:  // Compares the full test names with the filter to decide which
        -: 4988:  // tests to run.
        1: 4989:  const bool has_tests_to_run = FilterTests(should_shard
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 4989-block  0
        1: 4989-block  1
        1: 4989-block  2
call    2 returned 1
        -: 4990:                                              ? HONOR_SHARDING_PROTOCOL
        1: 4991:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 4992:
        -: 4993:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 4994:  if (GTEST_FLAG(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4995:    // This must be called *after* FilterTests() has been called.
    #####: 4996:    ListTestsMatchingFilter();
    $$$$$: 4996-block  0
call    0 never executed
    #####: 4997:    return true;
        -: 4998:  }
        -: 4999:
        1: 5000:  random_seed_ = GTEST_FLAG(shuffle) ?
        1: 5000-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5000-block  1
call    2 never executed
        1: 5000-block  2
    #####: 5001:      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;
        -: 5002:
        -: 5003:  // True iff at least one test has failed.
        1: 5004:  bool failed = false;
        -: 5005:
        1: 5006:  TestEventListener* repeater = listeners()->repeater();
        1: 5006-block  0
call    0 returned 1
call    1 returned 1
        -: 5007:
        1: 5008:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5009:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5010:
        -: 5011:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5012:  // when we are inside the subprocess of a death test.
        1: 5013:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5013-block  0
        1: 5013-block  1
        -: 5014:  // Repeats forever if the repeat count is negative.
        1: 5015:  const bool forever = repeat < 0;
        2: 5016:  for (int i = 0; forever || i != repeat; i++) {
        1: 5016-block  0
        2: 5016-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5016-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5016-block  3
        -: 5017:    // We want to preserve failures generated by ad-hoc test
        -: 5018:    // assertions executed before RUN_ALL_TESTS().
        1: 5019:    ClearNonAdHocTestResult();
        1: 5019-block  0
call    0 returned 1
        -: 5020:
        1: 5021:    const TimeInMillis start = GetTimeInMillis();
call    0 returned 1
        -: 5022:
        -: 5023:    // Shuffles test cases and tests if requested.
        1: 5024:    if (has_tests_to_run && GTEST_FLAG(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5024-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5025:      random()->Reseed(random_seed_);
    $$$$$: 5025-block  0
call    0 never executed
call    1 never executed
        -: 5026:      // This should be done before calling OnTestIterationStart(),
        -: 5027:      // such that a test event listener can see the actual test order
        -: 5028:      // in the event.
    #####: 5029:      ShuffleTests();
call    0 never executed
        -: 5030:    }
        -: 5031:
        -: 5032:    // Tells the unit test event listeners that the tests are about to start.
        1: 5033:    repeater->OnTestIterationStart(*parent_, i);
        1: 5033-block  0
call    0 returned 1
        -: 5034:
        -: 5035:    // Runs each test case if there is at least one test to run.
        1: 5036:    if (has_tests_to_run) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5037:      // Sets up all environments beforehand.
        1: 5038:      repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5038-block  0
call    0 returned 1
        1: 5039:      ForEach(environments_, SetUpEnvironment);
call    0 returned 1
        1: 5040:      repeater->OnEnvironmentsSetUpEnd(*parent_);
call    0 returned 1
        -: 5041:
        -: 5042:      // Runs the tests only if there was no fatal failure during global
        -: 5043:      // set-up.
        1: 5044:      if (!Test::HasFatalFailure()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       12: 5045:        for (int test_index = 0; test_index < total_test_case_count();
        1: 5045-block  0
       12: 5045-block  1
call    0 returned 12
branch  1 taken 11 (fallthrough)
branch  2 taken 1
        1: 5045-block  2
        -: 5046:             test_index++) {
       11: 5047:          GetMutableTestCase(test_index)->Run();
       11: 5047-block  0
call    0 returned 11
call    1 returned 11
        -: 5048:        }
        -: 5049:      }
        -: 5050:
        -: 5051:      // Tears down all environments in reverse order afterwards.
        1: 5052:      repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5052-block  0
call    0 returned 1
        1: 5053:      std::for_each(environments_.rbegin(), environments_.rend(),
call    0 returned 1
call    1 returned 1
    %%%%%: 5053-block  0
        1: 5054:                    TearDownEnvironment);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5055:      repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5055-block  0
call    0 returned 1
        -: 5056:    }
        -: 5057:
        1: 5058:    elapsed_time_ = GetTimeInMillis() - start;
        1: 5058-block  0
call    0 returned 1
        -: 5059:
        -: 5060:    // Tells the unit test event listener that the tests have just finished.
        1: 5061:    repeater->OnTestIterationEnd(*parent_, i);
call    0 returned 1
        -: 5062:
        -: 5063:    // Gets the result and clears it.
        1: 5064:    if (!Passed()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 5065:      failed = true;
        1: 5065-block  0
        -: 5066:    }
        -: 5067:
        -: 5068:    // Restores the original test order after the iteration.  This
        -: 5069:    // allows the user to quickly repro a failure that happens in the
        -: 5070:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5071:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5072:    // case the user somehow changes the value of the flag somewhere
        -: 5073:    // (it's always safe to unshuffle the tests).
        1: 5074:    UnshuffleTests();
        1: 5074-block  0
call    0 returned 1
        -: 5075:
        1: 5076:    if (GTEST_FLAG(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5077:      // Picks a new random seed for each iteration.
    #####: 5078:      random_seed_ = GetNextRandomSeed(random_seed_);
    $$$$$: 5078-block  0
call    0 never executed
        -: 5079:    }
        -: 5080:  }
        -: 5081:
        1: 5082:  repeater->OnTestProgramEnd(*parent_);
        1: 5082-block  0
call    0 returned 1
        -: 5083:
        1: 5084:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5085:    ColoredPrintf(
        -: 5086:        COLOR_RED,
        -: 5087:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5088:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5089:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5090:        " will start to enforce the valid usage. "
    #####: 5091:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
    $$$$$: 5091-block  0
call    0 never executed
        -: 5092:#if GTEST_FOR_GOOGLE_
        -: 5093:    ColoredPrintf(COLOR_RED,
        -: 5094:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5095:#endif  // GTEST_FOR_GOOGLE_
        -: 5096:  }
        -: 5097:
        1: 5098:  return !failed;
        1: 5098-block  0
        1: 5098-block  1
        -: 5099:}
        -: 5100:
        -: 5101:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5102:// if the variable is present. If a file already exists at this location, this
        -: 5103:// function will write over it. If the variable is present, but the file cannot
        -: 5104:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 5105:void WriteToShardStatusFileIfNeeded() {
        1: 5105-block  0
        1: 5106:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5106-block  0
call    0 returned 1
        1: 5107:  if (test_shard_file != NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5108:    FILE* const file = posix::FOpen(test_shard_file, "w");
    $$$$$: 5108-block  0
call    0 never executed
    #####: 5109:    if (file == NULL) {
branch  0 never executed
branch  1 never executed
        -: 5110:      ColoredPrintf(COLOR_RED,
        -: 5111:                    "Could not write to the test shard status file \"%s\" "
        -: 5112:                    "specified by the %s environment variable.\n",
    #####: 5113:                    test_shard_file, kTestShardStatusFile);
    $$$$$: 5113-block  0
call    0 never executed
    #####: 5114:      fflush(stdout);
call    0 never executed
    #####: 5115:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5116:    }
    #####: 5117:    fclose(file);
    $$$$$: 5117-block  0
call    0 never executed
        -: 5118:  }
        1: 5119:}
        -: 5120:
        -: 5121:// Checks whether sharding is enabled by examining the relevant
        -: 5122:// environment variable values. If the variables are present,
        -: 5123:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5124:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5125:// disabled because it must only be applied to the original test
        -: 5126:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 10%
        2: 5127:bool ShouldShard(const char* total_shards_env,
        2: 5127-block  0
        -: 5128:                 const char* shard_index_env,
        -: 5129:                 bool in_subprocess_for_death_test) {
        2: 5130:  if (in_subprocess_for_death_test) {
        2: 5130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5131:    return false;
    $$$$$: 5131-block  0
        -: 5132:  }
        -: 5133:
        2: 5134:  const Int32 total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5134-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5135:  const Int32 shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5135-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5136:
        2: 5137:  if (total_shards == -1 && shard_index == -1) {
        2: 5137-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5137-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5138:    return false;
        2: 5138-block  0
    #####: 5139:  } else if (total_shards == -1 && shard_index != -1) {
    $$$$$: 5139-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5139-block  1
branch  2 never executed
branch  3 never executed
    #####: 5140:    const Message msg = Message()
    $$$$$: 5140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5141:      << "Invalid environment variables: you have "
    $$$$$: 5141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5142:      << kTestShardIndex << " = " << shard_index
    $$$$$: 5142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5142-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5142-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5143:      << ", but have left " << kTestTotalShards << " unset.\n";
    $$$$$: 5143-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5143-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5143-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 5143-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5143-block  4
call   12 never executed
    %%%%%: 5143-block  5
call   13 never executed
    %%%%%: 5143-block  6
    %%%%%: 5143-block  7
call   14 never executed
    #####: 5144:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5144-block  0
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5145:    fflush(stdout);
call    0 never executed
    #####: 5146:    exit(EXIT_FAILURE);
call    0 never executed
    #####: 5147:  } else if (total_shards != -1 && shard_index == -1) {
    $$$$$: 5147-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5147-block  1
branch  2 never executed
branch  3 never executed
    #####: 5148:    const Message msg = Message()
    $$$$$: 5148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5149:      << "Invalid environment variables: you have "
    $$$$$: 5149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5150:      << kTestTotalShards << " = " << total_shards
    $$$$$: 5150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5150-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5150-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5151:      << ", but have left " << kTestShardIndex << " unset.\n";
    $$$$$: 5151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5151-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5151-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 5151-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5151-block  4
call   12 never executed
    %%%%%: 5151-block  5
call   13 never executed
    %%%%%: 5151-block  6
    %%%%%: 5151-block  7
call   14 never executed
    #####: 5152:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5152-block  0
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5153:    fflush(stdout);
call    0 never executed
    #####: 5154:    exit(EXIT_FAILURE);
call    0 never executed
    #####: 5155:  } else if (shard_index < 0 || shard_index >= total_shards) {
    $$$$$: 5155-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5155-block  1
branch  2 never executed
branch  3 never executed
    #####: 5156:    const Message msg = Message()
    $$$$$: 5156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5157:      << "Invalid environment variables: we require 0 <= "
    $$$$$: 5157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5158:      << kTestShardIndex << " < " << kTestTotalShards
    $$$$$: 5158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5158-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5158-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5159:      << ", but you have " << kTestShardIndex << "=" << shard_index
    $$$$$: 5159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5159-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5159-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 5159-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5160:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    $$$$$: 5160-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5160-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5160-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 5160-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5160-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 5160-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 5160-block  6
call   18 never executed
    %%%%%: 5160-block  7
call   19 never executed
    %%%%%: 5160-block  8
    #####: 5161:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5161-block  0
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5162:    fflush(stdout);
call    0 never executed
    #####: 5163:    exit(EXIT_FAILURE);
call    0 never executed
        -: 5164:  }
        -: 5165:
        2: 5166:  return total_shards > 1;
    $$$$$: 5166-block  0
        2: 5166-block  1
        2: 5166-block  2
    %%%%%: 5166-block  3
call    0 never executed
        -: 5167:}
        -: 5168:
        -: 5169:// Parses the environment variable var as an Int32. If it is unset,
        -: 5170:// returns default_val. If it is not an Int32, prints an error
        -: 5171:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 38%
        4: 5172:Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {
        4: 5172-block  0
        4: 5173:  const char* str_val = posix::GetEnv(var);
        4: 5173-block  0
call    0 returned 4
        4: 5174:  if (str_val == NULL) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5175:    return default_val;
        4: 5175-block  0
        -: 5176:  }
        -: 5177:
        -: 5178:  Int32 result;
    #####: 5179:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    $$$$$: 5179-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5179-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5179-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$: 5179-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5179-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5179-block  5
call   15 never executed
        -: 5180:                  str_val, &result)) {
    #####: 5181:    exit(EXIT_FAILURE);
    $$$$$: 5181-block  0
call    0 never executed
        -: 5182:  }
        4: 5183:  return result;
    $$$$$: 5183-block  0
        4: 5183-block  1
        4: 5183-block  2
        -: 5184:}
        -: 5185:
        -: 5186:// Given the total number of shards, the shard index, and the test id,
        -: 5187:// returns true iff the test should be run on this shard. The test id is
        -: 5188:// some arbitrary but unique non-negative integer assigned to each test
        -: 5189:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 5190:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    $$$$$: 5190-block  0
    #####: 5191:  return (test_id % total_shards) == shard_index;
    $$$$$: 5191-block  0
        -: 5192:}
        -: 5193:
        -: 5194:// Compares the name of each test with the user-specified filter to
        -: 5195:// decide whether the test should be run, then records the result in
        -: 5196:// each TestCase and TestInfo object.
        -: 5197:// If shard_tests == true, further filters tests based on sharding
        -: 5198:// variables in the environment - see
        -: 5199:// https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md
        -: 5200:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 72%
        1: 5201:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 5201-block  0
        1: 5202:  const Int32 total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5202-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5202-block  1
call    2 never executed
        1: 5202-block  2
        1: 5203:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
        1: 5204:  const Int32 shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5204-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5204-block  1
call    2 never executed
        1: 5204-block  2
        1: 5205:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
        -: 5206:
        -: 5207:  // num_runnable_tests are the number of tests that will
        -: 5208:  // run across all shards (i.e., match filter and are not disabled).
        -: 5209:  // num_selected_tests are the number of tests to be run on
        -: 5210:  // this shard.
        1: 5211:  int num_runnable_tests = 0;
        1: 5212:  int num_selected_tests = 0;
       12: 5213:  for (size_t i = 0; i < test_cases_.size(); i++) {
        1: 5213-block  0
       12: 5213-block  1
call    0 returned 12
branch  1 taken 11 (fallthrough)
branch  2 taken 1
       11: 5214:    TestCase* const test_case = test_cases_[i];
       11: 5214-block  0
call    0 returned 11
       22: 5215:    const std::string &test_case_name = test_case->name();
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0 (throw)
       11: 5215-block  0
call    5 returned 11
       11: 5215-block  1
call    6 returned 11
    %%%%%: 5215-block  2
call    7 never executed
call    8 never executed
    %%%%%: 5215-block  3
call    9 never executed
    %%%%%: 5215-block  4
call   10 never executed
       11: 5216:    test_case->set_should_run(false);
call    0 returned 11
        -: 5217:
       47: 5218:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
       47: 5218-block  0
call    0 returned 47
call    1 returned 47
branch  2 taken 36 (fallthrough)
branch  3 taken 11
       36: 5219:      TestInfo* const test_info = test_case->test_info_list()[j];
       36: 5219-block  0
call    0 returned 36
call    1 returned 36
       72: 5220:      const std::string test_name(test_info->name());
call    0 returned 36
call    1 returned 36
call    2 returned 36
branch  3 taken 36 (fallthrough)
branch  4 taken 0 (throw)
       36: 5220-block  0
call    5 returned 36
call    6 returned 36
    %%%%%: 5220-block  1
call    7 never executed
    %%%%%: 5220-block  2
        -: 5221:      // A test is disabled if test case name or test name matches
        -: 5222:      // kDisableTestFilter.
        -: 5223:      const bool is_disabled =
       36: 5224:          internal::UnitTestOptions::MatchesFilter(test_case_name,
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       72: 5225:                                                   kDisableTestFilter) ||
       36: 5225-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 5225-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 36
    $$$$$: 5225-block  2
       36: 5225-block  3
       36: 5226:          internal::UnitTestOptions::MatchesFilter(test_name,
       36: 5226-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36: 5227:                                                   kDisableTestFilter);
       36: 5228:      test_info->is_disabled_ = is_disabled;
        -: 5229:
        -: 5230:      const bool matches_filter =
        -: 5231:          internal::UnitTestOptions::FilterMatchesTest(test_case_name,
       36: 5232:                                                       test_name);
       36: 5232-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36: 5233:      test_info->matches_filter_ = matches_filter;
        -: 5234:
        -: 5235:      const bool is_runnable =
       36: 5236:          (GTEST_FLAG(also_run_disabled_tests) || !is_disabled) &&
       36: 5236-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 5236-block  1
branch  2 taken 36 (fallthrough)
branch  3 taken 0
       36: 5236-block  2
branch  4 taken 36 (fallthrough)
branch  5 taken 0
       36: 5236-block  3
    $$$$$: 5236-block  4
       36: 5237:          matches_filter;
        -: 5238:
        -: 5239:      const bool is_in_another_shard =
       36: 5240:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       36: 5240-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 36
branch  2 never executed
branch  3 never executed
    $$$$$: 5240-block  1
       36: 5240-block  2
    #####: 5241:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    $$$$$: 5241-block  0
call    0 never executed
       36: 5242:      test_info->is_in_another_shard_ = is_in_another_shard;
       36: 5243:      const bool is_selected = is_runnable && !is_in_another_shard;
       36: 5243-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 0
       36: 5243-block  1
branch  2 taken 36 (fallthrough)
branch  3 taken 0
       36: 5243-block  2
    $$$$$: 5243-block  3
        -: 5244:
       36: 5245:      num_runnable_tests += is_runnable;
       36: 5246:      num_selected_tests += is_selected;
        -: 5247:
       36: 5248:      test_info->should_run_ = is_selected;
       36: 5249:      test_case->set_should_run(test_case->should_run() || is_selected);
       36: 5249-block  0
call    0 returned 36
branch  1 taken 11 (fallthrough)
branch  2 taken 25
       11: 5249-block  1
branch  3 taken 11 (fallthrough)
branch  4 taken 0
       36: 5249-block  2
    $$$$$: 5249-block  3
       36: 5249-block  4
call    5 returned 36
        -: 5250:    }
        -: 5251:  }
        1: 5252:  return num_selected_tests;
        1: 5252-block  0
        1: 5252-block  1
        -: 5253:}
        -: 5254:
        -: 5255:// Prints the given C-string on a single line by replacing all '\n'
        -: 5256:// characters with string "\\n".  If the output takes more than
        -: 5257:// max_length characters, only prints the first max_length characters
        -: 5258:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 5259:static void PrintOnOneLine(const char* str, int max_length) {
    $$$$$: 5259-block  0
    #####: 5260:  if (str != NULL) {
    $$$$$: 5260-block  0
branch  0 never executed
branch  1 never executed
    #####: 5261:    for (int i = 0; *str != '\0'; ++str) {
    $$$$$: 5261-block  0
    $$$$$: 5261-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5261-block  2
    $$$$$: 5261-block  3
    #####: 5262:      if (i >= max_length) {
    $$$$$: 5262-block  0
branch  0 never executed
branch  1 never executed
    #####: 5263:        printf("...");
    #####: 5264:        break;
    $$$$$: 5264-block  0
        -: 5265:      }
    #####: 5266:      if (*str == '\n') {
    $$$$$: 5266-block  0
branch  0 never executed
branch  1 never executed
    #####: 5267:        printf("\\n");
    #####: 5268:        i += 2;
    $$$$$: 5268-block  0
        -: 5269:      } else {
    #####: 5270:        printf("%c", *str);
    #####: 5271:        ++i;
    $$$$$: 5271-block  0
        -: 5272:      }
        -: 5273:    }
        -: 5274:  }
    #####: 5275:}
        -: 5276:
        -: 5277:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 5278:void UnitTestImpl::ListTestsMatchingFilter() {
    $$$$$: 5278-block  0
        -: 5279:  // Print at most this many characters for each type/value parameter.
    #####: 5280:  const int kMaxParamLength = 250;
        -: 5281:
    #####: 5282:  for (size_t i = 0; i < test_cases_.size(); i++) {
    $$$$$: 5282-block  0
    $$$$$: 5282-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5282-block  2
    #####: 5283:    const TestCase* const test_case = test_cases_[i];
    $$$$$: 5283-block  0
call    0 never executed
    #####: 5284:    bool printed_test_case_name = false;
        -: 5285:
    #####: 5286:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
    $$$$$: 5286-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5286-block  1
        -: 5287:      const TestInfo* const test_info =
    #####: 5288:          test_case->test_info_list()[j];
    $$$$$: 5288-block  0
call    0 never executed
call    1 never executed
    #####: 5289:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 5290:        if (!printed_test_case_name) {
    $$$$$: 5290-block  0
branch  0 never executed
branch  1 never executed
    #####: 5291:          printed_test_case_name = true;
    #####: 5292:          printf("%s.", test_case->name());
    $$$$$: 5292-block  0
call    0 never executed
    #####: 5293:          if (test_case->type_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5294:            printf("  # %s = ", kTypeParamLabel);
        -: 5295:            // We print the type parameter on a single line to make
        -: 5296:            // the output easy to parse by a program.
    #####: 5297:            PrintOnOneLine(test_case->type_param(), kMaxParamLength);
    $$$$$: 5297-block  0
call    0 never executed
call    1 never executed
        -: 5298:          }
    #####: 5299:          printf("\n");
    $$$$$: 5299-block  0
        -: 5300:        }
    #####: 5301:        printf("  %s", test_info->name());
    $$$$$: 5301-block  0
call    0 never executed
    #####: 5302:        if (test_info->value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5303:          printf("  # %s = ", kValueParamLabel);
        -: 5304:          // We print the value parameter on a single line to make the
        -: 5305:          // output easy to parse by a program.
    #####: 5306:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    $$$$$: 5306-block  0
call    0 never executed
call    1 never executed
        -: 5307:        }
    #####: 5308:        printf("\n");
    $$$$$: 5308-block  0
        -: 5309:      }
        -: 5310:    }
        -: 5311:  }
    #####: 5312:  fflush(stdout);
    $$$$$: 5312-block  0
call    0 never executed
    #####: 5313:}
        -: 5314:
        -: 5315:// Sets the OS stack trace getter.
        -: 5316://
        -: 5317:// Does nothing if the input and the current OS stack trace getter are
        -: 5318:// the same; otherwise, deletes the old getter and makes the input the
        -: 5319:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 5320:void UnitTestImpl::set_os_stack_trace_getter(
    $$$$$: 5320-block  0
        -: 5321:    OsStackTraceGetterInterface* getter) {
    #####: 5322:  if (os_stack_trace_getter_ != getter) {
    $$$$$: 5322-block  0
branch  0 never executed
branch  1 never executed
    #####: 5323:    delete os_stack_trace_getter_;
    $$$$$: 5323-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5323-block  1
call    2 never executed
    #####: 5324:    os_stack_trace_getter_ = getter;
    $$$$$: 5324-block  0
        -: 5325:  }
    #####: 5326:}
        -: 5327:
        -: 5328:// Returns the current OS stack trace getter if it is not NULL;
        -: 5329:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 5330:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 203 returned 100% blocks executed 100%
      203: 5331:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
      203: 5331-block  0
      203: 5332:  if (os_stack_trace_getter_ == NULL) {
      203: 5332-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 202
        -: 5333:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 5334:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 5335:#else
        1: 5336:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 5336-block  0
call    0 returned 1
call    1 returned 1
        -: 5337:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 5338:  }
        -: 5339:
      203: 5340:  return os_stack_trace_getter_;
      203: 5340-block  0
        -: 5341:}
        -: 5342:
        -: 5343:// Returns the TestResult for the test that's currently running, or
        -: 5344:// the TestResult for the ad hoc test if no test is running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 74 returned 100% blocks executed 100%
       74: 5345:TestResult* UnitTestImpl::current_test_result() {
       74: 5345-block  0
       74: 5346:  return current_test_info_ ?
       74: 5346-block  0
branch  0 taken 73 (fallthrough)
branch  1 taken 1
       73: 5346-block  1
        1: 5346-block  2
       74: 5347:      &(current_test_info_->result_) : &ad_hoc_test_result_;
       74: 5347-block  0
        -: 5348:}
        -: 5349:
        -: 5350:// Shuffles all test cases, and the tests within each test case,
        -: 5351:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 5352:void UnitTestImpl::ShuffleTests() {
    $$$$$: 5352-block  0
        -: 5353:  // Shuffles the death test cases.
    #####: 5354:  ShuffleRange(random(), 0, last_death_test_case_ + 1, &test_case_indices_);
    $$$$$: 5354-block  0
call    0 never executed
call    1 never executed
        -: 5355:
        -: 5356:  // Shuffles the non-death test cases.
    #####: 5357:  ShuffleRange(random(), last_death_test_case_ + 1,
call    0 never executed
    #####: 5358:               static_cast<int>(test_cases_.size()), &test_case_indices_);
call    0 never executed
call    1 never executed
        -: 5359:
        -: 5360:  // Shuffles the tests inside each test case.
    #####: 5361:  for (size_t i = 0; i < test_cases_.size(); i++) {
    $$$$$: 5361-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5362:    test_cases_[i]->ShuffleTests(random());
    $$$$$: 5362-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5363:  }
    #####: 5364:}
        -: 5365:
        -: 5366:// Restores the test cases and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 5367:void UnitTestImpl::UnshuffleTests() {
        1: 5367-block  0
       12: 5368:  for (size_t i = 0; i < test_cases_.size(); i++) {
        1: 5368-block  0
       12: 5368-block  1
call    0 returned 12
branch  1 taken 11 (fallthrough)
branch  2 taken 1
        -: 5369:    // Unshuffles the tests in each test case.
       11: 5370:    test_cases_[i]->UnshuffleTests();
       11: 5370-block  0
call    0 returned 11
call    1 returned 11
        -: 5371:    // Resets the index of each test case.
       11: 5372:    test_case_indices_[i] = static_cast<int>(i);
call    0 returned 11
        -: 5373:  }
        1: 5374:}
        -: 5375:
        -: 5376:// Returns the current OS stack trace as an std::string.
        -: 5377://
        -: 5378:// The maximum number of stack frames to be included is specified by
        -: 5379:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 5380:// specifies the number of top frames to be skipped, which doesn't
        -: 5381:// count against the number of frames to be included.
        -: 5382://
        -: 5383:// For example, if Foo() calls Bar(), which in turn calls
        -: 5384:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 5385:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 5386:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
    $$$$$: 5386-block  0
        -: 5387:                                            int skip_count) {
        -: 5388:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 5389:  // to what the user really wants to skip.
    #####: 5390:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    $$$$$: 5390-block  0
call    0 never executed
call    1 never executed
        -: 5391:}
        -: 5392:
        -: 5393:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 5394:// suppress unreachable code warnings.
        -: 5395:namespace {
        -: 5396:class ClassUniqueToAlwaysTrue {};
        -: 5397:}
        -: 5398:
function _ZN7testing8internal6IsTrueEb called 166 returned 100% blocks executed 100%
      332: 5399:bool IsTrue(bool condition) { return condition; }
      166: 5399-block  0
      166: 5399-block  1
        -: 5400:
function _ZN7testing8internal10AlwaysTrueEv called 0 returned 0% blocks executed 0%
    #####: 5401:bool AlwaysTrue() {
    $$$$$: 5401-block  0
        -: 5402:#if GTEST_HAS_EXCEPTIONS
        -: 5403:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 5404:  // but it makes the compiler think that it may throw.
    #####: 5405:  if (IsTrue(false))
    $$$$$: 5405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5406:    throw ClassUniqueToAlwaysTrue();
    $$$$$: 5406-block  0
call    0 never executed
call    1 never executed
        -: 5407:#endif  // GTEST_HAS_EXCEPTIONS
    #####: 5408:  return true;
    $$$$$: 5408-block  0
        -: 5409:}
        -: 5410:
        -: 5411:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 5412:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 5413:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 5414:bool SkipPrefix(const char* prefix, const char** pstr) {
    $$$$$: 5414-block  0
    #####: 5415:  const size_t prefix_len = strlen(prefix);
    #####: 5416:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    $$$$$: 5416-block  0
branch  0 never executed
branch  1 never executed
    #####: 5417:    *pstr += prefix_len;
    #####: 5418:    return true;
    $$$$$: 5418-block  0
        -: 5419:  }
    #####: 5420:  return false;
    $$$$$: 5420-block  0
        -: 5421:}
        -: 5422:
        -: 5423:// Parses a string as a command line flag.  The string should have
        -: 5424:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 5425:// part can be omitted.
        -: 5426://
        -: 5427:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 67%
        4: 5428:static const char* ParseFlagValue(const char* str, const char* flag,
        4: 5428-block  0
        -: 5429:                                  bool def_optional) {
        -: 5430:  // str and flag must not be NULL.
        4: 5431:  if (str == NULL || flag == NULL) return NULL;
        4: 5431-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5431-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    $$$$$: 5431-block  2
        -: 5432:
        -: 5433:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        8: 5434:  const std::string flag_str = std::string("--") + GTEST_FLAG_PREFIX_ + flag;
        4: 5434-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 5434-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 5434-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4: 5434-block  3
call   10 returned 4
call   11 returned 4
call   12 returned 4
        4: 5434-block  4
call   13 returned 4
        4: 5434-block  5
        4: 5434-block  6
    %%%%%: 5434-block  7
call   14 never executed
    %%%%%: 5434-block  8
call   15 never executed
    %%%%%: 5434-block  9
call   16 never executed
        4: 5435:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 5436:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return NULL;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 5436-block  0
        -: 5437:
        -: 5438:  // Skips the flag name.
        1: 5439:  const char* flag_end = str + flag_len;
        -: 5440:
        -: 5441:  // When def_optional is true, it's OK to not have a "=value" part.
        1: 5442:  if (def_optional && (flag_end[0] == '\0')) {
        1: 5442-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5442-block  1
branch  2 never executed
branch  3 never executed
    #####: 5443:    return flag_end;
    $$$$$: 5443-block  0
        -: 5444:  }
        -: 5445:
        -: 5446:  // If def_optional is true and there are more characters after the
        -: 5447:  // flag name, or if def_optional is false, there must be a '=' after
        -: 5448:  // the flag name.
        1: 5449:  if (flag_end[0] != '=') return NULL;
        1: 5449-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5449-block  1
        -: 5450:
        -: 5451:  // Returns the string after "=".
        1: 5452:  return flag_end + 1;
        1: 5452-block  0
        -: 5453:}
        -: 5454:
        -: 5455:// Parses a string for a bool flag, in the form of either
        -: 5456:// "--flag=value" or "--flag".
        -: 5457://
        -: 5458:// In the former case, the value is taken as true as long as it does
        -: 5459:// not start with '0', 'f', or 'F'.
        -: 5460://
        -: 5461:// In the latter case, the value is taken as true.
        -: 5462://
        -: 5463:// On success, stores the value of the flag in *value, and returns
        -: 5464:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL13ParseBoolFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 5465:static bool ParseBoolFlag(const char* str, const char* flag, bool* value) {
        3: 5465-block  0
        -: 5466:  // Gets the value of the flag as a string.
        3: 5467:  const char* const value_str = ParseFlagValue(str, flag, true);
        3: 5467-block  0
call    0 returned 3
        -: 5468:
        -: 5469:  // Aborts if the parsing failed.
        3: 5470:  if (value_str == NULL) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 5470-block  0
        -: 5471:
        -: 5472:  // Converts the string value to a bool.
    #####: 5473:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    $$$$$: 5473-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5473-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5473-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5473-block  3
    $$$$$: 5473-block  4
    #####: 5474:  return true;
    $$$$$: 5474-block  0
        -: 5475:}
        -: 5476:
        -: 5477:// Parses a string for an Int32 flag, in the form of
        -: 5478:// "--flag=value".
        -: 5479://
        -: 5480:// On success, stores the value of the flag in *value, and returns
        -: 5481:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal14ParseInt32FlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 5482:bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {
    $$$$$: 5482-block  0
        -: 5483:  // Gets the value of the flag as a string.
    #####: 5484:  const char* const value_str = ParseFlagValue(str, flag, false);
    $$$$$: 5484-block  0
call    0 never executed
        -: 5485:
        -: 5486:  // Aborts if the parsing failed.
    #####: 5487:  if (value_str == NULL) return false;
branch  0 never executed
branch  1 never executed
    $$$$$: 5487-block  0
        -: 5488:
        -: 5489:  // Sets *value to the value of the flag.
    #####: 5490:  return ParseInt32(Message() << "The value of flag --" << flag,
    $$$$$: 5490-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5490-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 5490-block  2
call    7 never executed
    $$$$$: 5490-block  3
    %%%%%: 5490-block  4
call    8 never executed
    #####: 5491:                    value_str, value);
    $$$$$: 5491-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5492:}
        -: 5493:
        -: 5494:// Parses a string for a string flag, in the form of
        -: 5495:// "--flag=value".
        -: 5496://
        -: 5497:// On success, stores the value of the flag in *value, and returns
        -: 5498:// true.  On failure, returns false without changing *value.
        -: 5499:template <typename String>
function _ZN7testing8internalL15ParseStringFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 5500:static bool ParseStringFlag(const char* str, const char* flag, String* value) {
        1: 5500-block  0
        -: 5501:  // Gets the value of the flag as a string.
        1: 5502:  const char* const value_str = ParseFlagValue(str, flag, false);
        1: 5502-block  0
call    0 returned 1
        -: 5503:
        -: 5504:  // Aborts if the parsing failed.
        1: 5505:  if (value_str == NULL) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$: 5505-block  0
        -: 5506:
        -: 5507:  // Sets *value to the value of the flag.
        1: 5508:  *value = value_str;
        1: 5508-block  0
call    0 returned 1
        1: 5509:  return true;
        -: 5510:}
        -: 5511:
        -: 5512:// Determines whether a string has a prefix that Google Test uses for its
        -: 5513:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 5514:// If Google Test detects that a command line flag has its prefix but is not
        -: 5515:// recognized, it will print its help message. Flags starting with
        -: 5516:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 5517:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 5518:static bool HasGoogleTestFlagPrefix(const char* str) {
    $$$$$: 5518-block  0
    #####: 5519:  return (SkipPrefix("--", &str) ||
    $$$$$: 5519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5520:          SkipPrefix("-", &str) ||
    $$$$$: 5520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5521:          SkipPrefix("/", &str)) &&
    $$$$$: 5521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5522:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    $$$$$: 5522-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 5522-block  1
    $$$$$: 5522-block  2
    #####: 5523:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    $$$$$: 5523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5524:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    $$$$$: 5524-block  0
call    0 never executed
    $$$$$: 5524-block  1
        -: 5525:}
        -: 5526:
        -: 5527:// Prints a string containing code-encoded text.  The following escape
        -: 5528:// sequences can be used in the string to control the text color:
        -: 5529://
        -: 5530://   @@    prints a single '@' character.
        -: 5531://   @R    changes the color to red.
        -: 5532://   @G    changes the color to green.
        -: 5533://   @Y    changes the color to yellow.
        -: 5534://   @D    changes to the default terminal text color.
        -: 5535://
        -: 5536:// TODO(wan@google.com): Write tests for this once we add stdout
        -: 5537:// capturing to Google Test.
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 5538:static void PrintColorEncoded(const char* str) {
    $$$$$: 5538-block  0
    #####: 5539:  GTestColor color = COLOR_DEFAULT;  // The current color.
    $$$$$: 5539-block  0
        -: 5540:
        -: 5541:  // Conceptually, we split the string into segments divided by escape
        -: 5542:  // sequences.  Then we print one segment at a time.  At the end of
        -: 5543:  // each iteration, the str pointer advances to the beginning of the
        -: 5544:  // next segment.
        -: 5545:  for (;;) {
    #####: 5546:    const char* p = strchr(str, '@');
    #####: 5547:    if (p == NULL) {
    $$$$$: 5547-block  0
branch  0 never executed
branch  1 never executed
    #####: 5548:      ColoredPrintf(color, "%s", str);
    $$$$$: 5548-block  0
call    0 never executed
    #####: 5549:      return;
    $$$$$: 5549-block  0
        -: 5550:    }
        -: 5551:
    #####: 5552:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    $$$$$: 5552-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5552-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    %%%%%: 5552-block  2
call    8 never executed
        -: 5553:
    #####: 5554:    const char ch = p[1];
    #####: 5555:    str = p + 2;
    #####: 5556:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 5557:      ColoredPrintf(color, "@");
    $$$$$: 5557-block  0
call    0 never executed
    #####: 5558:    } else if (ch == 'D') {
    $$$$$: 5558-block  0
branch  0 never executed
branch  1 never executed
    #####: 5559:      color = COLOR_DEFAULT;
    $$$$$: 5559-block  0
    #####: 5560:    } else if (ch == 'R') {
    $$$$$: 5560-block  0
branch  0 never executed
branch  1 never executed
    #####: 5561:      color = COLOR_RED;
    $$$$$: 5561-block  0
    #####: 5562:    } else if (ch == 'G') {
    $$$$$: 5562-block  0
branch  0 never executed
branch  1 never executed
    #####: 5563:      color = COLOR_GREEN;
    $$$$$: 5563-block  0
    #####: 5564:    } else if (ch == 'Y') {
    $$$$$: 5564-block  0
branch  0 never executed
branch  1 never executed
    #####: 5565:      color = COLOR_YELLOW;
    $$$$$: 5565-block  0
        -: 5566:    } else {
    #####: 5567:      --str;
    $$$$$: 5567-block  0
        -: 5568:    }
    #####: 5569:  }
    $$$$$: 5569-block  0
        -: 5570:}
        -: 5571:
        -: 5572:static const char kColorEncodedHelpMessage[] =
        -: 5573:"This program contains tests written using " GTEST_NAME_ ". You can use the\n"
        -: 5574:"following command line flags to control its behavior:\n"
        -: 5575:"\n"
        -: 5576:"Test Selection:\n"
        -: 5577:"  @G--" GTEST_FLAG_PREFIX_ "list_tests@D\n"
        -: 5578:"      List the names of all tests instead of running them. The name of\n"
        -: 5579:"      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 5580:"  @G--" GTEST_FLAG_PREFIX_ "filter=@YPOSTIVE_PATTERNS"
        -: 5581:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 5582:"      Run only the tests whose name matches one of the positive patterns but\n"
        -: 5583:"      none of the negative patterns. '?' matches any single character; '*'\n"
        -: 5584:"      matches any substring; ':' separates two patterns.\n"
        -: 5585:"  @G--" GTEST_FLAG_PREFIX_ "also_run_disabled_tests@D\n"
        -: 5586:"      Run all disabled tests too.\n"
        -: 5587:"\n"
        -: 5588:"Test Execution:\n"
        -: 5589:"  @G--" GTEST_FLAG_PREFIX_ "repeat=@Y[COUNT]@D\n"
        -: 5590:"      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 5591:"  @G--" GTEST_FLAG_PREFIX_ "shuffle@D\n"
        -: 5592:"      Randomize tests' orders on every iteration.\n"
        -: 5593:"  @G--" GTEST_FLAG_PREFIX_ "random_seed=@Y[NUMBER]@D\n"
        -: 5594:"      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 5595:"      99999, or 0 to use a seed based on the current time).\n"
        -: 5596:"\n"
        -: 5597:"Test Output:\n"
        -: 5598:"  @G--" GTEST_FLAG_PREFIX_ "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 5599:"      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 5600:"  -@G-" GTEST_FLAG_PREFIX_ "print_time=0@D\n"
        -: 5601:"      Don't print the elapsed time of each test.\n"
        -: 5602:"  @G--" GTEST_FLAG_PREFIX_ "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G"
        -: 5603:    GTEST_PATH_SEP_ "@Y|@G:@YFILE_PATH]@D\n"
        -: 5604:"      Generate a JSON or XML report in the given directory or with the given\n"
        -: 5605:"      file name. @YFILE_PATH@D defaults to @Gtest_details.xml@D.\n"
        -: 5606:# if GTEST_CAN_STREAM_RESULTS_
        -: 5607:"  @G--" GTEST_FLAG_PREFIX_ "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 5608:"      Stream test results to the given server.\n"
        -: 5609:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5610:"\n"
        -: 5611:"Assertion Behavior:\n"
        -: 5612:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 5613:"  @G--" GTEST_FLAG_PREFIX_ "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 5614:"      Set the default death test style.\n"
        -: 5615:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 5616:"  @G--" GTEST_FLAG_PREFIX_ "break_on_failure@D\n"
        -: 5617:"      Turn assertion failures into debugger break-points.\n"
        -: 5618:"  @G--" GTEST_FLAG_PREFIX_ "throw_on_failure@D\n"
        -: 5619:"      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 5620:"      test framework.\n"
        -: 5621:"  @G--" GTEST_FLAG_PREFIX_ "catch_exceptions=0@D\n"
        -: 5622:"      Do not report exceptions as test failures. Instead, allow them\n"
        -: 5623:"      to crash the program or throw a pop-up (on Windows).\n"
        -: 5624:"\n"
        -: 5625:"Except for @G--" GTEST_FLAG_PREFIX_ "list_tests@D, you can alternatively set "
        -: 5626:    "the corresponding\n"
        -: 5627:"environment variable of a flag (all letters in upper-case). For example, to\n"
        -: 5628:"disable colored text output, you can either specify @G--" GTEST_FLAG_PREFIX_
        -: 5629:    "color=no@D or set\n"
        -: 5630:"the @G" GTEST_FLAG_PREFIX_UPPER_ "COLOR@D environment variable to @Gno@D.\n"
        -: 5631:"\n"
        -: 5632:"For more information, please read the " GTEST_NAME_ " documentation at\n"
        -: 5633:"@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_ "\n"
        -: 5634:"(not one in your own code or tests), please report it to\n"
        -: 5635:"@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 5636:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 28%
        1: 5637:static bool ParseGoogleTestFlag(const char* const arg) {
        1: 5637-block  0
        1: 5638:  return ParseBoolFlag(arg, kAlsoRunDisabledTestsFlag,
        1: 5638-block  0
call    0 returned 1
        1: 5639:                       &GTEST_FLAG(also_run_disabled_tests)) ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5640:      ParseBoolFlag(arg, kBreakOnFailureFlag,
        1: 5640-block  0
call    0 returned 1
        1: 5641:                    &GTEST_FLAG(break_on_failure)) ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5642:      ParseBoolFlag(arg, kCatchExceptionsFlag,
        1: 5642-block  0
call    0 returned 1
        1: 5643:                    &GTEST_FLAG(catch_exceptions)) ||
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 5644:      ParseStringFlag(arg, kColorFlag, &GTEST_FLAG(color)) ||
        1: 5644-block  0
call    0 returned 1
branch  1 never executed
branch  2 never executed
    #####: 5645:      ParseStringFlag(arg, kDeathTestStyleFlag,
    $$$$$: 5645-block  0
call    0 never executed
    #####: 5646:                      &GTEST_FLAG(death_test_style)) ||
branch  0 never executed
branch  1 never executed
    #####: 5647:      ParseBoolFlag(arg, kDeathTestUseFork,
    $$$$$: 5647-block  0
call    0 never executed
    #####: 5648:                    &GTEST_FLAG(death_test_use_fork)) ||
branch  0 never executed
branch  1 never executed
    #####: 5649:      ParseStringFlag(arg, kFilterFlag, &GTEST_FLAG(filter)) ||
    $$$$$: 5649-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5650:      ParseStringFlag(arg, kInternalRunDeathTestFlag,
    $$$$$: 5650-block  0
call    0 never executed
    #####: 5651:                      &GTEST_FLAG(internal_run_death_test)) ||
branch  0 never executed
branch  1 never executed
    #####: 5652:      ParseBoolFlag(arg, kListTestsFlag, &GTEST_FLAG(list_tests)) ||
    $$$$$: 5652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5653:      ParseStringFlag(arg, kOutputFlag, &GTEST_FLAG(output)) ||
    $$$$$: 5653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5654:      ParseBoolFlag(arg, kPrintTimeFlag, &GTEST_FLAG(print_time)) ||
    $$$$$: 5654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5655:      ParseBoolFlag(arg, kPrintUTF8Flag, &GTEST_FLAG(print_utf8)) ||
    $$$$$: 5655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5656:      ParseInt32Flag(arg, kRandomSeedFlag, &GTEST_FLAG(random_seed)) ||
    $$$$$: 5656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5657:      ParseInt32Flag(arg, kRepeatFlag, &GTEST_FLAG(repeat)) ||
    $$$$$: 5657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5658:      ParseBoolFlag(arg, kShuffleFlag, &GTEST_FLAG(shuffle)) ||
    $$$$$: 5658-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5659:      ParseInt32Flag(arg, kStackTraceDepthFlag,
    $$$$$: 5659-block  0
call    0 never executed
    #####: 5660:                     &GTEST_FLAG(stack_trace_depth)) ||
branch  0 never executed
branch  1 never executed
    #####: 5661:      ParseStringFlag(arg, kStreamResultToFlag,
    $$$$$: 5661-block  0
call    0 never executed
        2: 5662:                      &GTEST_FLAG(stream_result_to)) ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
        1: 5662-block  0
    $$$$$: 5662-block  1
    #####: 5663:      ParseBoolFlag(arg, kThrowOnFailureFlag,
    $$$$$: 5663-block  0
call    0 never executed
        1: 5664:                    &GTEST_FLAG(throw_on_failure));
        1: 5664-block  0
        -: 5665:}
        -: 5666:
        -: 5667:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5668:static void LoadFlagsFromFile(const std::string& path) {
    $$$$$: 5668-block  0
    #####: 5669:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    $$$$$: 5669-block  0
call    0 never executed
call    1 never executed
    #####: 5670:  if (!flagfile) {
branch  0 never executed
branch  1 never executed
    #####: 5671:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG(flagfile)
    $$$$$: 5671-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5671-block  1
call    3 never executed
    $$$$$: 5671-block  2
call    4 never executed
    %%%%%: 5671-block  3
call    5 never executed
    #####: 5672:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5672-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5672-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5673:  }
    #####: 5674:  std::string contents(ReadEntireFile(flagfile));
    $$$$$: 5674-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%: 5674-block  1
call    4 never executed
    #####: 5675:  posix::FClose(flagfile);
    $$$$$: 5675-block  0
call    0 never executed
    #####: 5676:  std::vector<std::string> lines;
call    0 never executed
    $$$$$: 5676-block  0
call    1 never executed
    %%%%%: 5676-block  1
call    2 never executed
    #####: 5677:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5678:  for (size_t i = 0; i < lines.size(); ++i) {
    $$$$$: 5678-block  0
    $$$$$: 5678-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5678-block  2
    #####: 5679:    if (lines[i].empty())
    $$$$$: 5679-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5680:      continue;
    $$$$$: 5680-block  0
    #####: 5681:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    $$$$$: 5681-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 5681-block  1
branch  5 never executed
branch  6 never executed
    #####: 5682:      g_help_flag = true;
    $$$$$: 5682-block  0
        -: 5683:  }
    #####: 5684:}
        -: 5685:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 5686:
        -: 5687:// Parses the command line for Google Test flags, without initializing
        -: 5688:// other parts of Google Test.  The type parameter CharType can be
        -: 5689:// instantiated to either char or wchar_t.
        -: 5690:template <typename CharType>
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 45%
        1: 5691:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    $$$$$: 5691-block  0
        1: 5691-block  1
        2: 5692:  for (int i = 1; i < *argc; i++) {
    $$$$$: 5692-block  0
    $$$$$: 5692-block  1
branch  0 never executed
branch  1 never executed
        1: 5692-block  2
        2: 5692-block  3
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        2: 5693:    const std::string arg_string = StreamableToString(argv[i]);
    $$$$$: 5693-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5693-block  1
call    3 never executed
    %%%%%: 5693-block  2
call    4 never executed
        1: 5693-block  3
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5693-block  4
call    8 returned 1
    %%%%%: 5693-block  5
call    9 never executed
        1: 5694:    const char* const arg = arg_string.c_str();
    $$$$$: 5694-block  0
call    0 never executed
        1: 5694-block  1
call    1 returned 1
        -: 5695:
        -: 5696:    using internal::ParseBoolFlag;
        -: 5697:    using internal::ParseInt32Flag;
        -: 5698:    using internal::ParseStringFlag;
        -: 5699:
        1: 5700:    bool remove_flag = false;
        1: 5701:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5701-block  0
branch  3 never executed
branch  4 never executed
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5701-block  1
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1: 5702:      remove_flag = true;
    $$$$$: 5702-block  0
        1: 5702-block  1
        -: 5703:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5704:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    $$$$$: 5704-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5704-block  1
branch  3 never executed
branch  4 never executed
    $$$$$: 5704-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 5704-block  3
branch  8 never executed
branch  9 never executed
    #####: 5705:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    $$$$$: 5705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5705-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5706:      remove_flag = true;
    $$$$$: 5706-block  0
    $$$$$: 5706-block  1
        -: 5707:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5708:    } else if (arg_string == "--help" || arg_string == "-h" ||
    $$$$$: 5708-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5708-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5708-block  2
branch  6 never executed
branch  7 never executed
    $$$$$: 5708-block  3
branch  8 never executed
branch  9 never executed
    $$$$$: 5708-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5708-block  5
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 5708-block  6
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 5708-block  7
branch 18 never executed
branch 19 never executed
    $$$$$: 5708-block  8
branch 20 never executed
branch 21 never executed
    $$$$$: 5708-block  9
branch 22 never executed
branch 23 never executed
    #####: 5709:               arg_string == "-?" || arg_string == "/?" ||
    $$$$$: 5709-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5709-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 5709-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 5709-block  3
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5709-block  4
    $$$$$: 5709-block  5
    $$$$$: 5709-block  6
branch 12 never executed
branch 13 never executed
    $$$$$: 5709-block  7
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$: 5709-block  8
call   17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$: 5709-block  9
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$: 5709-block 10
    $$$$$: 5709-block 11
    #####: 5710:               HasGoogleTestFlagPrefix(arg)) {
    $$$$$: 5710-block  0
call    0 never executed
    $$$$$: 5710-block  1
call    1 never executed
        -: 5711:      // Both help flag and unrecognized Google Test flags (excluding
        -: 5712:      // internal ones) trigger help display.
    #####: 5713:      g_help_flag = true;
    $$$$$: 5713-block  0
    $$$$$: 5713-block  1
        -: 5714:    }
        -: 5715:
        1: 5716:    if (remove_flag) {
    $$$$$: 5716-block  0
branch  0 never executed
branch  1 never executed
        1: 5716-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 5717:      // Shift the remainder of the argv list left by one.  Note
        -: 5718:      // that argv has (*argc + 1) elements, the last one always being
        -: 5719:      // NULL.  The following loop moves the trailing NULL element as
        -: 5720:      // well.
        2: 5721:      for (int j = i; j != *argc; j++) {
    $$$$$: 5721-block  0
    $$$$$: 5721-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5721-block  2
        1: 5721-block  3
        2: 5721-block  4
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5721-block  5
        1: 5722:        argv[j] = argv[j + 1];
        -: 5723:      }
        -: 5724:
        -: 5725:      // Decrements the argument count.
        1: 5726:      (*argc)--;
        -: 5727:
        -: 5728:      // We also need to decrement the iterator as we just removed
        -: 5729:      // an element.
        1: 5730:      i--;
    $$$$$: 5730-block  0
        1: 5730-block  1
        -: 5731:    }
        -: 5732:  }
        -: 5733:
        1: 5734:  if (g_help_flag) {
    $$$$$: 5734-block  0
branch  0 never executed
branch  1 never executed
        1: 5734-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 5735:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 5736:    // latter may not be called at all if the user is using Google
        -: 5737:    // Test with another testing framework.
    #####: 5738:    PrintColorEncoded(kColorEncodedHelpMessage);
    $$$$$: 5738-block  0
call    0 never executed
    $$$$$: 5738-block  1
call    1 never executed
        -: 5739:  }
        1: 5740:}
    $$$$$: 5740-block  0
        1: 5740-block  1
        -: 5741:
        -: 5742:// Parses the command line for Google Test flags, without initializing
        -: 5743:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 5744:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 5744-block  0
        1: 5745:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 5745-block  0
call    0 returned 1
        1: 5746:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 5747:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    $$$$$: 5747-block  0
    #####: 5748:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    $$$$$: 5748-block  0
call    0 never executed
    #####: 5749:}
        -: 5750:
        -: 5751:// The internal implementation of InitGoogleTest().
        -: 5752://
        -: 5753:// The type parameter CharType can be instantiated to either char or
        -: 5754:// wchar_t.
        -: 5755:template <typename CharType>
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 83%
        1: 5756:void InitGoogleTestImpl(int* argc, CharType** argv) {
    $$$$$: 5756-block  0
        1: 5756-block  1
        -: 5757:  // We don't want to run the initialization code twice.
        1: 5758:  if (GTestIsInitialized()) return;
    $$$$$: 5758-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5758-block  1
        1: 5758-block  2
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    $$$$$: 5758-block  3
        -: 5759:
        1: 5760:  if (*argc <= 0) return;
    $$$$$: 5760-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5760-block  1
        1: 5760-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    $$$$$: 5760-block  3
        -: 5761:
        1: 5762:  g_argvs.clear();
    $$$$$: 5762-block  0
call    0 never executed
        1: 5762-block  1
call    1 returned 1
        3: 5763:  for (int i = 0; i != *argc; i++) {
    $$$$$: 5763-block  0
branch  0 never executed
branch  1 never executed
        3: 5763-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2: 5764:    g_argvs.push_back(StreamableToString(argv[i]));
    $$$$$: 5764-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5764-block  1
call    4 never executed
    %%%%%: 5764-block  2
call    5 never executed
        2: 5764-block  3
call    6 returned 2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2: 5764-block  4
call   10 returned 2
    %%%%%: 5764-block  5
call   11 never executed
        -: 5765:  }
        -: 5766:
        1: 5767:  ParseGoogleTestFlagsOnly(argc, argv);
    $$$$$: 5767-block  0
call    0 never executed
        1: 5767-block  1
call    1 returned 1
        1: 5768:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
    $$$$$: 5768-block  0
call    2 returned 1
call    3 returned 1
        1: 5768-block  1
        -: 5769:}
        -: 5770:
        -: 5771:}  // namespace internal
        -: 5772:
        -: 5773:// Initializes Google Test.  This must be called before calling
        -: 5774:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 5775:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 5776:// seen, it is removed from argv, and *argc is decremented.
        -: 5777://
        -: 5778:// No value is returned.  Instead, the Google Test flag variables are
        -: 5779:// updated.
        -: 5780://
        -: 5781:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 5782:void InitGoogleTest(int* argc, char** argv) {
        1: 5782-block  0
        -: 5783:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 5784:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 5785:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 5786:  internal::InitGoogleTestImpl(argc, argv);
        1: 5786-block  0
call    0 returned 1
        -: 5787:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 5788:}
        -: 5789:
        -: 5790:// This overloaded version can be used in Windows programs compiled in
        -: 5791:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 5792:void InitGoogleTest(int* argc, wchar_t** argv) {
    $$$$$: 5792-block  0
        -: 5793:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 5794:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 5795:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 5796:  internal::InitGoogleTestImpl(argc, argv);
    $$$$$: 5796-block  0
call    0 never executed
        -: 5797:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 5798:}
        -: 5799:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 5800:std::string TempDir() {
    $$$$$: 5800-block  0
        -: 5801:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 5802:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 5803:#endif
        -: 5804:
        -: 5805:#if GTEST_OS_WINDOWS_MOBILE
        -: 5806:  return "\\temp\\";
        -: 5807:#elif GTEST_OS_WINDOWS
    #####: 5808:  const char* temp_dir = internal::posix::GetEnv("TEMP");
    $$$$$: 5808-block  0
call    0 never executed
    #####: 5809:  if (temp_dir == NULL || temp_dir[0] == '\0')
branch  0 never executed
branch  1 never executed
    $$$$$: 5809-block  0
branch  2 never executed
branch  3 never executed
    #####: 5810:    return "\\temp\\";
    $$$$$: 5810-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5810-block  1
call    4 never executed
    %%%%%: 5810-block  2
call    5 never executed
call    6 never executed
    #####: 5811:  else if (temp_dir[strlen(temp_dir) - 1] == '\\')
    $$$$$: 5811-block  0
branch  0 never executed
branch  1 never executed
    #####: 5812:    return temp_dir;
    $$$$$: 5812-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5812-block  1
call    4 never executed
    %%%%%: 5812-block  2
call    5 never executed
call    6 never executed
        -: 5813:  else
    #####: 5814:    return std::string(temp_dir) + "\\";
    $$$$$: 5814-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5814-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 5814-block  2
    $$$$$: 5814-block  3
call    7 never executed
call    8 never executed
    $$$$$: 5814-block  4
    %%%%%: 5814-block  5
call    9 never executed
    %%%%%: 5814-block  6
call   10 never executed
        -: 5815:#elif GTEST_OS_LINUX_ANDROID
        -: 5816:  return "/sdcard/";
        -: 5817:#else
        -: 5818:  return "/tmp/";
        -: 5819:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 5820:}
        -: 5821:
        -: 5822:// Class ScopedTrace
        -: 5823:
        -: 5824:// Pushes the given source file location and message onto a per-thread
        -: 5825:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5826:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    $$$$$: 5826-block  0
    #####: 5827:  internal::TraceInfo trace;
    $$$$$: 5827-block  0
call    0 never executed
    $$$$$: 5827-block  1
call    1 never executed
    %%%%%: 5827-block  2
call    2 never executed
    #####: 5828:  trace.file = file;
    #####: 5829:  trace.line = line;
    #####: 5830:  trace.message.swap(message);
call    0 never executed
        -: 5831:
    #####: 5832:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5832-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5833:}
        -: 5834:
        -: 5835:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 5836:ScopedTrace::~ScopedTrace()
    $$$$$: 5836-block  0
        -: 5837:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 5838:  UnitTest::GetInstance()->PopGTestTrace();
    $$$$$: 5838-block  0
call    0 never executed
call    1 never executed
    #####: 5839:}
        -: 5840:
        -: 5841:}  // namespace testing
