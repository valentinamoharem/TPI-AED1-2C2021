        -:    0:Source:c:/mingw/lib/gcc/mingw32/6.3.0/include/c++/ext/aligned_buffer.h
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Aligned memory buffer -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2013-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/aligned_buffer.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _ALIGNED_BUFFER_H
        -:   30:#define _ALIGNED_BUFFER_H 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#if __cplusplus >= 201103L
        -:   35:# include <type_traits>
        -:   36:#else
        -:   37:# include <bits/c++0x_warning.h>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx
        -:   41:{
        -:   42:  // A utility type containing a POD object that can hold an object of type
        -:   43:  // _Tp initialized via placement new or allocator_traits::construct.
        -:   44:  // Intended for use as a data member subobject, use __aligned_buffer for
        -:   45:  // complete objects.
        -:   46:  template<typename _Tp>
        -:   47:    struct __aligned_membuf
        -:   48:    {
        -:   49:      // Target macro ADJUST_FIELD_ALIGN can produce different alignment for
        -:   50:      // types when used as class members. __aligned_membuf is intended
        -:   51:      // for use as a class member, so align the buffer as for a class member.
        -:   52:      struct _Tp2 { _Tp _M_t; };
        -:   53:
        -:   54:      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
        -:   55:
function _ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEEC1Ev called 2 returned 100% blocks executed 100%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEC1Ev called 1 returned 100% blocks executed 100%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1Ev called 0 returned 0% blocks executed 0%
        3:   56:      __aligned_membuf() = default;
    $$$$$:   56-block  0
        2:   56-block  1
        1:   56-block  2
    $$$$$:   56-block  3
        -:   57:
        -:   58:      // Can be used to avoid value-initialization zeroing _M_storage.
        -:   59:      __aligned_membuf(std::nullptr_t) { }
        -:   60:
        -:   61:      void*
function _ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIcPKcEE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEE7_M_addrEv called 8 returned 100% blocks executed 100%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEE7_M_addrEv called 5 returned 100% blocks executed 100%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv called 0 returned 0% blocks executed 0%
       13:   62:      _M_addr() noexcept
    $$$$$:   62-block  0
    $$$$$:   62-block  1
    $$$$$:   62-block  2
        8:   62-block  3
        5:   62-block  4
    $$$$$:   62-block  5
       13:   63:      { return static_cast<void*>(&_M_storage); }
    $$$$$:   63-block  0
    $$$$$:   63-block  1
    $$$$$:   63-block  2
        8:   63-block  3
        5:   63-block  4
    $$$$$:   63-block  5
        -:   64:
        -:   65:      const void*
function _ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEE7_M_addrEv called 9 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEE7_M_addrEv called 2 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufIjE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIcPKcEE7_M_addrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal12CodeLocationEEE7_M_addrEv called 0 returned 0% blocks executed 0%
       11:   66:      _M_addr() const noexcept
    $$$$$:   66-block  0
        9:   66-block  1
        2:   66-block  2
    $$$$$:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
    $$$$$:   66-block  6
       11:   67:      { return static_cast<const void*>(&_M_storage); }
    $$$$$:   67-block  0
        9:   67-block  1
        2:   67-block  2
    $$$$$:   67-block  3
    $$$$$:   67-block  4
    $$$$$:   67-block  5
    $$$$$:   67-block  6
        -:   68:
        -:   69:      _Tp*
function _ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIcPKcEE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEE6_M_ptrEv called 8 returned 100% blocks executed 100%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEE6_M_ptrEv called 5 returned 100% blocks executed 100%
function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv called 0 returned 0% blocks executed 0%
       13:   70:      _M_ptr() noexcept
    $$$$$:   70-block  0
    $$$$$:   70-block  1
    $$$$$:   70-block  2
        8:   70-block  3
        5:   70-block  4
    $$$$$:   70-block  5
       13:   71:      { return static_cast<_Tp*>(_M_addr()); }
    $$$$$:   71-block  0
call    0 never executed
    $$$$$:   71-block  1
call    1 never executed
    $$$$$:   71-block  2
call    2 never executed
        8:   71-block  3
call    3 returned 8
        5:   71-block  4
call    4 returned 5
    $$$$$:   71-block  5
call    5 never executed
        -:   72:
        -:   73:      const _Tp*
function _ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEE6_M_ptrEv called 9 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEE6_M_ptrEv called 2 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufIjE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIcPKcEE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal12CodeLocationEEE6_M_ptrEv called 0 returned 0% blocks executed 0%
       11:   74:      _M_ptr() const noexcept
    $$$$$:   74-block  0
        9:   74-block  1
        2:   74-block  2
    $$$$$:   74-block  3
    $$$$$:   74-block  4
    $$$$$:   74-block  5
    $$$$$:   74-block  6
       11:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    $$$$$:   75-block  0
call    0 never executed
        9:   75-block  1
call    1 returned 9
        2:   75-block  2
call    2 returned 2
    $$$$$:   75-block  3
call    3 never executed
    $$$$$:   75-block  4
call    4 never executed
    $$$$$:   75-block  5
call    5 never executed
    $$$$$:   75-block  6
call    6 never executed
        -:   76:    };
        -:   77:
        -:   78:  // Similar to __aligned_membuf but aligned for complete objects, not members.
        -:   79:  // This type is used in <forward_list>, <future>, <bits/shared_ptr_base.h>
        -:   80:  // and <bits/hashtable_policy.h>, but ideally they would use __aligned_membuf
        -:   81:  // instead, as it has smaller size for some types on some targets.
        -:   82:  // This type is still used to avoid an ABI change.
        -:   83:  template<typename _Tp>
        -:   84:    struct __aligned_buffer
        -:   85:    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
        -:   86:    {
        -:   87:      typename
        -:   88:	std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
        -:   89:	_M_storage;
        -:   90:
        -:   91:      __aligned_buffer() = default;
        -:   92:
        -:   93:      // Can be used to avoid value-initialization
        -:   94:      __aligned_buffer(std::nullptr_t) { }
        -:   95:
        -:   96:      void*
        -:   97:      _M_addr() noexcept
        -:   98:      {
        -:   99:        return static_cast<void*>(&_M_storage);
        -:  100:      }
        -:  101:
        -:  102:      const void*
        -:  103:      _M_addr() const noexcept
        -:  104:      {
        -:  105:        return static_cast<const void*>(&_M_storage);
        -:  106:      }
        -:  107:
        -:  108:      _Tp*
        -:  109:      _M_ptr() noexcept
        -:  110:      { return static_cast<_Tp*>(_M_addr()); }
        -:  111:
        -:  112:      const _Tp*
        -:  113:      _M_ptr() const noexcept
        -:  114:      { return static_cast<const _Tp*>(_M_addr()); }
        -:  115:    };
        -:  116:
        -:  117:} // namespace
        -:  118:
        -:  119:#endif /* _ALIGNED_BUFFER_H */
