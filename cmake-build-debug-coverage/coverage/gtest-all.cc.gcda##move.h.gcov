        -:    0:Source:c:/mingw/lib/gcc/mingw32/6.3.0/include/c++/bits/move.h
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Move, forward and identity for C++0x + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <bits/concept_check.h>
        -:   35:
        -:   36:namespace std _GLIBCXX_VISIBILITY(default)
        -:   37:{
        -:   38:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   39:
        -:   40:  // Used, in C++03 mode too, by allocators, etc.
        -:   41:  /**
        -:   42:   *  @brief Same as C++11 std::addressof
        -:   43:   *  @ingroup utilities
        -:   44:   */
        -:   45:  template<typename _Tp>
        -:   46:    inline _Tp*
function _ZSt11__addressofIN7testing8internal9TraceInfoEEPT_RS3_ called 0 returned 0% blocks executed 0%
function _ZSt11__addressofIN7testing8internal10linked_ptrINS1_26ThreadLocalValueHolderBaseEEEEPT_RS5_ called 2 returned 100% blocks executed 100%
function _ZSt11__addressofIN7testing12TestPropertyEEPT_RS2_ called 0 returned 0% blocks executed 0%
function _ZSt11__addressofISaISt10_List_nodeISt4pairIcPKcEEEEPT_RS7_ called 0 returned 0% blocks executed 0%
function _ZSt11__addressofISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEEPT_RS7_ called 0 returned 0% blocks executed 0%
function _ZSt11__addressofISt6vectorIdSaIdEEEPT_RS3_ called 0 returned 0% blocks executed 0%
function _ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_ called 8 returned 100% blocks executed 100%
function _ZSt11__addressofIN7testing14TestPartResultEEPT_RS2_ called 1 returned 100% blocks executed 100%
       11:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    $$$$$:   47-block  0
        2:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
    $$$$$:   47-block  4
    $$$$$:   47-block  5
        8:   47-block  6
        1:   47-block  7
        -:   48:    {
        -:   49:      return reinterpret_cast<_Tp*>
       11:   50:	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    $$$$$:   50-block  0
        2:   50-block  1
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
        8:   50-block  6
        1:   50-block  7
        -:   51:    }
        -:   52:
        -:   53:_GLIBCXX_END_NAMESPACE_VERSION
        -:   54:} // namespace
        -:   55:
        -:   56:#if __cplusplus >= 201103L
        -:   57:#include <type_traits> // Brings in std::declval too.
        -:   58:
        -:   59:namespace std _GLIBCXX_VISIBILITY(default)
        -:   60:{
        -:   61:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   62:
        -:   63:  /**
        -:   64:   *  @addtogroup utilities
        -:   65:   *  @{
        -:   66:   */
        -:   67:
        -:   68:  /**
        -:   69:   *  @brief  Forward an lvalue.
        -:   70:   *  @return The parameter cast to the specified type.
        -:   71:   *
        -:   72:   *  This function is used to implement "perfect forwarding".
        -:   73:   */
        -:   74:  template<typename _Tp>
        -:   75:    constexpr _Tp&&
function _ZSt7forwardIPKN7testing8internal15ThreadLocalBaseEEOT_RNSt16remove_referenceIS5_E4typeE called 2 returned 100% blocks executed 100%
function _ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE called 1 returned 100% blocks executed 100%
function _ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIN7testing8internal9TraceInfoEEOT_RNSt16remove_referenceIS3_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIN7testing12TestPropertyEEOT_RNSt16remove_referenceIS2_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIN7testing14TestPartResultEEOT_RNSt16remove_referenceIS2_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKSt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEEOT_RNSt16remove_referenceIS9_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKSt6vectorIdSaIdEEEOT_RNSt16remove_referenceIS5_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRPSt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISA_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEEEOT_RNSt16remove_referenceISF_E4typeE called 2 returned 100% blocks executed 100%
function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEEOT_RNSt16remove_referenceISM_E4typeE called 1 returned 100% blocks executed 100%
function _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE called 3 returned 100% blocks executed 100%
function _ZSt7forwardISt17_Rb_tree_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceIS8_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE called 2 returned 100% blocks executed 100%
function _ZSt7forwardIRKN7testing8internal10linked_ptrINS1_26ThreadLocalValueHolderBaseEEEEOT_RNSt16remove_referenceIS7_E4typeE called 6 returned 100% blocks executed 100%
function _ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEEEOT_RNSt16remove_referenceISD_E4typeE called 2 returned 100% blocks executed 100%
function _ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseENS5_10linked_ptrINS5_26ThreadLocalValueHolderBaseEEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEEOT_RNSt16remove_referenceISK_E4typeE called 1 returned 100% blocks executed 100%
function _ZSt7forwardIPN7testing8TestCaseEEOT_RNSt16remove_referenceIS3_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKPN7testing8TestCaseEEOT_RNSt16remove_referenceIS5_E4typeE called 27 returned 100% blocks executed 100%
function _ZSt7forwardIRKN7testing8internal9TraceInfoEEOT_RNSt16remove_referenceIS5_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKPN7testing11EnvironmentEEOT_RNSt16remove_referenceIS5_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKPN7testing17TestEventListenerEEOT_RNSt16remove_referenceIS5_E4typeE called 3 returned 100% blocks executed 100%
function _ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKPN7testing8TestInfoEEOT_RNSt16remove_referenceIS5_E4typeE called 96 returned 100% blocks executed 100%
function _ZSt7forwardIRKN7testing12TestPropertyEEOT_RNSt16remove_referenceIS4_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKN7testing14TestPartResultEEOT_RNSt16remove_referenceIS4_E4typeE called 3 returned 100% blocks executed 100%
function _ZSt7forwardISt4pairIcPKcEEOT_RNSt16remove_referenceIS4_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRKN7testing8internal13edit_distance8EditTypeEEOT_RNSt16remove_referenceIS6_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE called 9 returned 100% blocks executed 100%
function _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE called 3 returned 100% blocks executed 100%
function _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRSt17_Rb_tree_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceIS9_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardISt4pairIPKN7testing8internal15ThreadLocalBaseENS2_10linked_ptrINS2_26ThreadLocalValueHolderBaseEEEEEOT_RNSt16remove_referenceISA_E4typeE called 16 returned 100% blocks executed 100%
function _ZSt7forwardISt4pairImSt3mapIPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEESt4lessIS6_ESaIS0_IKS6_S9_EEEEEOT_RNSt16remove_referenceISH_E4typeE called 8 returned 100% blocks executed 100%
function _ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE called 1 returned 100% blocks executed 100%
function _ZSt7forwardIN7testing8internal10linked_ptrINS1_26ThreadLocalValueHolderBaseEEEEOT_RNSt16remove_referenceIS5_E4typeE called 6 returned 100% blocks executed 100%
function _ZSt7forwardIRPKN7testing8internal15ThreadLocalBaseEEOT_RNSt16remove_referenceIS6_E4typeE called 4 returned 100% blocks executed 100%
function _ZSt7forwardISt3mapIPKN7testing8internal15ThreadLocalBaseENS2_10linked_ptrINS2_26ThreadLocalValueHolderBaseEEESt4lessIS5_ESaISt4pairIKS5_S8_EEEEOT_RNSt16remove_referenceISG_E4typeE called 3 returned 100% blocks executed 100%
function _ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE called 3 returned 100% blocks executed 100%
function _ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE called 0 returned 0% blocks executed 0%
function _ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE called 0 returned 0% blocks executed 0%
      202:   76:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   76-block  0
        1:   76-block  1
    $$$$$:   76-block  2
    $$$$$:   76-block  3
    $$$$$:   76-block  4
    $$$$$:   76-block  5
    $$$$$:   76-block  6
    $$$$$:   76-block  7
    $$$$$:   76-block  8
    $$$$$:   76-block  9
        2:   76-block 10
        1:   76-block 11
        3:   76-block 12
    $$$$$:   76-block 13
        2:   76-block 14
        6:   76-block 15
        2:   76-block 16
        1:   76-block 17
    $$$$$:   76-block 18
       27:   76-block 19
    $$$$$:   76-block 20
    $$$$$:   76-block 21
        3:   76-block 22
    $$$$$:   76-block 23
       96:   76-block 24
    $$$$$:   76-block 25
        3:   76-block 26
    $$$$$:   76-block 27
    $$$$$:   76-block 28
    $$$$$:   76-block 29
    $$$$$:   76-block 30
    $$$$$:   76-block 31
    $$$$$:   76-block 32
        9:   76-block 33
        3:   76-block 34
    $$$$$:   76-block 35
    $$$$$:   76-block 36
       16:   76-block 37
        8:   76-block 38
        1:   76-block 39
        6:   76-block 40
        4:   76-block 41
        3:   76-block 42
        3:   76-block 43
    $$$$$:   76-block 44
    $$$$$:   76-block 45
      202:   77:    { return static_cast<_Tp&&>(__t); }
        2:   77-block  0
        1:   77-block  1
    $$$$$:   77-block  2
    $$$$$:   77-block  3
    $$$$$:   77-block  4
    $$$$$:   77-block  5
    $$$$$:   77-block  6
    $$$$$:   77-block  7
    $$$$$:   77-block  8
    $$$$$:   77-block  9
        2:   77-block 10
        1:   77-block 11
        3:   77-block 12
    $$$$$:   77-block 13
        2:   77-block 14
        6:   77-block 15
        2:   77-block 16
        1:   77-block 17
    $$$$$:   77-block 18
       27:   77-block 19
    $$$$$:   77-block 20
    $$$$$:   77-block 21
        3:   77-block 22
    $$$$$:   77-block 23
       96:   77-block 24
    $$$$$:   77-block 25
        3:   77-block 26
    $$$$$:   77-block 27
    $$$$$:   77-block 28
    $$$$$:   77-block 29
    $$$$$:   77-block 30
    $$$$$:   77-block 31
    $$$$$:   77-block 32
        9:   77-block 33
        3:   77-block 34
    $$$$$:   77-block 35
    $$$$$:   77-block 36
       16:   77-block 37
        8:   77-block 38
        1:   77-block 39
        6:   77-block 40
        4:   77-block 41
        3:   77-block 42
        3:   77-block 43
    $$$$$:   77-block 44
    $$$$$:   77-block 45
        -:   78:
        -:   79:  /**
        -:   80:   *  @brief  Forward an rvalue.
        -:   81:   *  @return The parameter cast to the specified type.
        -:   82:   *
        -:   83:   *  This function is used to implement "perfect forwarding".
        -:   84:   */
        -:   85:  template<typename _Tp>
        -:   86:    constexpr _Tp&&
        -:   87:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   88:    {
        -:   89:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   90:		    " substituting _Tp is an lvalue reference type");
        -:   91:      return static_cast<_Tp&&>(__t);
        -:   92:    }
        -:   93:
        -:   94:  /**
        -:   95:   *  @brief  Convert a value to an rvalue.
        -:   96:   *  @param  __t  A thing of arbitrary type.
        -:   97:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:   98:  */
        -:   99:  template<typename _Tp>
        -:  100:    constexpr typename std::remove_reference<_Tp>::type&&
function _ZSt4moveIRN7testing8internal13edit_distance8EditTypeEEONSt16remove_referenceIT_E4typeEOS6_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseENS3_10linked_ptrINS3_26ThreadLocalValueHolderBaseEEEEEEEONSt16remove_referenceIT_E4typeEOSG_ called 4 returned 100% blocks executed 100%
function _ZSt4moveIRPFvPN7testing17TestEventListenerEEEONSt16remove_referenceIT_E4typeEOS7_ called 1 returned 100% blocks executed 100%
function _ZSt4moveIRPFvPN7testing8TestInfoEEEONSt16remove_referenceIT_E4typeEOS7_ called 22 returned 100% blocks executed 100%
function _ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRPFvPN7testing8TestCaseEEEONSt16remove_referenceIT_E4typeEOS7_ called 2 returned 100% blocks executed 100%
function _ZSt4moveIRSt8_Rb_treeIPKN7testing8internal15ThreadLocalBaseESt4pairIKS5_NS2_10linked_ptrINS2_26ThreadLocalValueHolderBaseEEEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEEONSt16remove_referenceIT_E4typeEOSK_ called 2 returned 100% blocks executed 100%
function _ZSt4moveIRPFvPN7testing11EnvironmentEEEONSt16remove_referenceIT_E4typeEOS7_ called 3 returned 100% blocks executed 100%
function _ZSt4moveIRPN7testing8TestCaseEEONSt16remove_referenceIT_E4typeEOS5_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRNSt7__cxx114listISt4pairIcPKcESaIS5_EEEEONSt16remove_referenceIT_E4typeEOSA_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRSt4pairIcPKcEEONSt16remove_referenceIT_E4typeEOS6_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_ called 0 returned 0% blocks executed 0%
function _ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_ called 0 returned 0% blocks executed 0%
       34:  101:    move(_Tp&& __t) noexcept
    $$$$$:  101-block  0
        4:  101-block  1
        1:  101-block  2
       22:  101-block  3
    $$$$$:  101-block  4
        2:  101-block  5
        2:  101-block  6
        3:  101-block  7
    $$$$$:  101-block  8
    $$$$$:  101-block  9
    $$$$$:  101-block 10
    $$$$$:  101-block 11
    $$$$$:  101-block 12
    $$$$$:  101-block 13
    $$$$$:  101-block 14
       34:  102:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    $$$$$:  102-block  0
        4:  102-block  1
        1:  102-block  2
       22:  102-block  3
    $$$$$:  102-block  4
        2:  102-block  5
        2:  102-block  6
        3:  102-block  7
    $$$$$:  102-block  8
    $$$$$:  102-block  9
    $$$$$:  102-block 10
    $$$$$:  102-block 11
    $$$$$:  102-block 12
    $$$$$:  102-block 13
    $$$$$:  102-block 14
        -:  103:
        -:  104:
        -:  105:  template<typename _Tp>
        -:  106:    struct __move_if_noexcept_cond
        -:  107:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  108:                    is_copy_constructible<_Tp>>::type { };
        -:  109:
        -:  110:  /**
        -:  111:   *  @brief  Conditionally convert a value to an rvalue.
        -:  112:   *  @param  __x  A thing of arbitrary type.
        -:  113:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  114:   *
        -:  115:   *  Same as std::move unless the type's move constructor could throw and the
        -:  116:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  117:   */
        -:  118:  template<typename _Tp>
        -:  119:    constexpr typename
        -:  120:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  121:    move_if_noexcept(_Tp& __x) noexcept
        -:  122:    { return std::move(__x); }
        -:  123:
        -:  124:  // declval, from type_traits.
        -:  125:
        -:  126:  /**
        -:  127:   *  @brief Returns the actual address of the object or function
        -:  128:   *         referenced by r, even in the presence of an overloaded
        -:  129:   *         operator&.
        -:  130:   *  @param  __r  Reference to an object or function.
        -:  131:   *  @return   The actual address.
        -:  132:  */
        -:  133:  template<typename _Tp>
        -:  134:    inline _Tp*
        -:  135:    addressof(_Tp& __r) noexcept
        -:  136:    { return std::__addressof(__r); }
        -:  137:
        -:  138:  // C++11 version of std::exchange for internal use.
        -:  139:  template <typename _Tp, typename _Up = _Tp>
        -:  140:    inline _Tp
        -:  141:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  142:    {
        -:  143:      _Tp __old_val = std::move(__obj);
        -:  144:      __obj = std::forward<_Up>(__new_val);
        -:  145:      return __old_val;
        -:  146:    }
        -:  147:
        -:  148:  /// @} group utilities
        -:  149:_GLIBCXX_END_NAMESPACE_VERSION
        -:  150:} // namespace
        -:  151:
        -:  152:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  153:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  154:#else
        -:  155:#define _GLIBCXX_MOVE(__val) (__val)
        -:  156:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  157:#endif
        -:  158:
        -:  159:namespace std _GLIBCXX_VISIBILITY(default)
        -:  160:{
        -:  161:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:  162:
        -:  163:  /**
        -:  164:   *  @addtogroup utilities
        -:  165:   *  @{
        -:  166:   */
        -:  167:
        -:  168:  /**
        -:  169:   *  @brief Swaps two values.
        -:  170:   *  @param  __a  A thing of arbitrary type.
        -:  171:   *  @param  __b  Another thing of arbitrary type.
        -:  172:   *  @return   Nothing.
        -:  173:  */
        -:  174:  template<typename _Tp>
        -:  175:    inline
        -:  176:#if __cplusplus >= 201103L
        -:  177:    typename enable_if<__and_<is_move_constructible<_Tp>,
        -:  178:			      is_move_assignable<_Tp>>::value>::type
function _ZSt4swapIN7testing8internal13edit_distance8EditTypeEENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SE_ called 0 returned 0% blocks executed 0%
function _ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SA_ called 0 returned 0% blocks executed 0%
function _ZSt4swapIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SH_ called 0 returned 0% blocks executed 0%
function _ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SA_ called 0 returned 0% blocks executed 0%
    #####:  179:    swap(_Tp& __a, _Tp& __b)
    $$$$$:  179-block  0
    $$$$$:  179-block  1
    $$$$$:  179-block  2
    $$$$$:  179-block  3
        -:  180:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  181:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  182:#else
        -:  183:    void
        -:  184:    swap(_Tp& __a, _Tp& __b)
        -:  185:#endif
        -:  186:    {
        -:  187:      // concept requirements
        -:  188:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  189:
    #####:  190:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    $$$$$:  190-block  0
call    0 never executed
    $$$$$:  190-block  1
call    1 never executed
    $$$$$:  190-block  2
call    2 never executed
    $$$$$:  190-block  3
call    3 never executed
    #####:  191:      __a = _GLIBCXX_MOVE(__b);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  192:      __b = _GLIBCXX_MOVE(__tmp);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  193:    }
        -:  194:
        -:  195:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  196:  // DR 809. std::swap should be overloaded for array types.
        -:  197:  /// Swap the contents of two arrays.
        -:  198:  template<typename _Tp, size_t _Nm>
        -:  199:    inline
        -:  200:#if __cplusplus >= 201103L
        -:  201:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  202:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  203:    noexcept(__is_nothrow_swappable<_Tp>::value)
        -:  204:#else
        -:  205:    void
        -:  206:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  207:#endif
        -:  208:    {
        -:  209:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  210:	swap(__a[__n], __b[__n]);
        -:  211:    }
        -:  212:
        -:  213:  /// @} group utilities
        -:  214:_GLIBCXX_END_NAMESPACE_VERSION
        -:  215:} // namespace
        -:  216:
        -:  217:#endif /* _MOVE_H */
