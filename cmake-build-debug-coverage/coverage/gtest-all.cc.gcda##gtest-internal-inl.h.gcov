        -:    0:Source:C:/Users/valum/Documents/GitHub/TPI-AED1-2C2021/lib/googletest-master/googletest/src/gtest-internal-inl.h
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// Utility functions and classes used by the Google C++ testing framework.
        -:   31://
        -:   32:// Author: wan@google.com (Zhanyong Wan)
        -:   33://
        -:   34:// This file contains purely Google Test's internal implementation.  Please
        -:   35:// DO NOT #INCLUDE IT IN A USER PROGRAM.
        -:   36:
        -:   37:#ifndef GTEST_SRC_GTEST_INTERNAL_INL_H_
        -:   38:#define GTEST_SRC_GTEST_INTERNAL_INL_H_
        -:   39:
        -:   40:#ifndef _WIN32_WCE
        -:   41:# include <errno.h>
        -:   42:#endif  // !_WIN32_WCE
        -:   43:#include <stddef.h>
        -:   44:#include <stdlib.h>  // For strtoll/_strtoul64/malloc/free.
        -:   45:#include <string.h>  // For memmove.
        -:   46:
        -:   47:#include <algorithm>
        -:   48:#include <string>
        -:   49:#include <vector>
        -:   50:
        -:   51:#include "gtest/internal/gtest-port.h"
        -:   52:
        -:   53:#if GTEST_CAN_STREAM_RESULTS_
        -:   54:# include <arpa/inet.h>  // NOLINT
        -:   55:# include <netdb.h>  // NOLINT
        -:   56:#endif
        -:   57:
        -:   58:#if GTEST_OS_WINDOWS
        -:   59:# include <windows.h>  // NOLINT
        -:   60:#endif  // GTEST_OS_WINDOWS
        -:   61:
        -:   62:#include "gtest/gtest.h"
        -:   63:#include "gtest/gtest-spi.h"
        -:   64:
        -:   65:namespace testing {
        -:   66:
        -:   67:// Declares the flags.
        -:   68://
        -:   69:// We don't want the users to modify this flag in the code, but want
        -:   70:// Google Test's own unit tests to be able to access it. Therefore we
        -:   71:// declare it here as opposed to in gtest.h.
        -:   72:GTEST_DECLARE_bool_(death_test_use_fork);
        -:   73:
        -:   74:namespace internal {
        -:   75:
        -:   76:// The value of GetTestTypeId() as seen from within the Google Test
        -:   77:// library.  This is solely for testing GetTestTypeId().
        -:   78:GTEST_API_ extern const TypeId kTestTypeIdInGoogleTest;
        -:   79:
        -:   80:// Names of the flags (needed for parsing Google Test flags).
        -:   81:const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";
        -:   82:const char kBreakOnFailureFlag[] = "break_on_failure";
        -:   83:const char kCatchExceptionsFlag[] = "catch_exceptions";
        -:   84:const char kColorFlag[] = "color";
        -:   85:const char kFilterFlag[] = "filter";
        -:   86:const char kListTestsFlag[] = "list_tests";
        -:   87:const char kOutputFlag[] = "output";
        -:   88:const char kPrintTimeFlag[] = "print_time";
        -:   89:const char kPrintUTF8Flag[] = "print_utf8";
        -:   90:const char kRandomSeedFlag[] = "random_seed";
        -:   91:const char kRepeatFlag[] = "repeat";
        -:   92:const char kShuffleFlag[] = "shuffle";
        -:   93:const char kStackTraceDepthFlag[] = "stack_trace_depth";
        -:   94:const char kStreamResultToFlag[] = "stream_result_to";
        -:   95:const char kThrowOnFailureFlag[] = "throw_on_failure";
        -:   96:const char kFlagfileFlag[] = "flagfile";
        -:   97:
        -:   98:// A valid random seed must be in [1, kMaxRandomSeed].
        -:   99:const int kMaxRandomSeed = 99999;
        -:  100:
        -:  101:// g_help_flag is true iff the --help flag or an equivalent form is
        -:  102:// specified on the command line.
        -:  103:GTEST_API_ extern bool g_help_flag;
        -:  104:
        -:  105:// Returns the current time in milliseconds.
        -:  106:GTEST_API_ TimeInMillis GetTimeInMillis();
        -:  107:
        -:  108:// Returns true iff Google Test should use colors in the output.
        -:  109:GTEST_API_ bool ShouldUseColor(bool stdout_is_tty);
        -:  110:
        -:  111:// Formats the given time in milliseconds as seconds.
        -:  112:GTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);
        -:  113:
        -:  114:// Converts the given time in milliseconds to a date string in the ISO 8601
        -:  115:// format, without the timezone information.  N.B.: due to the use the
        -:  116:// non-reentrant localtime() function, this function is not thread safe.  Do
        -:  117:// not use it in any code that can be called from multiple threads.
        -:  118:GTEST_API_ std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms);
        -:  119:
        -:  120:// Parses a string for an Int32 flag, in the form of "--flag=value".
        -:  121://
        -:  122:// On success, stores the value of the flag in *value, and returns
        -:  123:// true.  On failure, returns false without changing *value.
        -:  124:GTEST_API_ bool ParseInt32Flag(
        -:  125:    const char* str, const char* flag, Int32* value);
        -:  126:
        -:  127:// Returns a random seed in range [1, kMaxRandomSeed] based on the
        -:  128:// given --gtest_random_seed flag value.
function _ZN7testing8internal21GetRandomSeedFromFlagEi called 0 returned 0% blocks executed 0%
    #####:  129:inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {
    $$$$$:  129-block  0
    #####:  130:  const unsigned int raw_seed = (random_seed_flag == 0) ?
    $$$$$:  130-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  130-block  1
    #####:  131:      static_cast<unsigned int>(GetTimeInMillis()) :
    $$$$$:  131-block  0
call    0 never executed
    #####:  132:      static_cast<unsigned int>(random_seed_flag);
        -:  133:
        -:  134:  // Normalizes the actual seed to range [1, kMaxRandomSeed] such that
        -:  135:  // it's easy to type.
        -:  136:  const int normalized_seed =
    #####:  137:      static_cast<int>((raw_seed - 1U) %
    #####:  138:                       static_cast<unsigned int>(kMaxRandomSeed)) + 1;
    #####:  139:  return normalized_seed;
    $$$$$:  139-block  0
        -:  140:}
        -:  141:
        -:  142:// Returns the first valid random seed after 'seed'.  The behavior is
        -:  143:// undefined if 'seed' is invalid.  The seed after kMaxRandomSeed is
        -:  144:// considered to be 1.
function _ZN7testing8internal17GetNextRandomSeedEi called 0 returned 0% blocks executed 0%
    #####:  145:inline int GetNextRandomSeed(int seed) {
    $$$$$:  145-block  0
    #####:  146:  GTEST_CHECK_(1 <= seed && seed <= kMaxRandomSeed)
    $$$$$:  146-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  146-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  146-block  2
    $$$$$:  146-block  3
    $$$$$:  146-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  146-block  5
call    7 never executed
call    8 never executed
    $$$$$:  146-block  6
call    9 never executed
    %%%%%:  146-block  7
call   10 never executed
    #####:  147:      << "Invalid random seed " << seed << " - must be in [1, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  147-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  147-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  147-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  148:      << kMaxRandomSeed << "].";
    $$$$$:  148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  148-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  149:  const int next_seed = seed + 1;
    #####:  150:  return (next_seed > kMaxRandomSeed) ? 1 : next_seed;
    $$$$$:  150-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  150-block  1
    $$$$$:  150-block  2
    $$$$$:  150-block  3
    $$$$$:  150-block  4
        -:  151:}
        -:  152:
        -:  153:// This class saves the values of all Google Test flags in its c'tor, and
        -:  154:// restores them in its d'tor.
        -:  155:class GTestFlagSaver {
        -:  156: public:
        -:  157:  // The c'tor.
function _ZN7testing8internal14GTestFlagSaverC1Ev called 36 returned 100% blocks executed 56%
       72:  158:  GTestFlagSaver() {
       36:  158-block  0
       36:  158-block  1
call    0 returned 36
call    1 returned 36
call    2 returned 36
call    3 returned 36
call    4 returned 36
call    5 returned 36
    %%%%%:  158-block  2
call    6 never executed
    %%%%%:  158-block  3
call    7 never executed
    %%%%%:  158-block  4
call    8 never executed
    %%%%%:  158-block  5
call    9 never executed
    %%%%%:  158-block  6
call   10 never executed
    %%%%%:  158-block  7
call   11 never executed
       36:  159:    also_run_disabled_tests_ = GTEST_FLAG(also_run_disabled_tests);
       36:  160:    break_on_failure_ = GTEST_FLAG(break_on_failure);
       36:  161:    catch_exceptions_ = GTEST_FLAG(catch_exceptions);
       36:  162:    color_ = GTEST_FLAG(color);
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  163:    death_test_style_ = GTEST_FLAG(death_test_style);
       36:  163-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  164:    death_test_use_fork_ = GTEST_FLAG(death_test_use_fork);
       36:  165:    filter_ = GTEST_FLAG(filter);
       36:  165-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  166:    internal_run_death_test_ = GTEST_FLAG(internal_run_death_test);
       36:  166-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  167:    list_tests_ = GTEST_FLAG(list_tests);
       36:  168:    output_ = GTEST_FLAG(output);
       36:  168-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  169:    print_time_ = GTEST_FLAG(print_time);
       36:  170:    print_utf8_ = GTEST_FLAG(print_utf8);
       36:  171:    random_seed_ = GTEST_FLAG(random_seed);
       36:  172:    repeat_ = GTEST_FLAG(repeat);
       36:  173:    shuffle_ = GTEST_FLAG(shuffle);
       36:  174:    stack_trace_depth_ = GTEST_FLAG(stack_trace_depth);
       36:  175:    stream_result_to_ = GTEST_FLAG(stream_result_to);
       36:  175-block  0
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
       36:  176:    throw_on_failure_ = GTEST_FLAG(throw_on_failure);
       36:  177:  }
       36:  177-block  0
        -:  178:
        -:  179:  // The d'tor is not virtual.  DO NOT INHERIT FROM THIS CLASS.
function _ZN7testing8internal14GTestFlagSaverD1Ev called 36 returned 100% blocks executed 100%
       72:  180:  ~GTestFlagSaver() {
       36:  180-block  0
call    0 returned 36
call    1 returned 36
call    2 returned 36
call    3 returned 36
call    4 returned 36
call    5 returned 36
       36:  181:    GTEST_FLAG(also_run_disabled_tests) = also_run_disabled_tests_;
       36:  182:    GTEST_FLAG(break_on_failure) = break_on_failure_;
       36:  183:    GTEST_FLAG(catch_exceptions) = catch_exceptions_;
       36:  184:    GTEST_FLAG(color) = color_;
       36:  184-block  0
call    0 returned 36
       36:  185:    GTEST_FLAG(death_test_style) = death_test_style_;
call    0 returned 36
       36:  186:    GTEST_FLAG(death_test_use_fork) = death_test_use_fork_;
       36:  187:    GTEST_FLAG(filter) = filter_;
call    0 returned 36
       36:  188:    GTEST_FLAG(internal_run_death_test) = internal_run_death_test_;
call    0 returned 36
       36:  189:    GTEST_FLAG(list_tests) = list_tests_;
       36:  190:    GTEST_FLAG(output) = output_;
call    0 returned 36
       36:  191:    GTEST_FLAG(print_time) = print_time_;
       36:  192:    GTEST_FLAG(print_utf8) = print_utf8_;
       36:  193:    GTEST_FLAG(random_seed) = random_seed_;
       36:  194:    GTEST_FLAG(repeat) = repeat_;
       36:  195:    GTEST_FLAG(shuffle) = shuffle_;
       36:  196:    GTEST_FLAG(stack_trace_depth) = stack_trace_depth_;
       36:  197:    GTEST_FLAG(stream_result_to) = stream_result_to_;
call    0 returned 36
       36:  198:    GTEST_FLAG(throw_on_failure) = throw_on_failure_;
       36:  199:  }
        -:  200:
        -:  201: private:
        -:  202:  // Fields for saving the original values of flags.
        -:  203:  bool also_run_disabled_tests_;
        -:  204:  bool break_on_failure_;
        -:  205:  bool catch_exceptions_;
        -:  206:  std::string color_;
        -:  207:  std::string death_test_style_;
        -:  208:  bool death_test_use_fork_;
        -:  209:  std::string filter_;
        -:  210:  std::string internal_run_death_test_;
        -:  211:  bool list_tests_;
        -:  212:  std::string output_;
        -:  213:  bool print_time_;
        -:  214:  bool print_utf8_;
        -:  215:  internal::Int32 random_seed_;
        -:  216:  internal::Int32 repeat_;
        -:  217:  bool shuffle_;
        -:  218:  internal::Int32 stack_trace_depth_;
        -:  219:  std::string stream_result_to_;
        -:  220:  bool throw_on_failure_;
        -:  221:} GTEST_ATTRIBUTE_UNUSED_;
        -:  222:
        -:  223:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -:  224:// code_point parameter is of type UInt32 because wchar_t may not be
        -:  225:// wide enough to contain a code point.
        -:  226:// If the code_point is not a valid Unicode code point
        -:  227:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -:  228:// to "(Invalid Unicode 0xXXXXXXXX)".
        -:  229:GTEST_API_ std::string CodePointToUtf8(UInt32 code_point);
        -:  230:
        -:  231:// Converts a wide string to a narrow string in UTF-8 encoding.
        -:  232:// The wide string is assumed to have the following encoding:
        -:  233://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
        -:  234://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -:  235:// Parameter str points to a null-terminated wide string.
        -:  236:// Parameter num_chars may additionally limit the number
        -:  237:// of wchar_t characters processed. -1 is used when the entire string
        -:  238:// should be processed.
        -:  239:// If the string contains code points that are not valid Unicode code points
        -:  240:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -:  241:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -:  242:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -:  243:// will be encoded as individual Unicode characters from Basic Normal Plane.
        -:  244:GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);
        -:  245:
        -:  246:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -:  247:// if the variable is present. If a file already exists at this location, this
        -:  248:// function will write over it. If the variable is present, but the file cannot
        -:  249:// be created, prints an error and exits.
        -:  250:void WriteToShardStatusFileIfNeeded();
        -:  251:
        -:  252:// Checks whether sharding is enabled by examining the relevant
        -:  253:// environment variable values. If the variables are present,
        -:  254:// but inconsistent (e.g., shard_index >= total_shards), prints
        -:  255:// an error and exits. If in_subprocess_for_death_test, sharding is
        -:  256:// disabled because it must only be applied to the original test
        -:  257:// process. Otherwise, we could filter out death tests we intended to execute.
        -:  258:GTEST_API_ bool ShouldShard(const char* total_shards_str,
        -:  259:                            const char* shard_index_str,
        -:  260:                            bool in_subprocess_for_death_test);
        -:  261:
        -:  262:// Parses the environment variable var as an Int32. If it is unset,
        -:  263:// returns default_val. If it is not an Int32, prints an error and
        -:  264:// and aborts.
        -:  265:GTEST_API_ Int32 Int32FromEnvOrDie(const char* env_var, Int32 default_val);
        -:  266:
        -:  267:// Given the total number of shards, the shard index, and the test id,
        -:  268:// returns true iff the test should be run on this shard. The test id is
        -:  269:// some arbitrary but unique non-negative integer assigned to each test
        -:  270:// method. Assumes that 0 <= shard_index < total_shards.
        -:  271:GTEST_API_ bool ShouldRunTestOnShard(
        -:  272:    int total_shards, int shard_index, int test_id);
        -:  273:
        -:  274:// STL container utilities.
        -:  275:
        -:  276:// Returns the number of elements in the given container that satisfy
        -:  277:// the given predicate.
        -:  278:template <class Container, typename Predicate>
function _ZN7testing8internal7CountIfISt6vectorIPNS_8TestInfoESaIS4_EEPFbPKS3_EEEiRKT_T0_ called 132 returned 100% blocks executed 100%
function _ZN7testing8internal7CountIfISt6vectorINS_14TestPartResultESaIS3_EEPFbRKS3_EEEiRKT_T0_ called 73 returned 100% blocks executed 58%
function _ZN7testing8internal7CountIfISt6vectorIPNS_8TestCaseESaIS4_EEPFbPKS3_EEEiRKT_T0_ called 4 returned 100% blocks executed 100%
      209:  279:inline int CountIf(const Container& c, Predicate predicate) {
      132:  279-block  0
       73:  279-block  1
        4:  279-block  2
        -:  280:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  281:  // Solaris has a non-standard signature.
      209:  282:  int count = 0;
      685:  283:  for (typename Container::const_iterator it = c.begin(); it != c.end(); ++it) {
      132:  283-block  0
call    0 returned 132
      564:  283-block  1
call    1 returned 564
call    2 returned 564
branch  3 taken 432 (fallthrough)
branch  4 taken 132
      432:  283-block  2
call    5 returned 432
       73:  283-block  3
call    6 returned 73
       73:  283-block  4
call    7 returned 73
call    8 returned 73
branch  9 taken 0 (fallthrough)
branch 10 taken 73
    $$$$$:  283-block  5
call   11 never executed
        4:  283-block  6
call   12 returned 4
       48:  283-block  7
call   13 returned 48
call   14 returned 48
branch 15 taken 44 (fallthrough)
branch 16 taken 4
       44:  283-block  8
call   17 returned 44
      476:  284:    if (predicate(*it))
      432:  284-block  0
call    0 returned 432
call    1 returned 432
branch  2 taken 432 (fallthrough)
branch  3 taken 0 (throw)
      432:  284-block  1
branch  4 taken 185 (fallthrough)
branch  5 taken 247
    $$$$$:  284-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  284-block  3
branch 10 never executed
branch 11 never executed
       44:  284-block  4
call   12 returned 44
call   13 returned 44
branch 14 taken 44 (fallthrough)
branch 15 taken 0 (throw)
       44:  284-block  5
branch 16 taken 24 (fallthrough)
branch 17 taken 20
      209:  285:      ++count;
      185:  285-block  0
    $$$$$:  285-block  1
       24:  285-block  2
        -:  286:  }
      209:  287:  return count;
      132:  287-block  0
      132:  287-block  1
       73:  287-block  2
       73:  287-block  3
        4:  287-block  4
        4:  287-block  5
        -:  288:}
        -:  289:
        -:  290:// Applies a function/functor to each element in the container.
        -:  291:template <class Container, typename Functor>
function _ZN7testing8internal7ForEachISt6vectorIPNS_11EnvironmentESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
function _ZN7testing8internal7ForEachISt6vectorIPNS_17TestEventListenerESaIS4_EEPFvS4_EEEvRKT_T0_ called 1 returned 100% blocks executed 100%
function _ZN7testing8internal7ForEachISt6vectorIPNS_8TestInfoESaIS4_EEPFvS4_EEEvRKT_T0_ called 22 returned 100% blocks executed 100%
function _ZN7testing8internal7ForEachISt6vectorIPNS_8TestCaseESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
       27:  292:void ForEach(const Container& c, Functor functor) {
        2:  292-block  0
        1:  292-block  1
       22:  292-block  2
        2:  292-block  3
       27:  293:  std::for_each(c.begin(), c.end(), functor);
        2:  293-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        1:  293-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
       22:  293-block  2
call    6 returned 22
call    7 returned 22
call    8 returned 22
        2:  293-block  3
call    9 returned 2
call   10 returned 2
call   11 returned 2
       27:  294:}
        -:  295:
        -:  296:// Returns the i-th element of the vector, or default_value if i is not
        -:  297:// in range [0, v.size()).
        -:  298:template <typename E>
function _ZN7testing8internal12GetElementOrIiEET_RKSt6vectorIS2_SaIS2_EEiS2_ called 75 returned 100% blocks executed 88%
       75:  299:inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {
       75:  299-block  0
       75:  300:  return (i < 0 || i >= static_cast<int>(v.size())) ? default_value : v[i];
       75:  300-block  0
branch  0 taken 75 (fallthrough)
branch  1 taken 0
       75:  300-block  1
call    2 returned 75
branch  3 taken 0 (fallthrough)
branch  4 taken 75
    $$$$$:  300-block  2
       75:  300-block  3
call    5 returned 75
       75:  300-block  4
        -:  301:}
        -:  302:
        -:  303:// Performs an in-place shuffle of a range of the vector's elements.
        -:  304:// 'begin' and 'end' are element indices as an STL-style range;
        -:  305:// i.e. [begin, end) are shuffled, where 'end' == size() means to
        -:  306:// shuffle to the end of the vector.
        -:  307:template <typename E>
function _ZN7testing8internal12ShuffleRangeIiEEvPNS0_6RandomEiiPSt6vectorIT_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####:  308:void ShuffleRange(internal::Random* random, int begin, int end,
    $$$$$:  308-block  0
        -:  309:                  std::vector<E>* v) {
    #####:  310:  const int size = static_cast<int>(v->size());
    $$$$$:  310-block  0
call    0 never executed
    #####:  311:  GTEST_CHECK_(0 <= begin && begin <= size)
branch  0 never executed
branch  1 never executed
    $$$$$:  311-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  311-block  1
    $$$$$:  311-block  2
    $$$$$:  311-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  311-block  4
call    7 never executed
call    8 never executed
    $$$$$:  311-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  311-block  6
call   12 never executed
    %%%%%:  311-block  7
call   13 never executed
call   14 never executed
    #####:  312:      << "Invalid shuffle range start " << begin << ": must be in range [0, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  312-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  312-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  312-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  313:      << size << "].";
    $$$$$:  313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  314:  GTEST_CHECK_(begin <= end && end <= size)
    $$$$$:  314-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  314-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  314-block  2
    $$$$$:  314-block  3
    $$$$$:  314-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  314-block  5
call    7 never executed
call    8 never executed
    $$$$$:  314-block  6
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  314-block  7
call   12 never executed
    %%%%%:  314-block  8
call   13 never executed
    #####:  315:      << "Invalid shuffle range finish " << end << ": must be in range ["
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  315-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  315-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  315-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  316:      << begin << ", " << size << "].";
    $$$$$:  316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  316-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  316-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  317:
        -:  318:  // Fisher-Yates shuffle, from
        -:  319:  // http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
    #####:  320:  for (int range_width = end - begin; range_width >= 2; range_width--) {
    $$$$$:  320-block  0
    $$$$$:  320-block  1
branch  0 never executed
branch  1 never executed
    #####:  321:    const int last_in_range = begin + range_width - 1;
    #####:  322:    const int selected = begin + random->Generate(range_width);
    $$$$$:  322-block  0
call    0 never executed
    #####:  323:    std::swap((*v)[selected], (*v)[last_in_range]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  324:  }
    #####:  325:}
    $$$$$:  325-block  0
        -:  326:
        -:  327:// Performs an in-place shuffle of the vector's elements.
        -:  328:template <typename E>
function _ZN7testing8internal7ShuffleIiEEvPNS0_6RandomEPSt6vectorIT_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####:  329:inline void Shuffle(internal::Random* random, std::vector<E>* v) {
    $$$$$:  329-block  0
    #####:  330:  ShuffleRange(random, 0, static_cast<int>(v->size()), v);
    $$$$$:  330-block  0
call    0 never executed
call    1 never executed
    #####:  331:}
        -:  332:
        -:  333:// A function for deleting an object.  Handy for being used as a
        -:  334:// functor.
        -:  335:template <typename T>
function _ZN7testing8internalL6DeleteINS_11EnvironmentEEEvPT_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internalL6DeleteINS_8TestCaseEEEvPT_ called 11 returned 100% blocks executed 100%
function _ZN7testing8internalL6DeleteINS_17TestEventListenerEEEvPT_ called 1 returned 100% blocks executed 100%
function _ZN7testing8internalL6DeleteINS_8TestInfoEEEvPT_ called 36 returned 100% blocks executed 100%
       48:  336:static void Delete(T* x) {
    $$$$$:  336-block  0
       11:  336-block  1
        1:  336-block  2
       36:  336-block  3
       48:  337:  delete x;
    $$$$$:  337-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  337-block  1
call    2 never executed
       11:  337-block  2
branch  3 taken 11 (fallthrough)
branch  4 taken 0
       11:  337-block  3
call    5 returned 11
        1:  337-block  4
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:  337-block  5
call    8 returned 1
       36:  337-block  6
branch  9 taken 36 (fallthrough)
branch 10 taken 0
       36:  337-block  7
call   11 returned 36
call   12 returned 36
       48:  338:}
        -:  339:
        -:  340:// A predicate that checks the key of a TestProperty against a known key.
        -:  341://
        -:  342:// TestPropertyKeyIs is copyable.
function _ZN7testing8internal17TestPropertyKeyIsC1ERKS1_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal17TestPropertyKeyIsD1Ev called 0 returned 0% blocks executed 0%
    #####:  343:class TestPropertyKeyIs {
    $$$$$:  343-block  0
    $$$$$:  343-block  1
call    0 never executed
    $$$$$:  343-block  2
    $$$$$:  343-block  3
call    1 never executed
        -:  344: public:
        -:  345:  // Constructor.
        -:  346:  //
        -:  347:  // TestPropertyKeyIs has NO default constructor.
function _ZN7testing8internal17TestPropertyKeyIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  348:  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}
    $$$$$:  348-block  0
    $$$$$:  348-block  1
call    0 never executed
        -:  349:
        -:  350:  // Returns true iff the test name of test property matches on key_.
function _ZNK7testing8internal17TestPropertyKeyIsclERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####:  351:  bool operator()(const TestProperty& test_property) const {
    $$$$$:  351-block  0
    #####:  352:    return test_property.key() == key_;
    $$$$$:  352-block  0
call    0 never executed
call    1 never executed
        -:  353:  }
        -:  354:
        -:  355: private:
        -:  356:  std::string key_;
        -:  357:};
        -:  358:
        -:  359:// Class UnitTestOptions.
        -:  360://
        -:  361:// This class contains functions for processing options the user
        -:  362:// specifies when running the tests.  It has only static members.
        -:  363://
        -:  364:// In most cases, the user can specify an option using either an
        -:  365:// environment variable or a command line flag.  E.g. you can set the
        -:  366:// test filter using either GTEST_FILTER or --gtest_filter.  If both
        -:  367:// the variable and the flag are present, the latter overrides the
        -:  368:// former.
        -:  369:class GTEST_API_ UnitTestOptions {
        -:  370: public:
        -:  371:  // Functions for processing the gtest_output flag.
        -:  372:
        -:  373:  // Returns the output format, or "" for normal printed output.
        -:  374:  static std::string GetOutputFormat();
        -:  375:
        -:  376:  // Returns the absolute path of the requested output file, or the
        -:  377:  // default (test_detail.xml in the original working directory) if
        -:  378:  // none was explicitly specified.
        -:  379:  static std::string GetAbsolutePathToOutputFile();
        -:  380:
        -:  381:  // Functions for processing the gtest_filter flag.
        -:  382:
        -:  383:  // Returns true iff the wildcard pattern matches the string.  The
        -:  384:  // first ':' or '\0' character in pattern marks the end of it.
        -:  385:  //
        -:  386:  // This recursive algorithm isn't very efficient, but is clear and
        -:  387:  // works well enough for matching test names, which are short.
        -:  388:  static bool PatternMatchesString(const char *pattern, const char *str);
        -:  389:
        -:  390:  // Returns true iff the user-specified filter matches the test case
        -:  391:  // name and the test name.
        -:  392:  static bool FilterMatchesTest(const std::string &test_case_name,
        -:  393:                                const std::string &test_name);
        -:  394:
        -:  395:#if GTEST_OS_WINDOWS
        -:  396:  // Function for supporting the gtest_catch_exception flag.
        -:  397:
        -:  398:  // Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  399:  // given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  400:  // This function is useful as an __except condition.
        -:  401:  static int GTestShouldProcessSEH(DWORD exception_code);
        -:  402:#endif  // GTEST_OS_WINDOWS
        -:  403:
        -:  404:  // Returns true if "name" matches the ':' separated list of glob-style
        -:  405:  // filters in "filter".
        -:  406:  static bool MatchesFilter(const std::string& name, const char* filter);
        -:  407:};
        -:  408:
        -:  409:// Returns the current application's name, removing directory path if that
        -:  410:// is present.  Used by UnitTestOptions::GetOutputFile.
        -:  411:GTEST_API_ FilePath GetCurrentExecutableName();
        -:  412:
        -:  413:// The role interface for getting the OS stack trace as a string.
        -:  414:class OsStackTraceGetterInterface {
        -:  415: public:
function _ZN7testing8internal27OsStackTraceGetterInterfaceC2Ev called 1 returned 100% blocks executed 100%
        1:  416:  OsStackTraceGetterInterface() {}
        1:  416-block  0
function _ZN7testing8internal27OsStackTraceGetterInterfaceD2Ev called 1 returned 100% blocks executed 100%
        1:  417:  virtual ~OsStackTraceGetterInterface() {}
        1:  417-block  0
        -:  418:
        -:  419:  // Returns the current OS stack trace as an std::string.  Parameters:
        -:  420:  //
        -:  421:  //   max_depth  - the maximum number of stack frames to be included
        -:  422:  //                in the trace.
        -:  423:  //   skip_count - the number of top frames to be skipped; doesn't count
        -:  424:  //                against max_depth.
        -:  425:  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;
        -:  426:
        -:  427:  // UponLeavingGTest() should be called immediately before Google Test calls
        -:  428:  // user code. It saves some information about the current stack that
        -:  429:  // CurrentStackTrace() will use to find and hide Google Test stack frames.
        -:  430:  virtual void UponLeavingGTest() = 0;
        -:  431:
        -:  432:  // This string is inserted in place of stack frames that are part of
        -:  433:  // Google Test's implementation.
        -:  434:  static const char* const kElidedFramesMarker;
        -:  435:
        -:  436: private:
        -:  437:  GTEST_DISALLOW_COPY_AND_ASSIGN_(OsStackTraceGetterInterface);
        -:  438:};
        -:  439:
        -:  440:// A working implementation of the OsStackTraceGetterInterface interface.
function _ZN7testing8internal18OsStackTraceGetterD0Ev called 1 returned 100% blocks executed 100%
function _ZN7testing8internal18OsStackTraceGetterD1Ev called 1 returned 100% blocks executed 100%
        4:  441:class OsStackTraceGetter : public OsStackTraceGetterInterface {
        1:  441-block  0
        1:  441-block  1
call    0 returned 1
call    1 returned 1
        1:  441-block  2
        1:  441-block  3
call    2 returned 1
        -:  442: public:
function _ZN7testing8internal18OsStackTraceGetterC1Ev called 1 returned 100% blocks executed 100%
        2:  443:  OsStackTraceGetter() {}
        1:  443-block  0
        1:  443-block  1
call    0 returned 1
        -:  444:
        -:  445:  virtual std::string CurrentStackTrace(int max_depth, int skip_count);
        -:  446:  virtual void UponLeavingGTest();
        -:  447:
        -:  448: private:
        -:  449:  GTEST_DISALLOW_COPY_AND_ASSIGN_(OsStackTraceGetter);
        -:  450:};
        -:  451:
        -:  452:// Information about a Google Test trace point.
function _ZN7testing8internal9TraceInfoC1EOS1_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal9TraceInfoC1ERKS1_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal9TraceInfoD1Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal9TraceInfoC1Ev called 0 returned 0% blocks executed 0%
    #####:  453:struct TraceInfo {
    $$$$$:  453-block  0
    $$$$$:  453-block  1
call    0 never executed
    $$$$$:  453-block  2
    $$$$$:  453-block  3
call    1 never executed
    $$$$$:  453-block  4
    $$$$$:  453-block  5
call    2 never executed
    $$$$$:  453-block  6
    $$$$$:  453-block  7
call    3 never executed
        -:  454:  const char* file;
        -:  455:  int line;
        -:  456:  std::string message;
        -:  457:};
        -:  458:
        -:  459:// This is the default global test part result reporter used in UnitTestImpl.
        -:  460:// This class should only be used by UnitTestImpl.
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterD1Ev called 1 returned 100% blocks executed 100%
        2:  461:class DefaultGlobalTestPartResultReporter
    $$$$$:  461-block  0
    $$$$$:  461-block  1
call    0 never executed
call    1 never executed
        1:  461-block  2
        1:  461-block  3
call    2 returned 1
        -:  462:  : public TestPartResultReporterInterface {
        -:  463: public:
        -:  464:  explicit DefaultGlobalTestPartResultReporter(UnitTestImpl* unit_test);
        -:  465:  // Implements the TestPartResultReporterInterface. Reports the test part
        -:  466:  // result in the current test.
        -:  467:  virtual void ReportTestPartResult(const TestPartResult& result);
        -:  468:
        -:  469: private:
        -:  470:  UnitTestImpl* const unit_test_;
        -:  471:
        -:  472:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultGlobalTestPartResultReporter);
        -:  473:};
        -:  474:
        -:  475:// This is the default per thread test part result reporter used in
        -:  476:// UnitTestImpl. This class should only be used by UnitTestImpl.
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterD1Ev called 1 returned 100% blocks executed 100%
        2:  477:class DefaultPerThreadTestPartResultReporter
    $$$$$:  477-block  0
    $$$$$:  477-block  1
call    0 never executed
call    1 never executed
        1:  477-block  2
        1:  477-block  3
call    2 returned 1
        -:  478:    : public TestPartResultReporterInterface {
        -:  479: public:
        -:  480:  explicit DefaultPerThreadTestPartResultReporter(UnitTestImpl* unit_test);
        -:  481:  // Implements the TestPartResultReporterInterface. The implementation just
        -:  482:  // delegates to the current global test part result reporter of *unit_test_.
        -:  483:  virtual void ReportTestPartResult(const TestPartResult& result);
        -:  484:
        -:  485: private:
        -:  486:  UnitTestImpl* const unit_test_;
        -:  487:
        -:  488:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultPerThreadTestPartResultReporter);
        -:  489:};
        -:  490:
        -:  491:// The private implementation of the UnitTest class.  We don't protect
        -:  492:// the methods under a mutex, as this class is not accessible by a
        -:  493:// user and the UnitTest class that delegates work to this class does
        -:  494:// proper locking.
        -:  495:class GTEST_API_ UnitTestImpl {
        -:  496: public:
        -:  497:  explicit UnitTestImpl(UnitTest* parent);
        -:  498:  virtual ~UnitTestImpl();
        -:  499:
        -:  500:  // There are two different ways to register your own TestPartResultReporter.
        -:  501:  // You can register your own repoter to listen either only for test results
        -:  502:  // from the current thread or for results from all threads.
        -:  503:  // By default, each per-thread test result repoter just passes a new
        -:  504:  // TestPartResult to the global test result reporter, which registers the
        -:  505:  // test part result for the currently running test.
        -:  506:
        -:  507:  // Returns the global test part result reporter.
        -:  508:  TestPartResultReporterInterface* GetGlobalTestPartResultReporter();
        -:  509:
        -:  510:  // Sets the global test part result reporter.
        -:  511:  void SetGlobalTestPartResultReporter(
        -:  512:      TestPartResultReporterInterface* reporter);
        -:  513:
        -:  514:  // Returns the test part result reporter for the current thread.
        -:  515:  TestPartResultReporterInterface* GetTestPartResultReporterForCurrentThread();
        -:  516:
        -:  517:  // Sets the test part result reporter for the current thread.
        -:  518:  void SetTestPartResultReporterForCurrentThread(
        -:  519:      TestPartResultReporterInterface* reporter);
        -:  520:
        -:  521:  // Gets the number of successful test cases.
        -:  522:  int successful_test_case_count() const;
        -:  523:
        -:  524:  // Gets the number of failed test cases.
        -:  525:  int failed_test_case_count() const;
        -:  526:
        -:  527:  // Gets the number of all test cases.
        -:  528:  int total_test_case_count() const;
        -:  529:
        -:  530:  // Gets the number of all test cases that contain at least one test
        -:  531:  // that should run.
        -:  532:  int test_case_to_run_count() const;
        -:  533:
        -:  534:  // Gets the number of successful tests.
        -:  535:  int successful_test_count() const;
        -:  536:
        -:  537:  // Gets the number of failed tests.
        -:  538:  int failed_test_count() const;
        -:  539:
        -:  540:  // Gets the number of disabled tests that will be reported in the XML report.
        -:  541:  int reportable_disabled_test_count() const;
        -:  542:
        -:  543:  // Gets the number of disabled tests.
        -:  544:  int disabled_test_count() const;
        -:  545:
        -:  546:  // Gets the number of tests to be printed in the XML report.
        -:  547:  int reportable_test_count() const;
        -:  548:
        -:  549:  // Gets the number of all tests.
        -:  550:  int total_test_count() const;
        -:  551:
        -:  552:  // Gets the number of tests that should run.
        -:  553:  int test_to_run_count() const;
        -:  554:
        -:  555:  // Gets the time of the test program start, in ms from the start of the
        -:  556:  // UNIX epoch.
function _ZNK7testing8internal12UnitTestImpl15start_timestampEv called 0 returned 0% blocks executed 0%
    #####:  557:  TimeInMillis start_timestamp() const { return start_timestamp_; }
    $$$$$:  557-block  0
    $$$$$:  557-block  1
        -:  558:
        -:  559:  // Gets the elapsed time, in milliseconds.
function _ZNK7testing8internal12UnitTestImpl12elapsed_timeEv called 1 returned 100% blocks executed 100%
        2:  560:  TimeInMillis elapsed_time() const { return elapsed_time_; }
        1:  560-block  0
        1:  560-block  1
        -:  561:
        -:  562:  // Returns true iff the unit test passed (i.e. all test cases passed).
function _ZNK7testing8internal12UnitTestImpl6PassedEv called 2 returned 100% blocks executed 100%
        4:  563:  bool Passed() const { return !Failed(); }
        2:  563-block  0
        2:  563-block  1
call    0 returned 2
        -:  564:
        -:  565:  // Returns true iff the unit test failed (i.e. some test case failed
        -:  566:  // or something outside of all tests failed).
function _ZNK7testing8internal12UnitTestImpl6FailedEv called 2 returned 100% blocks executed 56%
        2:  567:  bool Failed() const {
        2:  567-block  0
        2:  568:    return failed_test_case_count() > 0 || ad_hoc_test_result()->Failed();
        2:  568-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    $$$$$:  568-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        2:  568-block  2
    $$$$$:  568-block  3
        2:  568-block  4
        -:  569:  }
        -:  570:
        -:  571:  // Gets the i-th test case among all the test cases. i can range from 0 to
        -:  572:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8internal12UnitTestImpl11GetTestCaseEi called 11 returned 100% blocks executed 86%
       11:  573:  const TestCase* GetTestCase(int i) const {
       11:  573-block  0
       11:  574:    const int index = GetElementOr(test_case_indices_, i, -1);
       11:  574-block  0
call    0 returned 11
       11:  575:    return index < 0 ? NULL : test_cases_[i];
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  575-block  0
call    2 returned 11
    $$$$$:  575-block  1
       11:  575-block  2
        -:  576:  }
        -:  577:
        -:  578:  // Gets the i-th test case among all the test cases. i can range from 0 to
        -:  579:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8internal12UnitTestImpl18GetMutableTestCaseEi called 11 returned 100% blocks executed 86%
       11:  580:  TestCase* GetMutableTestCase(int i) {
       11:  580-block  0
       11:  581:    const int index = GetElementOr(test_case_indices_, i, -1);
       11:  581-block  0
call    0 returned 11
       11:  582:    return index < 0 ? NULL : test_cases_[index];
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  582-block  0
call    2 returned 11
    $$$$$:  582-block  1
       11:  582-block  2
        -:  583:  }
        -:  584:
        -:  585:  // Provides access to the event listener list.
function _ZN7testing8internal12UnitTestImpl9listenersEv called 50 returned 100% blocks executed 100%
      100:  586:  TestEventListeners* listeners() { return &listeners_; }
       50:  586-block  0
       50:  586-block  1
        -:  587:
        -:  588:  // Returns the TestResult for the test that's currently running, or
        -:  589:  // the TestResult for the ad hoc test if no test is running.
        -:  590:  TestResult* current_test_result();
        -:  591:
        -:  592:  // Returns the TestResult for the ad hoc test.
function _ZNK7testing8internal12UnitTestImpl18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####:  593:  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }
    $$$$$:  593-block  0
    $$$$$:  593-block  1
        -:  594:
        -:  595:  // Sets the OS stack trace getter.
        -:  596:  //
        -:  597:  // Does nothing if the input and the current OS stack trace getter
        -:  598:  // are the same; otherwise, deletes the old getter and makes the
        -:  599:  // input the current getter.
        -:  600:  void set_os_stack_trace_getter(OsStackTraceGetterInterface* getter);
        -:  601:
        -:  602:  // Returns the current OS stack trace getter if it is not NULL;
        -:  603:  // otherwise, creates an OsStackTraceGetter, makes it the current
        -:  604:  // getter, and returns it.
        -:  605:  OsStackTraceGetterInterface* os_stack_trace_getter();
        -:  606:
        -:  607:  // Returns the current OS stack trace as an std::string.
        -:  608:  //
        -:  609:  // The maximum number of stack frames to be included is specified by
        -:  610:  // the gtest_stack_trace_depth flag.  The skip_count parameter
        -:  611:  // specifies the number of top frames to be skipped, which doesn't
        -:  612:  // count against the number of frames to be included.
        -:  613:  //
        -:  614:  // For example, if Foo() calls Bar(), which in turn calls
        -:  615:  // CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -:  616:  // trace but Bar() and CurrentOsStackTraceExceptTop() won't.
        -:  617:  std::string CurrentOsStackTraceExceptTop(int skip_count) GTEST_NO_INLINE_;
        -:  618:
        -:  619:  // Finds and returns a TestCase with the given name.  If one doesn't
        -:  620:  // exist, creates one and returns it.
        -:  621:  //
        -:  622:  // Arguments:
        -:  623:  //
        -:  624:  //   test_case_name: name of the test case
        -:  625:  //   type_param:     the name of the test's type parameter, or NULL if
        -:  626:  //                   this is not a typed or a type-parameterized test.
        -:  627:  //   set_up_tc:      pointer to the function that sets up the test case
        -:  628:  //   tear_down_tc:   pointer to the function that tears down the test case
        -:  629:  TestCase* GetTestCase(const char* test_case_name,
        -:  630:                        const char* type_param,
        -:  631:                        Test::SetUpTestCaseFunc set_up_tc,
        -:  632:                        Test::TearDownTestCaseFunc tear_down_tc);
        -:  633:
        -:  634:  // Adds a TestInfo to the unit test.
        -:  635:  //
        -:  636:  // Arguments:
        -:  637:  //
        -:  638:  //   set_up_tc:    pointer to the function that sets up the test case
        -:  639:  //   tear_down_tc: pointer to the function that tears down the test case
        -:  640:  //   test_info:    the TestInfo object
function _ZN7testing8internal12UnitTestImpl11AddTestInfoEPFvvES3_PNS_8TestInfoE called 36 returned 100% blocks executed 63%
       36:  641:  void AddTestInfo(Test::SetUpTestCaseFunc set_up_tc,
       36:  641-block  0
        -:  642:                   Test::TearDownTestCaseFunc tear_down_tc,
        -:  643:                   TestInfo* test_info) {
        -:  644:    // In order to support thread-safe death tests, we need to
        -:  645:    // remember the original working directory when the test program
        -:  646:    // was first invoked.  We cannot do this in RUN_ALL_TESTS(), as
        -:  647:    // the user may have changed the current directory before calling
        -:  648:    // RUN_ALL_TESTS().  Therefore we capture the current directory in
        -:  649:    // AddTestInfo(), which is called to register a TEST or TEST_F
        -:  650:    // before main() is reached.
       36:  651:    if (original_working_dir_.IsEmpty()) {
       36:  651-block  0
call    0 returned 36
branch  1 taken 1 (fallthrough)
branch  2 taken 35
        1:  652:      original_working_dir_.Set(FilePath::GetCurrentDir());
        1:  652-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  652-block  1
call    4 returned 1
    %%%%%:  652-block  2
call    5 never executed
call    6 never executed
        1:  653:      GTEST_CHECK_(!original_working_dir_.IsEmpty())
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    $$$$$:  653-block  0
call    4 never executed
call    5 never executed
    $$$$$:  653-block  1
call    6 never executed
        1:  653-block  2
    %%%%%:  653-block  3
call    7 never executed
    #####:  654:          << "Failed to get the current working directory.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  654-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  655:    }
        -:  656:
        -:  657:    GetTestCase(test_info->test_case_name(),
        -:  658:                test_info->type_param(),
        -:  659:                set_up_tc,
       36:  660:                tear_down_tc)->AddTestInfo(test_info);
       36:  660-block  0
call    0 returned 36
call    1 returned 36
call    2 returned 36
call    3 returned 36
       36:  661:  }
        -:  662:
        -:  663:  // Returns ParameterizedTestCaseRegistry object used to keep track of
        -:  664:  // value-parameterized tests and instantiate and register them.
function _ZN7testing8internal12UnitTestImpl27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####:  665:  internal::ParameterizedTestCaseRegistry& parameterized_test_registry() {
    $$$$$:  665-block  0
    #####:  666:    return parameterized_test_registry_;
    $$$$$:  666-block  0
        -:  667:  }
        -:  668:
        -:  669:  // Sets the TestCase object for the test that's currently running.
function _ZN7testing8internal12UnitTestImpl21set_current_test_caseEPNS_8TestCaseE called 22 returned 100% blocks executed 100%
       22:  670:  void set_current_test_case(TestCase* a_current_test_case) {
       22:  670-block  0
       22:  671:    current_test_case_ = a_current_test_case;
       22:  672:  }
        -:  673:
        -:  674:  // Sets the TestInfo object for the test that's currently running.  If
        -:  675:  // current_test_info is NULL, the assertion results will be stored in
        -:  676:  // ad_hoc_test_result_.
function _ZN7testing8internal12UnitTestImpl21set_current_test_infoEPNS_8TestInfoE called 72 returned 100% blocks executed 100%
       72:  677:  void set_current_test_info(TestInfo* a_current_test_info) {
       72:  677-block  0
       72:  678:    current_test_info_ = a_current_test_info;
       72:  679:  }
        -:  680:
        -:  681:  // Registers all parameterized tests defined using TEST_P and
        -:  682:  // INSTANTIATE_TEST_CASE_P, creating regular tests for each test/parameter
        -:  683:  // combination. This method can be called more then once; it has guards
        -:  684:  // protecting from registering the tests more then once.  If
        -:  685:  // value-parameterized tests are disabled, RegisterParameterizedTests is
        -:  686:  // present but does nothing.
        -:  687:  void RegisterParameterizedTests();
        -:  688:
        -:  689:  // Runs all tests in this UnitTest object, prints the result, and
        -:  690:  // returns true if all tests are successful.  If any exception is
        -:  691:  // thrown during a test, this test is considered to be failed, but
        -:  692:  // the rest of the tests will still be run.
        -:  693:  bool RunAllTests();
        -:  694:
        -:  695:  // Clears the results of all tests, except the ad hoc tests.
function _ZN7testing8internal12UnitTestImpl23ClearNonAdHocTestResultEv called 1 returned 100% blocks executed 100%
        1:  696:  void ClearNonAdHocTestResult() {
        1:  696-block  0
        1:  697:    ForEach(test_cases_, TestCase::ClearTestCaseResult);
        1:  697-block  0
call    0 returned 1
        1:  698:  }
        -:  699:
        -:  700:  // Clears the results of ad-hoc test assertions.
        -:  701:  void ClearAdHocTestResult() {
        -:  702:    ad_hoc_test_result_.Clear();
        -:  703:  }
        -:  704:
        -:  705:  // Adds a TestProperty to the current TestResult object when invoked in a
        -:  706:  // context of a test or a test case, or to the global property set. If the
        -:  707:  // result already contains a property with the same key, the value will be
        -:  708:  // updated.
        -:  709:  void RecordProperty(const TestProperty& test_property);
        -:  710:
        -:  711:  enum ReactionToSharding {
        -:  712:    HONOR_SHARDING_PROTOCOL,
        -:  713:    IGNORE_SHARDING_PROTOCOL
        -:  714:  };
        -:  715:
        -:  716:  // Matches the full name of each test against the user-specified
        -:  717:  // filter to decide whether the test should run, then records the
        -:  718:  // result in each TestCase and TestInfo object.
        -:  719:  // If shard_tests == HONOR_SHARDING_PROTOCOL, further filters tests
        -:  720:  // based on sharding variables in the environment.
        -:  721:  // Returns the number of tests that should run.
        -:  722:  int FilterTests(ReactionToSharding shard_tests);
        -:  723:
        -:  724:  // Prints the names of the tests matching the user-specified filter flag.
        -:  725:  void ListTestsMatchingFilter();
        -:  726:
function _ZNK7testing8internal12UnitTestImpl17current_test_caseEv called 36 returned 100% blocks executed 100%
       72:  727:  const TestCase* current_test_case() const { return current_test_case_; }
       36:  727-block  0
       36:  727-block  1
function _ZN7testing8internal12UnitTestImpl17current_test_infoEv called 36 returned 100% blocks executed 100%
       72:  728:  TestInfo* current_test_info() { return current_test_info_; }
       36:  728-block  0
       36:  728-block  1
function _ZNK7testing8internal12UnitTestImpl17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####:  729:  const TestInfo* current_test_info() const { return current_test_info_; }
    $$$$$:  729-block  0
    $$$$$:  729-block  1
        -:  730:
        -:  731:  // Returns the vector of environments that need to be set-up/torn-down
        -:  732:  // before/after the tests are run.
function _ZN7testing8internal12UnitTestImpl12environmentsEv called 0 returned 0% blocks executed 0%
    #####:  733:  std::vector<Environment*>& environments() { return environments_; }
    $$$$$:  733-block  0
    $$$$$:  733-block  1
        -:  734:
        -:  735:  // Getters for the per-thread Google Test trace stack.
function _ZN7testing8internal12UnitTestImpl17gtest_trace_stackEv called 1 returned 100% blocks executed 100%
        1:  736:  std::vector<TraceInfo>& gtest_trace_stack() {
        1:  736-block  0
        1:  737:    return *(gtest_trace_stack_.pointer());
        1:  737-block  0
call    0 returned 1
        -:  738:  }
        -:  739:  const std::vector<TraceInfo>& gtest_trace_stack() const {
        -:  740:    return gtest_trace_stack_.get();
        -:  741:  }
        -:  742:
        -:  743:#if GTEST_HAS_DEATH_TEST
function _ZN7testing8internal12UnitTestImpl34InitDeathTestSubprocessControlInfoEv called 1 returned 100% blocks executed 100%
        1:  744:  void InitDeathTestSubprocessControlInfo() {
        1:  744-block  0
        1:  745:    internal_run_death_test_flag_.reset(ParseInternalRunDeathTestFlag());
        1:  745-block  0
call    0 returned 1
call    1 returned 1
        1:  746:  }
        -:  747:  // Returns a pointer to the parsed --gtest_internal_run_death_test
        -:  748:  // flag, or NULL if that flag was not specified.
        -:  749:  // This information is useful only in a death test child process.
        -:  750:  // Must not be called before a call to InitGoogleTest.
function _ZNK7testing8internal12UnitTestImpl28internal_run_death_test_flagEv called 0 returned 0% blocks executed 0%
    #####:  751:  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {
    $$$$$:  751-block  0
    #####:  752:    return internal_run_death_test_flag_.get();
    $$$$$:  752-block  0
call    0 never executed
        -:  753:  }
        -:  754:
        -:  755:  // Returns a pointer to the current death test factory.
function _ZN7testing8internal12UnitTestImpl18death_test_factoryEv called 0 returned 0% blocks executed 0%
    #####:  756:  internal::DeathTestFactory* death_test_factory() {
    $$$$$:  756-block  0
    #####:  757:    return death_test_factory_.get();
    $$$$$:  757-block  0
call    0 never executed
        -:  758:  }
        -:  759:
        -:  760:  void SuppressTestEventsIfInSubprocess();
        -:  761:
        -:  762:  friend class ReplaceDeathTestFactory;
        -:  763:#endif  // GTEST_HAS_DEATH_TEST
        -:  764:
        -:  765:  // Initializes the event listener performing XML output as specified by
        -:  766:  // UnitTestOptions. Must not be called before InitGoogleTest.
        -:  767:  void ConfigureXmlOutput();
        -:  768:
        -:  769:#if GTEST_CAN_STREAM_RESULTS_
        -:  770:  // Initializes the event listener for streaming test results to a socket.
        -:  771:  // Must not be called before InitGoogleTest.
        -:  772:  void ConfigureStreamingOutput();
        -:  773:#endif
        -:  774:
        -:  775:  // Performs initialization dependent upon flag values obtained in
        -:  776:  // ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -:  777:  // ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -:  778:  // this function is also called from RunAllTests.  Since this function can be
        -:  779:  // called more than once, it has to be idempotent.
        -:  780:  void PostFlagParsingInit();
        -:  781:
        -:  782:  // Gets the random seed used at the start of the current test iteration.
function _ZNK7testing8internal12UnitTestImpl11random_seedEv called 0 returned 0% blocks executed 0%
    #####:  783:  int random_seed() const { return random_seed_; }
    $$$$$:  783-block  0
    $$$$$:  783-block  1
        -:  784:
        -:  785:  // Gets the random number generator.
function _ZN7testing8internal12UnitTestImpl6randomEv called 0 returned 0% blocks executed 0%
    #####:  786:  internal::Random* random() { return &random_; }
    $$$$$:  786-block  0
    $$$$$:  786-block  1
        -:  787:
        -:  788:  // Shuffles all test cases, and the tests within each test case,
        -:  789:  // making sure that death tests are still run first.
        -:  790:  void ShuffleTests();
        -:  791:
        -:  792:  // Restores the test cases and tests to their order before the first shuffle.
        -:  793:  void UnshuffleTests();
        -:  794:
        -:  795:  // Returns the value of GTEST_FLAG(catch_exceptions) at the moment
        -:  796:  // UnitTest::Run() starts.
function _ZNK7testing8internal12UnitTestImpl16catch_exceptionsEv called 203 returned 100% blocks executed 100%
      406:  797:  bool catch_exceptions() const { return catch_exceptions_; }
      203:  797-block  0
      203:  797-block  1
        -:  798:
        -:  799: private:
        -:  800:  friend class ::testing::UnitTest;
        -:  801:
        -:  802:  // Used by UnitTest::Run() to capture the state of
        -:  803:  // GTEST_FLAG(catch_exceptions) at the moment it starts.
function _ZN7testing8internal12UnitTestImpl20set_catch_exceptionsEb called 1 returned 100% blocks executed 100%
        1:  804:  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }
        1:  804-block  0
        -:  805:
        -:  806:  // The UnitTest object that owns this implementation object.
        -:  807:  UnitTest* const parent_;
        -:  808:
        -:  809:  // The working directory when the first TEST() or TEST_F() was
        -:  810:  // executed.
        -:  811:  internal::FilePath original_working_dir_;
        -:  812:
        -:  813:  // The default test part result reporters.
        -:  814:  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;
        -:  815:  DefaultPerThreadTestPartResultReporter
        -:  816:      default_per_thread_test_part_result_reporter_;
        -:  817:
        -:  818:  // Points to (but doesn't own) the global test part result reporter.
        -:  819:  TestPartResultReporterInterface* global_test_part_result_repoter_;
        -:  820:
        -:  821:  // Protects read and write access to global_test_part_result_reporter_.
        -:  822:  internal::Mutex global_test_part_result_reporter_mutex_;
        -:  823:
        -:  824:  // Points to (but doesn't own) the per-thread test part result reporter.
        -:  825:  internal::ThreadLocal<TestPartResultReporterInterface*>
        -:  826:      per_thread_test_part_result_reporter_;
        -:  827:
        -:  828:  // The vector of environments that need to be set-up/torn-down
        -:  829:  // before/after the tests are run.
        -:  830:  std::vector<Environment*> environments_;
        -:  831:
        -:  832:  // The vector of TestCases in their original order.  It owns the
        -:  833:  // elements in the vector.
        -:  834:  std::vector<TestCase*> test_cases_;
        -:  835:
        -:  836:  // Provides a level of indirection for the test case list to allow
        -:  837:  // easy shuffling and restoring the test case order.  The i-th
        -:  838:  // element of this vector is the index of the i-th test case in the
        -:  839:  // shuffled order.
        -:  840:  std::vector<int> test_case_indices_;
        -:  841:
        -:  842:  // ParameterizedTestRegistry object used to register value-parameterized
        -:  843:  // tests.
        -:  844:  internal::ParameterizedTestCaseRegistry parameterized_test_registry_;
        -:  845:
        -:  846:  // Indicates whether RegisterParameterizedTests() has been called already.
        -:  847:  bool parameterized_tests_registered_;
        -:  848:
        -:  849:  // Index of the last death test case registered.  Initially -1.
        -:  850:  int last_death_test_case_;
        -:  851:
        -:  852:  // This points to the TestCase for the currently running test.  It
        -:  853:  // changes as Google Test goes through one test case after another.
        -:  854:  // When no test is running, this is set to NULL and Google Test
        -:  855:  // stores assertion results in ad_hoc_test_result_.  Initially NULL.
        -:  856:  TestCase* current_test_case_;
        -:  857:
        -:  858:  // This points to the TestInfo for the currently running test.  It
        -:  859:  // changes as Google Test goes through one test after another.  When
        -:  860:  // no test is running, this is set to NULL and Google Test stores
        -:  861:  // assertion results in ad_hoc_test_result_.  Initially NULL.
        -:  862:  TestInfo* current_test_info_;
        -:  863:
        -:  864:  // Normally, a user only writes assertions inside a TEST or TEST_F,
        -:  865:  // or inside a function called by a TEST or TEST_F.  Since Google
        -:  866:  // Test keeps track of which test is current running, it can
        -:  867:  // associate such an assertion with the test it belongs to.
        -:  868:  //
        -:  869:  // If an assertion is encountered when no TEST or TEST_F is running,
        -:  870:  // Google Test attributes the assertion result to an imaginary "ad hoc"
        -:  871:  // test, and records the result in ad_hoc_test_result_.
        -:  872:  TestResult ad_hoc_test_result_;
        -:  873:
        -:  874:  // The list of event listeners that can be used to track events inside
        -:  875:  // Google Test.
        -:  876:  TestEventListeners listeners_;
        -:  877:
        -:  878:  // The OS stack trace getter.  Will be deleted when the UnitTest
        -:  879:  // object is destructed.  By default, an OsStackTraceGetter is used,
        -:  880:  // but the user can set this field to use a custom getter if that is
        -:  881:  // desired.
        -:  882:  OsStackTraceGetterInterface* os_stack_trace_getter_;
        -:  883:
        -:  884:  // True iff PostFlagParsingInit() has been called.
        -:  885:  bool post_flag_parse_init_performed_;
        -:  886:
        -:  887:  // The random number seed used at the beginning of the test run.
        -:  888:  int random_seed_;
        -:  889:
        -:  890:  // Our random number generator.
        -:  891:  internal::Random random_;
        -:  892:
        -:  893:  // The time of the test program start, in ms from the start of the
        -:  894:  // UNIX epoch.
        -:  895:  TimeInMillis start_timestamp_;
        -:  896:
        -:  897:  // How long the test took to run, in milliseconds.
        -:  898:  TimeInMillis elapsed_time_;
        -:  899:
        -:  900:#if GTEST_HAS_DEATH_TEST
        -:  901:  // The decomposed components of the gtest_internal_run_death_test flag,
        -:  902:  // parsed when RUN_ALL_TESTS is called.
        -:  903:  internal::scoped_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;
        -:  904:  internal::scoped_ptr<internal::DeathTestFactory> death_test_factory_;
        -:  905:#endif  // GTEST_HAS_DEATH_TEST
        -:  906:
        -:  907:  // A per-thread stack of traces created by the SCOPED_TRACE() macro.
        -:  908:  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;
        -:  909:
        -:  910:  // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()
        -:  911:  // starts.
        -:  912:  bool catch_exceptions_;
        -:  913:
        -:  914:  GTEST_DISALLOW_COPY_AND_ASSIGN_(UnitTestImpl);
        -:  915:};  // class UnitTestImpl
        -:  916:
        -:  917:// Convenience function for accessing the global UnitTest
        -:  918:// implementation object.
function _ZN7testing8internal15GetUnitTestImplEv called 432 returned 100% blocks executed 100%
      432:  919:inline UnitTestImpl* GetUnitTestImpl() {
      432:  919-block  0
      432:  920:  return UnitTest::GetInstance()->impl();
      432:  920-block  0
call    0 returned 432
call    1 returned 432
        -:  921:}
        -:  922:
        -:  923:#if GTEST_USES_SIMPLE_RE
        -:  924:
        -:  925:// Internal helper functions for implementing the simple regular
        -:  926:// expression matcher.
        -:  927:GTEST_API_ bool IsInSet(char ch, const char* str);
        -:  928:GTEST_API_ bool IsAsciiDigit(char ch);
        -:  929:GTEST_API_ bool IsAsciiPunct(char ch);
        -:  930:GTEST_API_ bool IsRepeat(char ch);
        -:  931:GTEST_API_ bool IsAsciiWhiteSpace(char ch);
        -:  932:GTEST_API_ bool IsAsciiWordChar(char ch);
        -:  933:GTEST_API_ bool IsValidEscape(char ch);
        -:  934:GTEST_API_ bool AtomMatchesChar(bool escaped, char pattern, char ch);
        -:  935:GTEST_API_ bool ValidateRegex(const char* regex);
        -:  936:GTEST_API_ bool MatchRegexAtHead(const char* regex, const char* str);
        -:  937:GTEST_API_ bool MatchRepetitionAndRegexAtHead(
        -:  938:    bool escaped, char ch, char repeat, const char* regex, const char* str);
        -:  939:GTEST_API_ bool MatchRegexAnywhere(const char* regex, const char* str);
        -:  940:
        -:  941:#endif  // GTEST_USES_SIMPLE_RE
        -:  942:
        -:  943:// Parses the command line for Google Test flags, without initializing
        -:  944:// other parts of Google Test.
        -:  945:GTEST_API_ void ParseGoogleTestFlagsOnly(int* argc, char** argv);
        -:  946:GTEST_API_ void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv);
        -:  947:
        -:  948:#if GTEST_HAS_DEATH_TEST
        -:  949:
        -:  950:// Returns the message describing the last system error, regardless of the
        -:  951:// platform.
        -:  952:GTEST_API_ std::string GetLastErrnoDescription();
        -:  953:
        -:  954:// Attempts to parse a string into a positive integer pointed to by the
        -:  955:// number parameter.  Returns true if that is possible.
        -:  956:// GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we can use
        -:  957:// it here.
        -:  958:template <typename Integer>
function _ZN7testing8internal18ParseNaturalNumberIjEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_ called 0 returned 0% blocks executed 0%
function _ZN7testing8internal18ParseNaturalNumberIiEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_ called 0 returned 0% blocks executed 0%
    #####:  959:bool ParseNaturalNumber(const ::std::string& str, Integer* number) {
    $$$$$:  959-block  0
    $$$$$:  959-block  1
        -:  960:  // Fail fast if the given string does not begin with a digit;
        -:  961:  // this bypasses strtoXXX's "optional leading whitespace and plus
        -:  962:  // or minus sign" semantics, which are undesirable here.
    #####:  963:  if (str.empty() || !IsDigit(str[0])) {
    $$$$$:  963-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  963-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  963-block  2
    $$$$$:  963-block  3
    $$$$$:  963-block  4
branch  7 never executed
branch  8 never executed
    $$$$$:  963-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  963-block  6
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  963-block  7
    $$$$$:  963-block  8
    $$$$$:  963-block  9
branch 16 never executed
branch 17 never executed
    #####:  964:    return false;
    $$$$$:  964-block  0
    $$$$$:  964-block  1
        -:  965:  }
    #####:  966:  errno = 0;
    $$$$$:  966-block  0
call    0 never executed
    $$$$$:  966-block  1
call    1 never executed
        -:  967:
        -:  968:  char* end;
        -:  969:  // BiggestConvertible is the largest integer type that system-provided
        -:  970:  // string-to-number conversion routines can return.
        -:  971:
        -:  972:# if GTEST_OS_WINDOWS && !defined(__GNUC__)
        -:  973:
        -:  974:  // MSVC and C++ Builder define __int64 instead of the standard long long.
        -:  975:  typedef unsigned __int64 BiggestConvertible;
        -:  976:  const BiggestConvertible parsed = _strtoui64(str.c_str(), &end, 10);
        -:  977:
        -:  978:# else
        -:  979:
        -:  980:  typedef unsigned long long BiggestConvertible;  // NOLINT
    #####:  981:  const BiggestConvertible parsed = strtoull(str.c_str(), &end, 10);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  982:
        -:  983:# endif  // GTEST_OS_WINDOWS && !defined(__GNUC__)
        -:  984:
    #####:  985:  const bool parse_success = *end == '\0' && errno == 0;
branch  0 never executed
branch  1 never executed
    $$$$$:  985-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  985-block  1
    $$$$$:  985-block  2
branch  5 never executed
branch  6 never executed
    $$$$$:  985-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  985-block  4
    $$$$$:  985-block  5
        -:  986:
        -:  987:  // TODO(vladl@google.com): Convert this to compile time assertion when it is
        -:  988:  // available.
    #####:  989:  GTEST_CHECK_(sizeof(Integer) <= sizeof(parsed));
    $$$$$:  989-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  989-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  989-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  989-block  3
call   10 never executed
    %%%%%:  989-block  4
call   11 never executed
    $$$$$:  989-block  5
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:  989-block  6
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$:  989-block  7
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$:  989-block  8
call   22 never executed
    %%%%%:  989-block  9
call   23 never executed
        -:  990:
    #####:  991:  const Integer result = static_cast<Integer>(parsed);
    #####:  992:  if (parse_success && static_cast<BiggestConvertible>(result) == parsed) {
    $$$$$:  992-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  992-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  992-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  992-block  3
branch  6 never executed
branch  7 never executed
    #####:  993:    *number = result;
    #####:  994:    return true;
    $$$$$:  994-block  0
    $$$$$:  994-block  1
        -:  995:  }
    #####:  996:  return false;
    $$$$$:  996-block  0
    $$$$$:  996-block  1
    $$$$$:  996-block  2
    $$$$$:  996-block  3
    $$$$$:  996-block  4
    $$$$$:  996-block  5
        -:  997:}
        -:  998:#endif  // GTEST_HAS_DEATH_TEST
        -:  999:
        -: 1000:// TestResult contains some private methods that should be hidden from
        -: 1001:// Google Test user but are required for testing. This class allow our tests
        -: 1002:// to access them.
        -: 1003://
        -: 1004:// This class is supplied only for the purpose of testing Google Test's own
        -: 1005:// constructs. Do not use it in user tests, either directly or indirectly.
        -: 1006:class TestResultAccessor {
        -: 1007: public:
        -: 1008:  static void RecordProperty(TestResult* test_result,
        -: 1009:                             const std::string& xml_element,
        -: 1010:                             const TestProperty& property) {
        -: 1011:    test_result->RecordProperty(xml_element, property);
        -: 1012:  }
        -: 1013:
        -: 1014:  static void ClearTestPartResults(TestResult* test_result) {
        -: 1015:    test_result->ClearTestPartResults();
        -: 1016:  }
        -: 1017:
        -: 1018:  static const std::vector<testing::TestPartResult>& test_part_results(
        -: 1019:      const TestResult& test_result) {
        -: 1020:    return test_result.test_part_results();
        -: 1021:  }
        -: 1022:};
        -: 1023:
        -: 1024:#if GTEST_CAN_STREAM_RESULTS_
        -: 1025:
        -: 1026:// Streams test results to the given port on the given host machine.
        -: 1027:class StreamingListener : public EmptyTestEventListener {
        -: 1028: public:
        -: 1029:  // Abstract base class for writing strings to a socket.
        -: 1030:  class AbstractSocketWriter {
        -: 1031:   public:
        -: 1032:    virtual ~AbstractSocketWriter() {}
        -: 1033:
        -: 1034:    // Sends a string to the socket.
        -: 1035:    virtual void Send(const std::string& message) = 0;
        -: 1036:
        -: 1037:    // Closes the socket.
        -: 1038:    virtual void CloseConnection() {}
        -: 1039:
        -: 1040:    // Sends a string and a newline to the socket.
        -: 1041:    void SendLn(const std::string& message) { Send(message + "\n"); }
        -: 1042:  };
        -: 1043:
        -: 1044:  // Concrete class for actually writing strings to a socket.
        -: 1045:  class SocketWriter : public AbstractSocketWriter {
        -: 1046:   public:
        -: 1047:    SocketWriter(const std::string& host, const std::string& port)
        -: 1048:        : sockfd_(-1), host_name_(host), port_num_(port) {
        -: 1049:      MakeConnection();
        -: 1050:    }
        -: 1051:
        -: 1052:    virtual ~SocketWriter() {
        -: 1053:      if (sockfd_ != -1)
        -: 1054:        CloseConnection();
        -: 1055:    }
        -: 1056:
        -: 1057:    // Sends a string to the socket.
        -: 1058:    virtual void Send(const std::string& message) {
        -: 1059:      GTEST_CHECK_(sockfd_ != -1)
        -: 1060:          << "Send() can be called only when there is a connection.";
        -: 1061:
        -: 1062:      const int len = static_cast<int>(message.length());
        -: 1063:      if (write(sockfd_, message.c_str(), len) != len) {
        -: 1064:        GTEST_LOG_(WARNING)
        -: 1065:            << "stream_result_to: failed to stream to "
        -: 1066:            << host_name_ << ":" << port_num_;
        -: 1067:      }
        -: 1068:    }
        -: 1069:
        -: 1070:   private:
        -: 1071:    // Creates a client socket and connects to the server.
        -: 1072:    void MakeConnection();
        -: 1073:
        -: 1074:    // Closes the socket.
        -: 1075:    void CloseConnection() {
        -: 1076:      GTEST_CHECK_(sockfd_ != -1)
        -: 1077:          << "CloseConnection() can be called only when there is a connection.";
        -: 1078:
        -: 1079:      close(sockfd_);
        -: 1080:      sockfd_ = -1;
        -: 1081:    }
        -: 1082:
        -: 1083:    int sockfd_;  // socket file descriptor
        -: 1084:    const std::string host_name_;
        -: 1085:    const std::string port_num_;
        -: 1086:
        -: 1087:    GTEST_DISALLOW_COPY_AND_ASSIGN_(SocketWriter);
        -: 1088:  };  // class SocketWriter
        -: 1089:
        -: 1090:  // Escapes '=', '&', '%', and '\n' characters in str as "%xx".
        -: 1091:  static std::string UrlEncode(const char* str);
        -: 1092:
        -: 1093:  StreamingListener(const std::string& host, const std::string& port)
        -: 1094:      : socket_writer_(new SocketWriter(host, port)) {
        -: 1095:    Start();
        -: 1096:  }
        -: 1097:
        -: 1098:  explicit StreamingListener(AbstractSocketWriter* socket_writer)
        -: 1099:      : socket_writer_(socket_writer) { Start(); }
        -: 1100:
        -: 1101:  void OnTestProgramStart(const UnitTest& /* unit_test */) {
        -: 1102:    SendLn("event=TestProgramStart");
        -: 1103:  }
        -: 1104:
        -: 1105:  void OnTestProgramEnd(const UnitTest& unit_test) {
        -: 1106:    // Note that Google Test current only report elapsed time for each
        -: 1107:    // test iteration, not for the entire test program.
        -: 1108:    SendLn("event=TestProgramEnd&passed=" + FormatBool(unit_test.Passed()));
        -: 1109:
        -: 1110:    // Notify the streaming server to stop.
        -: 1111:    socket_writer_->CloseConnection();
        -: 1112:  }
        -: 1113:
        -: 1114:  void OnTestIterationStart(const UnitTest& /* unit_test */, int iteration) {
        -: 1115:    SendLn("event=TestIterationStart&iteration=" +
        -: 1116:           StreamableToString(iteration));
        -: 1117:  }
        -: 1118:
        -: 1119:  void OnTestIterationEnd(const UnitTest& unit_test, int /* iteration */) {
        -: 1120:    SendLn("event=TestIterationEnd&passed=" +
        -: 1121:           FormatBool(unit_test.Passed()) + "&elapsed_time=" +
        -: 1122:           StreamableToString(unit_test.elapsed_time()) + "ms");
        -: 1123:  }
        -: 1124:
        -: 1125:  void OnTestCaseStart(const TestCase& test_case) {
        -: 1126:    SendLn(std::string("event=TestCaseStart&name=") + test_case.name());
        -: 1127:  }
        -: 1128:
        -: 1129:  void OnTestCaseEnd(const TestCase& test_case) {
        -: 1130:    SendLn("event=TestCaseEnd&passed=" + FormatBool(test_case.Passed())
        -: 1131:           + "&elapsed_time=" + StreamableToString(test_case.elapsed_time())
        -: 1132:           + "ms");
        -: 1133:  }
        -: 1134:
        -: 1135:  void OnTestStart(const TestInfo& test_info) {
        -: 1136:    SendLn(std::string("event=TestStart&name=") + test_info.name());
        -: 1137:  }
        -: 1138:
        -: 1139:  void OnTestEnd(const TestInfo& test_info) {
        -: 1140:    SendLn("event=TestEnd&passed=" +
        -: 1141:           FormatBool((test_info.result())->Passed()) +
        -: 1142:           "&elapsed_time=" +
        -: 1143:           StreamableToString((test_info.result())->elapsed_time()) + "ms");
        -: 1144:  }
        -: 1145:
        -: 1146:  void OnTestPartResult(const TestPartResult& test_part_result) {
        -: 1147:    const char* file_name = test_part_result.file_name();
        -: 1148:    if (file_name == NULL)
        -: 1149:      file_name = "";
        -: 1150:    SendLn("event=TestPartResult&file=" + UrlEncode(file_name) +
        -: 1151:           "&line=" + StreamableToString(test_part_result.line_number()) +
        -: 1152:           "&message=" + UrlEncode(test_part_result.message()));
        -: 1153:  }
        -: 1154:
        -: 1155: private:
        -: 1156:  // Sends the given message and a newline to the socket.
        -: 1157:  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }
        -: 1158:
        -: 1159:  // Called at the start of streaming to notify the receiver what
        -: 1160:  // protocol we are using.
        -: 1161:  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }
        -: 1162:
        -: 1163:  std::string FormatBool(bool value) { return value ? "1" : "0"; }
        -: 1164:
        -: 1165:  const scoped_ptr<AbstractSocketWriter> socket_writer_;
        -: 1166:
        -: 1167:  GTEST_DISALLOW_COPY_AND_ASSIGN_(StreamingListener);
        -: 1168:};  // class StreamingListener
        -: 1169:
        -: 1170:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 1171:
        -: 1172:}  // namespace internal
        -: 1173:}  // namespace testing
        -: 1174:
        -: 1175:#endif  // GTEST_SRC_GTEST_INTERNAL_INL_H_
