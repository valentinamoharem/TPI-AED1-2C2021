        -:    0:Source:C:/Users/valum/Documents/GitHub/TPI-AED1-2C2021/lib/googletest-master/googletest/src/gtest-typed-test.cc
        -:    0:Graph:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\valum\Documents\GitHub\TPI-AED1-2C2021\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2008 Google Inc.
        -:    2:// All Rights Reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Author: wan@google.com (Zhanyong Wan)
        -:   31:
        -:   32:#include "gtest/gtest-typed-test.h"
        -:   33:
        -:   34:#include "gtest/gtest.h"
        -:   35:
        -:   36:namespace testing {
        -:   37:namespace internal {
        -:   38:
        -:   39:#if GTEST_HAS_TYPED_TEST_P
        -:   40:
        -:   41:// Skips to the first non-space char in str. Returns an empty string if str
        -:   42:// contains only whitespace characters.
function _ZN7testing8internalL10SkipSpacesEPKc called 0 returned 0% blocks executed 0%
    #####:   43:static const char* SkipSpaces(const char* str) {
    $$$$$:   43-block  0
    #####:   44:  while (IsSpace(*str))
    $$$$$:   44-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   44-block  1
    #####:   45:    str++;
    #####:   46:  return str;
    $$$$$:   46-block  0
        -:   47:}
        -:   48:
function _ZN7testing8internalL18SplitIntoTestNamesEPKc called 0 returned 0% blocks executed 0%
    #####:   49:static std::vector<std::string> SplitIntoTestNames(const char* src) {
    $$$$$:   49-block  0
    #####:   50:  std::vector<std::string> name_vec;
    $$$$$:   50-block  0
call    0 never executed
    #####:   51:  src = SkipSpaces(src);
call    0 never executed
    #####:   52:  for (; src != NULL; src = SkipComma(src)) {
    $$$$$:   52-block  0
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   53:    name_vec.push_back(StripTrailingSpaces(GetPrefixUntilComma(src)));
    $$$$$:   53-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   53-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:   53-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:   53-block  3
call    9 never executed
call   10 never executed
    %%%%%:   53-block  4
call   11 never executed
    %%%%%:   53-block  5
call   12 never executed
    %%%%%:   53-block  6
call   13 never executed
        -:   54:  }
    #####:   55:  return name_vec;
    $$$$$:   55-block  0
    $$$$$:   55-block  1
        -:   56:}
        -:   57:
        -:   58:// Verifies that registered_tests match the test names in
        -:   59:// registered_tests_; returns registered_tests if successful, or
        -:   60:// aborts the program otherwise.
function _ZN7testing8internal19TypedTestCasePState25VerifyRegisteredTestNamesEPKciS3_ called 0 returned 0% blocks executed 0%
    #####:   61:const char* TypedTestCasePState::VerifyRegisteredTestNames(
    $$$$$:   61-block  0
        -:   62:    const char* file, int line, const char* registered_tests) {
        -:   63:  typedef RegisteredTestsMap::const_iterator RegisteredTestIter;
    #####:   64:  registered_ = true;
        -:   65:
    #####:   66:  std::vector<std::string> name_vec = SplitIntoTestNames(registered_tests);
    $$$$$:   66-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%:   66-block  1
call    4 never executed
        -:   67:
    #####:   68:  Message errors;
    $$$$$:   68-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    %%%%%:   68-block  1
call    4 never executed
        -:   69:
    #####:   70:  std::set<std::string> tests;
    $$$$$:   70-block  0
call    0 never executed
call    1 never executed
    %%%%%:   70-block  1
call    2 never executed
    #####:   71:  for (std::vector<std::string>::const_iterator name_it = name_vec.begin();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:   71-block  0
call    5 never executed
    #####:   72:       name_it != name_vec.end(); ++name_it) {
    $$$$$:   72-block  0
call    0 never executed
    #####:   73:    const std::string& name = *name_it;
    $$$$$:   73-block  0
call    0 never executed
    #####:   74:    if (tests.count(name) != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   74-block  0
branch  3 never executed
branch  4 never executed
    #####:   75:      errors << "Test " << name << " is listed more than once.\n";
    $$$$$:   75-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   75-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:   75-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   76:      continue;
    $$$$$:   76-block  0
        -:   77:    }
        -:   78:
    #####:   79:    bool found = false;
    #####:   80:    for (RegisteredTestIter it = registered_tests_.begin();
    $$$$$:   80-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:   80-block  1
call    5 never executed
    #####:   81:         it != registered_tests_.end();
    $$$$$:   81-block  0
call    0 never executed
call    1 never executed
        -:   82:         ++it) {
    #####:   83:      if (name == it->first) {
    $$$$$:   83-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   84:        found = true;
    #####:   85:        break;
    $$$$$:   85-block  0
        -:   86:      }
        -:   87:    }
        -:   88:
    #####:   89:    if (found) {
    $$$$$:   89-block  0
branch  0 never executed
branch  1 never executed
    #####:   90:      tests.insert(name);
    $$$$$:   90-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   90-block  1
        -:   91:    } else {
    #####:   92:      errors << "No test named " << name
    $$$$$:   92-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   92-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   93:             << " can be found in this test case.\n";
    $$$$$:   93-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   94:    }
        -:   95:  }
        -:   96:
    #####:   97:  for (RegisteredTestIter it = registered_tests_.begin();
    $$$$$:   97-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:   97-block  1
call    5 never executed
    #####:   98:       it != registered_tests_.end();
    $$$$$:   98-block  0
call    0 never executed
call    1 never executed
        -:   99:       ++it) {
    #####:  100:    if (tests.count(it->first) == 0) {
    $$$$$:  100-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  100-block  1
branch  4 never executed
branch  5 never executed
    #####:  101:      errors << "You forgot to list test " << it->first << ".\n";
    $$$$$:  101-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  101-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  101-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  101-block  3
        -:  102:    }
        -:  103:  }
        -:  104:
    #####:  105:  const std::string& errors_str = errors.GetString();
    $$$$$:  105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  105-block  1
call    3 never executed
    %%%%%:  105-block  2
call    4 never executed
    #####:  106:  if (errors_str != "") {
    $$$$$:  106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  106-block  1
branch  3 never executed
branch  4 never executed
    #####:  107:    fprintf(stderr, "%s %s", FormatFileLocation(file, line).c_str(),
    $$$$$:  107-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  107-block  1
call    4 never executed
call    5 never executed
    #####:  108:            errors_str.c_str());
    #####:  109:    fflush(stderr);
call    0 never executed
    #####:  110:    posix::Abort();
call    0 never executed
        -:  111:  }
        -:  112:
    #####:  113:  return registered_tests;
    $$$$$:  113-block  0
    %%%%%:  113-block  1
    %%%%%:  113-block  2
        -:  114:}
        -:  115:
        -:  116:#endif  // GTEST_HAS_TYPED_TEST_P
        -:  117:
        -:  118:}  // namespace internal
function _GLOBAL__sub_I__ZN7testing8internal17kStackTraceMarkerE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 81%
        4:  119:}  // namespace testing
        1:  119-block  0
        1:  119-block  1
call    0 returned 1
        1:  119-block  2
        1:  119-block  3
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  119-block  4
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:  119-block  5
